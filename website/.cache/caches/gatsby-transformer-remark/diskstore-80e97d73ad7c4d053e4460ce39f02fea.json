{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-fed2ae282a48ee9bc04f785c191b2556-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<p>It doesn’t matter whether you call it <em>Agile</em>, <em>Sprint</em>, <em>Shape Up</em>, or something\nelse. The premise of iterative software development is this: until you’ve built the\nproduct, you don’t really know what it should look like or how to best build\nit. You’ve never used it, so how would you know how it works best? You also\nhaven’t built it yet, which means you don’t have experience building it. Chances\nare low that you can accurately predict how its development will go.</p>\n<img src=\"/blog/avoid-pitfalls.png\" alt=\"Avoiding pitfalls cartoon graphic\">\n<p>So what you do is you acknowledge that you don’t know and lean into that.\nYou <em>don’t</em> plan the development of the product from start to finish in every\ndetail. You <em>don’t</em> nail down and define the hundreds of steps it will take to\ngo from zero to fully-built, shipped, and launched product. Instead, working\nin iterations, you define roughly where you want to go and take a single\nsmall step. Then you look around, get your bearings, correct course if\nnecessary, and take another step. Build something, ship it, learn, build again.</p>\n<p>But there’s one huge problem with this approach: if you’re constantly taking\nsmall steps and adjusting the direction slightly, you <em>feel</em> productive even\nwhen you’re going in circles. You keep taking two steps forward and two steps\nback but never take a big leap to someplace else entirely.</p>\n<p>You end up on <a href=\"https://elezea.com/2012/09/iphone-5-local-maximum/\">a local maximum</a>: you’re at a point that’s higher\nthan where you were before, but when you zoom out you see that there are\nhigher points. The product is better than it was in a previous iteration but not yet the\nbest one it could be.</p>\n<p>And even if you realise that you’re stuck and <em>know</em> that you must take a big\nleap, it’s hard to abandon the things you’ve built in many, many small\niterations. “So much work went into this! We can’t simply delete it! Right?”\nRight, says the <a href=\"https://en.wikipedia.org/wiki/Sunk_cost#Fallacy_effect\">sunk cost fallacy</a>; the trap in which you continue\ndoing something mainly because you already put a lot of effort in, even if\ncontinuing might not make sense anymore.</p>\n<p>“We can’t simply delete it, right?” is also exactly what went through my head\nwhen we threw away a functioning, shipped, customer-validated prototype of 10k\nlines. Even now, with the question answered with “yes, we can,” I find it hard\nto believe we built and shipped Batch Changes the way we did: building it\ntwice, renaming it twice. But it is one of the most rewarding and\ncustomer-focused processes I’ve been a part of.</p>\n<p>The following five pull requests tell the story of how we embraced iterative software development and avoided these two dangers — local maximums and the sunk cost fallacy — to build Batch Changes.</p>\n<h2 id=\"Pull-request-1-Build-one-to-throw-away\" style=\"position:relative;\"><a href=\"#Pull-request-1-Build-one-to-throw-away\" aria-label=\"Pull request 1 Build one to throw away permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Pull request #1: Build one to throw away</h2>\n<img src=\"https://sourcegraphstatic.com/blog/pitfalls-product-dev-5-prs/pull-request-1.png\" alt=\"Screenshot of pull request #1\">\n<p>In September 2019 we started working on Batch Changes, except that back then it\nwas called Automation and it was already implemented, kind of. <a href=\"https://handbook.sourcegraph.com/company/team#quinn-slack\">Quinn</a>\nhad built an impressive prototype to show to customers and to ask them whether\nthey’d use something like this. More than one said “yes, I would, and <em>exactly\nlike that</em>.” ”<a href=\"https://wiki.c2.com/?PlanToThrowOneAway\">Build one to throw\naway</a>” is what they say — but do you?\nDo you really throw away a prototype that’s more than 10k lines of code and that\ncustomers pointed at and said “I want this”?</p>\n<p>We did with <a href=\"https://github.com/sourcegraph/sourcegraph/pull/5482\">this pull request</a>; a placeholder for all of the code\nwe wrote in September and October 2019 to rebuild the functionality of the\nprototype from scratch.</p>\n<p>What made us do it? We came to the conclusion that building the product\nfrom the ground up, thereby fully understanding and owning the code, is more\nimportant to the long-term success of the project and the team than merging a\nprototype to get something out there as fast as possible. From my perspective\nnow, this was one of the key decisions that helped us avoid accumulating large\namounts of technical debt even though we’ve constantly shipped new things.</p>\n<p>Only a few months later, though, we were stuck. We realised that what we\nbuilt and shipped as an alpha to customers just didn’t work on a conceptual\nlevel. In that version, Batch Changes (called Campaigns at the time) were\nexecuted on the Sourcegraph instance to produce changes in repositories. This\nwas cool from a technical standpoint but it felt clunky and slow, and extending\nwhich types of changes could be made required us to add new code. “Meh” is a good\nword to use here.</p>\n<p>So at this point we had thrown the prototype away, built the product from\nscratch and had to realise that, well, <em>this isn’t it</em>. So what did we do?</p>\n<h2 id=\"Pull-request-2-Halfway-there\" style=\"position:relative;\"><a href=\"#Pull-request-2-Halfway-there\" aria-label=\"Pull request 2 Halfway there permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Pull request #2: Halfway there</h2>\n<img src=\"https://sourcegraphstatic.com/blog/pitfalls-product-dev-5-prs/pull-request-2.png\" alt=\"Screenshot of pull request #2\">\n<p><a href=\"https://github.com/sourcegraph/sourcegraph/pull/8008\">We threw half of it away</a>. The trigger was this idea: what if we simply\ndon’t produce changes on the server-side but instead accept <em>diffs</em> through\nthe API and, as part of the Sourcegraph CLI, provide a tool to produce those\ndiffs wherever you can run the CLI with whatever Docker container you want?</p>\n<p>The server-side would then only half concern itself with diffs: how to\npublish them on code hosts as pull and merge requests, how to sync them, how to\ntrack them, how to rate limit their creation, etc. We wouldn’t have to ship a\nnew release every time we came up with a new way to produce diffs, and our\ncustomers that were most interested in making large-scale changes often had\ncustom tooling already. With the CLI producing diffs by running any Docker\ncontainer, we could give them a place to plug it in and make it large-scale.</p>\n<p>This radical change to how the product worked was, in my opinion, maybe the\nmost important one made in the life of Batch Changes. The mental model and the\nabstraction layers it introduced turned out to be incredibly well-fitting. They\nallowed us to go faster and get a <em>valuable</em> tool into the hands of our\ncustomers even earlier.</p>\n<h2 id=\"Pull-request-3-Naming-is-hard\" style=\"position:relative;\"><a href=\"#Pull-request-3-Naming-is-hard\" aria-label=\"Pull request 3 Naming is hard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Pull request #3: Naming is hard</h2>\n<img src=\"https://sourcegraphstatic.com/blog/pitfalls-product-dev-5-prs/pull-request-3.png\" alt=\"Screenshot of pull request #3\">\n<p>So far, so good, right? Yes, except, you know, <a href=\"https://martinfowler.com/bliki/TwoHardThings.html\">naming is\nhard</a>. While we could’ve\ngone with the old name for the feature (Automation), we decided to rename it.\nTake a look at <a href=\"https://github.com/sourcegraph/about/pull/583\">PR #3</a> for the first of many PRs in February 2020 that changed\n”[Aa]utomation” to ”[Cc]ampaigns” in our codebase.</p>\n<p>What followed were months of fine-tuning, user testing, shipping, tweaking–i.e. iterative software development. We added more features, fixed a lot of bugs, and made things go faster.</p>\n<h2 id=\"Pull-request-4-Switching-to-a-declarative-system\" style=\"position:relative;\"><a href=\"#Pull-request-4-Switching-to-a-declarative-system\" aria-label=\"Pull request 4 Switching to a declarative system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Pull request #4: Switching to a declarative system</h2>\n<img src=\"https://sourcegraphstatic.com/blog/pitfalls-product-dev-5-prs/pull-request-4.png\" alt=\"Screenshot of pull request #4\">\n<p>But (and by now you should know where this is going) something felt <em>off</em>.\nWhile Campaigns worked and we had customers using it and saying they loved it,\nwe also noticed that our colleagues had problems using it, often hesitating to\nadmit that they were confused with the workflow. Some of the questions we got were:\nwhy JSON (yes, we made users write JSON by hand)? Why can’t I put everything in\nthat JSON file? Why do I have to switch to the web UI? And, what if I want to\nupdate the changes?</p>\n<p>I wouldn’t say we were stuck again; we were constantly shipping new features\nand improvements. But it also started dawning on us that maybe we’ve exhausted\none idea. Tweaking wouldn’t get us out of this, nor would a sledgehammer. But maybe if\nwe look at it from a different angle? What if, instead of requiring users to say\nwhat should happen to produce a campaign, we switch to a <em>declarative</em> model and\nlet them describe what the campaign should look like in a YAML file?</p>\n<p><a href=\"https://github.com/sourcegraph/sourcegraph/pull/10921\">This pull request</a> shows how we asked “what if?” What if we wrote the\ndocumentation first (yes, README-driven development) and showed it to teammates\nand colleagues. The time it took a colleague to go from “ok, tell me what\nCampaigns are,” to “ohhh, I get it, nice!” was reduced tenfold. This was very much to our\nrelief since the changes necessary to make the documentation a reality were\nhuge. We had to build a distributed, <em>declarative</em> system that manages hundreds\nor thousands of pull and merge requests across different code hosts.</p>\n<p>Once the idea was validated by a lot of “this totally makes sense” from potential\nusers, we got to work. Look at <a href=\"https://github.com/sourcegraph/sourcegraph/pull/12435\">this PR</a>, number 4b in this series if you\nwill, to see an example of what “declarative” means and how we reconcile the\ncurrent and the desired state (as described by a user) of a changeset. (Sidenote\nfor the curious: the code today is <a href=\"https://sourcegraph.com/github.com/sourcegraph/sourcegraph@e863448757e09850349b8a2bd7b1e540f6a6259a/-/blob/enterprise/internal/batches/reconciler/executor.go#L91-129\">even cooler</a>, take a look).</p>\n<p>That brings us to the last of the five pull requests.</p>\n<h2 id=\"Pull-request-5-Naming-is-really-hard\" style=\"position:relative;\"><a href=\"#Pull-request-5-Naming-is-really-hard\" aria-label=\"Pull request 5 Naming is really hard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Pull request #5: Naming is <em>really</em> hard</h2>\n<img src=\"https://sourcegraphstatic.com/blog/pitfalls-product-dev-5-prs/pull-request-5.png\" alt=\"Screenshot of pull request #5\">\n<p>Towards the end of last year we ripped the “beta” label off of then-named Campaigns and\nstarted to concentrate on getting more customers to use it: writing better (or\nin some cases any) documentation, improving the onboarding process, providing\ntroubleshooting help, and fixing bugs and edge cases.</p>\n<p>At the same time, our fast-growing product marketing team started working towards\nmaking our product as a whole more consistent. One thing that stood out was the\nname “Campaigns”. Next to the names of our other features, it didn’t fit in. It\nalso always required a sentence or two of explanation. (“Glad you asked. A\ncampaign is a …“) In a data-driven approach to finding a new name, Batch\nChanges came out as the winner. Ahead of Campaigns, Batches, Clusters, Bulk\nChanges, and others. No one we asked in our survey needed an explanation, and nearly\neveryone understood what the feature was roughly about.</p>\n<p>But renaming what we built <em>again</em>? It would’ve been tempting to answer with\n“customers are already using it, why bother?” or “we’ve recorded demo videos\nwith the old names!” or “there’s so many screenshots we would need to change.”\nIn all honesty, though, we had to admit that existing customers probably wouldn’t mind\nas long as it’s not a breaking change. Some of our screenshots were outdated\nalready, and we’d been meaning to record an up-to-date demo video anyway.</p>\n<p>So, <a href=\"https://github.com/sourcegraph/about/pull/2745\">rename it we did</a> and followed it up with the first official,\nnon-alpha, non-beta, download-it-now-and-try-it launch of <a href=\"https://about.sourcegraph.com/blog/introducing-batch-changes/\">Batch\nChanges</a>.</p>\n<h2 id=\"Commitment-is-the-key-to-iterative-software-development\" style=\"position:relative;\"><a href=\"#Commitment-is-the-key-to-iterative-software-development\" aria-label=\"Commitment is the key to iterative software development permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Commitment is the key to iterative software development</h2>\n<p>Looking back over these five pull requests and at the past 1.5 years now, I’m\nstill surprised. I know how easy it is to say, “but this is what we said we\nwanted to build,” or “but we invested all that time!” I’ve worked in iterative software development all my life. Two week sprints, four weeks, Agile, Scrum, even (ugh) <a href=\"https://www.google.com/search?q=scaled+agile+framework&#x26;tbm=isch\">SAFe</a>.\nThe danger of getting stuck and not knowing how to get out of it is always there.\nI’m still not quite sure how we avoided that trap. My best guess (and this\n<em>will</em> sound cheesy) is commitment. Commitment to building an excellent\nproduct, and commitment to building something that provides value to customers even\nif it means starting from scratch when you realize you’re at a dead end.</p>\n<p>Or let’s turn this around. How hard was it to say in January last year, after a\nteam of engineers had spent months building it, that we need to rip out half of\nit and change the flow completely? Really hard is my bet. But we did, and that\nstill inspires and motivates me because I’d rather build and ship something\nthat <em>is</em> valuable and that <em>is</em> good than to give customers something just\nbecause we built it.</p>\n<h3 id=\"More-posts-like-this\" style=\"position:relative;\"><a href=\"#More-posts-like-this\" aria-label=\"More posts like this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>More posts like this</h3>\n<ul>\n<li><a href=\"/blog/ex-googler-guide-dev-tools/\">An ex-Googler’s guide to dev tools</a></li>\n<li><a href=\"/blog/zoekt-memory-optimizations-for-sourcegraph-cloud/\">A 5x reduction in RAM usage with Zoekt memory optimizations</a></li>\n<li><a href=\"/blog/optimizing-a-code-intel-commit-graph/\">Optimizing a code intelligence commit graph</a></li>\n</ul>"}