{"expireTime":9007200905229170000,"key":"transformer-remark-markdown-ast-aa2ed007dc3400ab79b1f7fb4938142d-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Sourcegraph extensions make it easy to build code intelligence using existing language analysis tools that donâ€™t necessarily speak ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":132,"offset":132},"indent":[]}},{"type":"link","title":null,"url":"https://microsoft.github.io/language-server-protocol/specification","children":[{"type":"text","value":"LSP (the Language Server Protocol)","position":{"start":{"line":2,"column":133,"offset":133},"end":{"line":2,"column":167,"offset":167},"indent":[]}}],"position":{"start":{"line":2,"column":132,"offset":132},"end":{"line":2,"column":236,"offset":236},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":236,"offset":236},"end":{"line":2,"column":237,"offset":237},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":237,"offset":237},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"GraphQL is one of these languages that has ","position":{"start":{"line":4,"column":1,"offset":239},"end":{"line":4,"column":44,"offset":282},"indent":[]}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/@playlyfe/gql","children":[{"type":"text","value":"a language analysis tool","position":{"start":{"line":4,"column":45,"offset":283},"end":{"line":4,"column":69,"offset":307},"indent":[]}}],"position":{"start":{"line":4,"column":44,"offset":282},"end":{"line":4,"column":115,"offset":353},"indent":[]}},{"type":"text","value":" and I spent a few days building a Sourcegraph extension for it.","position":{"start":{"line":4,"column":115,"offset":353},"end":{"line":4,"column":179,"offset":417},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":239},"end":{"line":4,"column":179,"offset":417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can try it out on Sourcegraph.com by first ","position":{"start":{"line":6,"column":1,"offset":419},"end":{"line":6,"column":48,"offset":466},"indent":[]}},{"type":"link","title":null,"url":"https://sourcegraph.com/extensions/chris/graphql","children":[{"type":"text","value":"enabling the GraphQL extension","position":{"start":{"line":6,"column":49,"offset":467},"end":{"line":6,"column":79,"offset":497},"indent":[]}}],"position":{"start":{"line":6,"column":48,"offset":466},"end":{"line":6,"column":130,"offset":548},"indent":[]}},{"type":"text","value":" then visiting a ","position":{"start":{"line":6,"column":130,"offset":548},"end":{"line":6,"column":147,"offset":565},"indent":[]}},{"type":"link","title":null,"url":"https://sourcegraph.com/github.com/chrismwendt/graphql-ws-langserver@master/-/blob/schema.gql#L9:9","children":[{"type":"text","value":"sample GraphQL file","position":{"start":{"line":6,"column":148,"offset":566},"end":{"line":6,"column":167,"offset":585},"indent":[]}}],"position":{"start":{"line":6,"column":147,"offset":565},"end":{"line":6,"column":268,"offset":686},"indent":[]}},{"type":"text","value":" (beware this is relatively experimental - only hover tooltips and jump-to-definition within the same file work).","position":{"start":{"line":6,"column":268,"offset":686},"end":{"line":6,"column":381,"offset":799},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":419},"end":{"line":6,"column":381,"offset":799},"indent":[]}},{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/1387653/48732224-e4065280-ebf3-11e8-9689-d17da442728c.png","alt":"image","position":{"start":{"line":8,"column":1,"offset":801},"end":{"line":8,"column":110,"offset":910},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step was to start with the ","position":{"start":{"line":10,"column":1,"offset":912},"end":{"line":10,"column":38,"offset":949},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">activate()</code>","position":{"start":{"line":10,"column":38,"offset":949},"end":{"line":10,"column":50,"offset":961},"indent":[]}},{"type":"text","value":" function that will run when the Sourcegraph extension is run:","position":{"start":{"line":10,"column":50,"offset":961},"end":{"line":10,"column":112,"offset":1023},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":912},"end":{"line":10,"column":112,"offset":1023},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":12,"column":1,"offset":1025},"end":{"line":14,"column":4,"offset":1078},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then I grab the address of the GraphQL language server from a user setting:","position":{"start":{"line":16,"column":1,"offset":1080},"end":{"line":16,"column":76,"offset":1155},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1080},"end":{"line":16,"column":76,"offset":1155},"indent":[]}},{"type":"html","lang":"diff","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function activate(): void {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  const address = sourcegraph.configuration.get&lt;Settings>().get('graphql.langserver-address')\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":1157},"end":{"line":22,"column":4,"offset":1302},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then I register a callback that will run when the user hovers over something in a GraphQL file:","position":{"start":{"line":24,"column":1,"offset":1304},"end":{"line":24,"column":96,"offset":1399},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1304},"end":{"line":24,"column":96,"offset":1399},"indent":[]}},{"type":"html","lang":"diff","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function activate(): void {\n<span class=\"token prefix unchanged\"> </span>  const address = sourcegraph.configuration.get&lt;Settings>().get('graphql.langserver-address')\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  sourcegraph.languages.registerHoverProvider([{ pattern: '*.{graphql,gql}'}], {\n<span class=\"token prefix inserted\">+</span>    provideHover: async (doc, pos) => {\n<span class=\"token prefix inserted\">+</span>        return ajax({\n<span class=\"token prefix inserted\">+</span>            method: 'POST',\n<span class=\"token prefix inserted\">+</span>            url: address,\n<span class=\"token prefix inserted\">+</span>            body: JSON.stringify({ method: 'hover', doc, pos }),\n<span class=\"token prefix inserted\">+</span>            responseType: 'json',\n<span class=\"token prefix inserted\">+</span>            headers: {\n<span class=\"token prefix inserted\">+</span>                'Content-Type': 'application/json',\n<span class=\"token prefix inserted\">+</span>            },\n<span class=\"token prefix inserted\">+</span>        })\n<span class=\"token prefix inserted\">+</span>    }\n<span class=\"token prefix inserted\">+</span>  })\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>","position":{"start":{"line":26,"column":1,"offset":1401},"end":{"line":44,"column":4,"offset":1968},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It sends a request to a ","position":{"start":{"line":46,"column":1,"offset":1970},"end":{"line":46,"column":25,"offset":1994},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/chrismwendt/graphql-ws-langserver","children":[{"type":"text","value":"https://github.com/chrismwendt/graphql-ws-langserver","position":{"start":{"line":46,"column":25,"offset":1994},"end":{"line":46,"column":77,"offset":2046},"indent":[]}}],"position":{"start":{"line":46,"column":25,"offset":1994},"end":{"line":46,"column":77,"offset":2046},"indent":[]}},{"type":"text","value":" running elsewhere.","position":{"start":{"line":46,"column":77,"offset":2046},"end":{"line":46,"column":96,"offset":2065},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1970},"end":{"line":46,"column":96,"offset":2065},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then I convert the response to something that the Sourcegraph extension API understands (with Python syntax highlighting to recognize comment lines starting with ","position":{"start":{"line":48,"column":1,"offset":2067},"end":{"line":48,"column":163,"offset":2229},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">#</code>","position":{"start":{"line":48,"column":163,"offset":2229},"end":{"line":48,"column":166,"offset":2232},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":48,"column":166,"offset":2232},"end":{"line":48,"column":167,"offset":2233},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2067},"end":{"line":48,"column":167,"offset":2233},"indent":[]}},{"type":"html","lang":"diff","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function activate(): void {\n<span class=\"token prefix unchanged\"> </span>  const address = sourcegraph.configuration.get&lt;Settings>().get('graphql.langserver-address')\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  sourcegraph.languages.registerHoverProvider(docSelector, {\n<span class=\"token prefix unchanged\"> </span>    ...\n<span class=\"token prefix unchanged\"> </span>  })\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    .then(response => {\n<span class=\"token prefix inserted\">+</span>        return (\n<span class=\"token prefix inserted\">+</span>            response &amp;&amp;\n<span class=\"token prefix inserted\">+</span>            response.response &amp;&amp;\n<span class=\"token prefix inserted\">+</span>            response.response.contents &amp;&amp; {\n<span class=\"token prefix inserted\">+</span>                contents: {\n<span class=\"token prefix inserted\">+</span>                    // python syntax highlighting works pretty well for GraphQL\n<span class=\"token prefix inserted\">+</span>                    value: '```python\\n' + response.response.contents.join('\\n') + '\\n```',\n<span class=\"token prefix inserted\">+</span>                    kind: sourcegraph.MarkupKind.Markdown,\n<span class=\"token prefix inserted\">+</span>                },\n<span class=\"token prefix inserted\">+</span>            }\n<span class=\"token prefix inserted\">+</span>        )\n<span class=\"token prefix inserted\">+</span>    })\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>","position":{"start":{"line":50,"column":1,"offset":2235},"end":{"line":72,"column":5,"offset":2925},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Check out the repository for the ","position":{"start":{"line":74,"column":1,"offset":2927},"end":{"line":74,"column":34,"offset":2960},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/sourcegraph/sourcegraph-graphql","children":[{"type":"text","value":"extension","position":{"start":{"line":74,"column":35,"offset":2961},"end":{"line":74,"column":44,"offset":2970},"indent":[]}}],"position":{"start":{"line":74,"column":34,"offset":2960},"end":{"line":74,"column":97,"offset":3023},"indent":[]}},{"type":"text","value":" and the ","position":{"start":{"line":74,"column":97,"offset":3023},"end":{"line":74,"column":106,"offset":3032},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/chrismwendt/graphql-ws-langserver","children":[{"type":"text","value":"server component","position":{"start":{"line":74,"column":107,"offset":3033},"end":{"line":74,"column":123,"offset":3049},"indent":[]}}],"position":{"start":{"line":74,"column":106,"offset":3032},"end":{"line":74,"column":178,"offset":3104},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":74,"column":178,"offset":3104},"end":{"line":74,"column":179,"offset":3105},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2927},"end":{"line":74,"column":179,"offset":3105},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":1,"offset":3106}}}}