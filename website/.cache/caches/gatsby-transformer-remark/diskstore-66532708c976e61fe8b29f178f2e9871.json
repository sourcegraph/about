{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-b437d9cdbd45ddc5bc669d9cd989a19a-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<p>Liveblog by Beyang Liu (<a href=\"https://twitter.com/beyang\">@beyang</a>)</p>\n<p><a href=\"https://twitter.com/inconshreveable\">Alan Shreve</a> is an hacker, entrepreneur and creator of ngrok.com. <a href=\"https://ngrok.com/\">ngrok</a> is the best way to connect expose services behind a NAT or firewall to the internet for demos, webhook development and IoT connectivity. Today, he’s giving us a whirlwind tour of gRPC and how to use it in your production web service.</p>\n<hr>\n<p>Q: How do Microservices talk to each other?</p>\n<p>A: SOAP. Just kidding. Today, it’s mostly HTTP + JSON.</p>\n<blockquote>\n<p>I will die happy if I never write another REST client library in my life.</p>\n</blockquote>\n<p>It’s a lot of repetitive boilerplate.</p>\n<h2 id=\"Why-do-REST-APIs-suck\" style=\"position:relative;\"><a href=\"#Why-do-REST-APIs-suck\" aria-label=\"Why do REST APIs suck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Why do REST APIs suck?</h2>\n<ul>\n<li>Streaming is difficult (nigh-impossible in some languages)</li>\n<li>Bi-directional streaming isn’t possible at all</li>\n<li>Operations are difficult to model (e.g. ‘restart the machine’)</li>\n<li>Inefficient (textual representations aren’t optimal for networks)</li>\n<li>Your internal services aren’t RESTful anyways, they’re just HTTP endpoints</li>\n<li>Hard to get many resources in a single request (GraphQL)</li>\n<li>\n<p>No formal (machine-readable) API contract</p>\n<ul>\n<li>\n<p>Corollary: writing client libraries requires humans</p>\n<ul>\n<li>Corollary: humans are expensive and don’t like writing client libraries</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"So-lets-use-gRPC-to-build-a-cache-service\" style=\"position:relative;\"><a href=\"#So-lets-use-gRPC-to-build-a-cache-service\" aria-label=\"So lets use gRPC to build a cache service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>So let’s use gRPC to build a cache service</h2>\n<p>gRPC is a “high-performance open source universal RPC framework.”</p>\n<p>Let’s build a caching service together using gRPC.</p>\n<p>We don’t define it in code. We actually define it in an Interface Definition Language (IDL), in this case, protobufs.</p>\n<p>Here’s our caching service (<code class=\"language-text\">app.proto</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">syntax <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">package</span> rpc<span class=\"token punctuation\">;</span>\nservice Cache <span class=\"token punctuation\">{</span>\n  rpc <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>StoreReq<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>StoreResp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  rpc <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>GetReq<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>GetResp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmessage StoreReq <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  bytes val <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmessage StoreResp <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nmessage GetReq <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmessage GetResp <span class=\"token punctuation\">{</span>\n  bytes val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Snap your fingers and now you have client libraries in 9 different languages: C++, Java (including Android), Python, Go, Ruby, C#, JavaScript, Objective-C, PHP.</p>\n<p>But wait, there’s more: you also have server stubs for that API in 7 languages: C++, Java, Python, Go, Ruby, C#, JavaScript.</p>\n<p>We won’t dive into the generated code itself, but let’s see how we can use it.</p>\n<h2 id=\"servergo\" style=\"position:relative;\"><a href=\"#servergo\" aria-label=\"servergo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>server.go</h2>\n<p>Let’s look at <code class=\"language-text\">server.go</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">serverMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to run cache server: %s\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    srv <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rpc<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterCacheServer</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CacheService<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    l<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:5051\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// blocks until complete</span>\n    <span class=\"token keyword\">return</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> CacheService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>GetResp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unimplemented\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unimplemented\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"clientgo\" style=\"position:relative;\"><a href=\"#clientgo\" aria-label=\"clientgo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>client.go</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">clientMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"failed: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// connnect</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:5051\"</span><span class=\"token punctuation\">,</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithInsecure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dial server: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    cache <span class=\"token operator\">:=</span> rpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewCacheClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// store</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">,</span> Val<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"con\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to store: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// get</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to get: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got cached value %s\\n\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note: don’t have to write networking code or serialization code.</p>\n<p>Wait…</p>\n<blockquote>\n<p>Is this just WSDL all over again?</p>\n</blockquote>\n<h2 id=\"gRPC-compared-to-SOAPWSDL\" style=\"position:relative;\"><a href=\"#gRPC-compared-to-SOAPWSDL\" aria-label=\"gRPC compared to SOAPWSDL permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>gRPC compared to SOAP/WSDL</h2>\n<ul>\n<li>Inextricably tied to XML (grpc is pluggable)</li>\n<li>Very heavyweight service definition format: XML/XSD nightmare</li>\n<li>Unnecessarily complex, bloated with unnecessary features (Two-\nphase commit?!)</li>\n<li>Inflexible and intolerant of forward-compatibility (unlike protobuf)</li>\n<li>Performance, streaming not solved …</li>\n<li>Machine-readable API contracts are actually a really great idea</li>\n<li>Clients were responsible for generating libraries instead of vendors</li>\n</ul>\n<h3 id=\"gRPC-compared-to-Swagger\" style=\"position:relative;\"><a href=\"#gRPC-compared-to-Swagger\" aria-label=\"gRPC compared to Swagger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>gRPC compared to Swagger</h3>\n<ul>\n<li>Solves the machine-readable contract problem, but none\nof the other problems with HTTP/JSON (performance,\nstreaming, modeling)</li>\n<li>Swagger definitions are cumbersome and incredibly\nverbose. Compared to writing grpc protobuf definitions,\nthey’re a gigantic pain</li>\n</ul>\n<h3 id=\"gRPC-compared-to-Thrift\" style=\"position:relative;\"><a href=\"#gRPC-compared-to-Thrift\" aria-label=\"gRPC compared to Thrift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>gRPC compared to Thrift</h3>\n<ul>\n<li>Thrift actually a really great idea, very similar project goals</li>\n<li>\n<p>Never achieved same ubiquity and ease of use. This is really hard. Requires all major language implementations to be:</p>\n<ul>\n<li>well documented</li>\n<li>reliable</li>\n<li>highly performant</li>\n<li>easy to install</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Implementing-the-methods\" style=\"position:relative;\"><a href=\"#Implementing-the-methods\" aria-label=\"Implementing the methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Implementing the methods</h3>\n<p>Let’s fill in the stubs that gRPC generated for us:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> CacheService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    store <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>GetResp<span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    val <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetResp<span class=\"token punctuation\">{</span>Val<span class=\"token punctuation\">:</span> val<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Val\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"gRPC-errors\" style=\"position:relative;\"><a href=\"#gRPC-errors\" aria-label=\"gRPC errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>gRPC errors</h3>\n<p>There’s a number of error codes each corresponding to types of errors. It’s kind of like HTTP errors, but no response body.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>GetResp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    val<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>NotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Key not found %s\"</span><span class=\"token punctuation\">,</span>\n            req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetResp<span class=\"token punctuation\">{</span>Val<span class=\"token punctuation\">:</span> val<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Secure-transport\" style=\"position:relative;\"><a href=\"#Secure-transport\" aria-label=\"Secure transport permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Secure transport</h3>\n<p>There’s a simple API for that. On the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    tlsCreds<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> credentials<span class=\"token punctuation\">.</span><span class=\"token function\">NewServerTLSFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tls.crt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tls.key\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    srv <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Creds</span><span class=\"token punctuation\">(</span>tlsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    rpc<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterCacheServer</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CacheService<span class=\"token punctuation\">{</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    l<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:5051\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On the client:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// connect</span>\n    <span class=\"token comment\">// InsecureSkipVerify only for this example</span>\n    tlsCreds <span class=\"token operator\">:=</span> credentials<span class=\"token punctuation\">.</span><span class=\"token function\">NewTLS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>InsecureSkipVerify<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:5051\"</span><span class=\"token punctuation\">,</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithTransportCredentials</span><span class=\"token punctuation\">(</span>tlsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dial server: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Whats-going-on-underneath-the-hood-How-does-it-work\" style=\"position:relative;\"><a href=\"#Whats-going-on-underneath-the-hood-How-does-it-work\" aria-label=\"Whats going on underneath the hood How does it work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>What’s going on underneath the hood? How does it work?</h3>\n<p>protobuf serialized over HTTP/2:</p>\n<ul>\n<li>HTTP/2</li>\n<li>protobuf serialization (pluggable)</li>\n<li>\n<p>Clients open one long-lived connection to a grpc server</p>\n<ul>\n<li>A new HTTP/2 stream for each RPC call</li>\n<li>Allows simultaneous in-flight RPC calls</li>\n</ul>\n</li>\n<li>Allows client-side and server-side streaming</li>\n</ul>\n<h3 id=\"Implementations\" style=\"position:relative;\"><a href=\"#Implementations\" aria-label=\"Implementations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Implementations</h3>\n<p>There are 3 implementations at the moment:</p>\n<ul>\n<li>Three high-performance event loop driven implementations</li>\n<li>\n<p>C</p>\n<ul>\n<li>Ruby, Python, node.js, PHP, C#, Objective-C, and C++ are all bindings to the “C\ncore”</li>\n<li>PHP via PECL extension (apache or nginx/php-fpm)</li>\n</ul>\n</li>\n<li>\n<p>Java</p>\n<ul>\n<li>Netty + BoringSSL via JNI</li>\n</ul>\n</li>\n<li>\n<p>Go</p>\n<ul>\n<li>Pure Go implementation using Go stdlib crypto/tls package</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Where-did-gRPC-come-from\" style=\"position:relative;\"><a href=\"#Where-did-gRPC-come-from\" aria-label=\"Where did gRPC come from permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Where did gRPC come from?</h3>\n<ul>\n<li>Originally pioneered by a team at Google</li>\n<li>Next generation version of an internal Google project\ncalled ‘stubby’</li>\n<li>\n<p>Now a F/OSS project with a completely open spec and\ncontributors from many companies</p>\n<ul>\n<li>Development is still primarily executed by Google devs</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"What-if-you-have-misbehaving-clients\" style=\"position:relative;\"><a href=\"#What-if-you-have-misbehaving-clients\" aria-label=\"What if you have misbehaving clients permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>What if you have misbehaving clients</h3>\n<p>Let’s try Multitenancy (associating client ID with each request):</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">message StoreReq <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  bytes val <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">string</span> account_token <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- woo!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">app.proto</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">service Accounts <span class=\"token punctuation\">{</span>\n  rpc <span class=\"token function\">GetByToken</span><span class=\"token punctuation\">(</span>GetByTokenReq<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>GetByTokenResp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmessage GetByTokenReq <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> token <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmessage GetByTokenResp <span class=\"token punctuation\">{</span>\n  Account account <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmessage Account <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">int64</span> max_cache_keys <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">client.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    cache <span class=\"token operator\">:=</span> rpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewCacheClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// store</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">{</span>\n        AccountToken<span class=\"token punctuation\">:</span> <span class=\"token string\">\"inconshreveable\"</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token punctuation\">:</span>\n        <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">,</span>\n    Val<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"con\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to store: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// get</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to get: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">server.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> CacheService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    accounts      rpc<span class=\"token punctuation\">.</span>AccountsClient\n    store         <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n    keysByAccount <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">GetByToken</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetByTokenReq<span class=\"token punctuation\">{</span>\n        Token<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>keysByAccount<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> resp<span class=\"token punctuation\">.</span>Account<span class=\"token punctuation\">.</span>MaxCacheKeys <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>FailedPrecondition<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Account %s exceeds max key limit %d\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>A$\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>keysByAccount<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Val\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Its-too-slow\" style=\"position:relative;\"><a href=\"#Its-too-slow\" aria-label=\"Its too slow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>“It’s too slow”</h3>\n<p>Now someone tells you your service is too slow. And here you realize you have no visibility. What do you do?</p>\n<p>Option 1: add logging:</p>\n<p><code class=\"language-text\">client.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// store</span>\n    start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;==</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">{</span>\n        AccountToken<span class=\"token punctuation\">:</span> <span class=\"token string\">\"inconshreveable\"</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token punctuation\">:</span>\n        <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">,</span>\n    Val<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"con\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cache.Store duration %s\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to store: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// get</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// &lt;==</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cache.Get duration %s\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;==</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to get: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">server.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">GetByToken</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetByTokenReq<span class=\"token punctuation\">{</span>\n        Token<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accounts.GetByToken duration %s\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note: this is a lot of boilerplate. Turns out gRPC has something for that: the client interceptor. Every time you make a remote call, the interceptor middleware will be invoked.</p>\n<h3 id=\"Client-interceptor\" style=\"position:relative;\"><a href=\"#Client-interceptor\" aria-label=\"Client interceptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Client interceptor</h3>\n<p><code class=\"language-text\">interceptor.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">WithClientInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> grpc<span class=\"token punctuation\">.</span>DialOption <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithUnaryInterceptor</span><span class=\"token punctuation\">(</span>clientInterceptor<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">clientInterceptor</span><span class=\"token punctuation\">(</span>\n    ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span>\n    method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    req <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    reply <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    cc <span class=\"token operator\">*</span>grpc<span class=\"token punctuation\">.</span>ClientConn<span class=\"token punctuation\">,</span>\n    invoker grpc<span class=\"token punctuation\">.</span>UnaryInvoker<span class=\"token punctuation\">,</span>\n    opts <span class=\"token operator\">...</span>grpc<span class=\"token punctuation\">.</span>CallOption<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> <span class=\"token function\">invoker</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">,</span> opts<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;==</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke remote method=%s duration=%s error=%v\"</span><span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">client.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// connnect</span>\n    tlsCreds <span class=\"token operator\">:=</span> credentials<span class=\"token punctuation\">.</span><span class=\"token function\">NewTLS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>InsecureSkipVerify<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:5051\"</span><span class=\"token punctuation\">,</span>\n        grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithTransportCredentials</span><span class=\"token punctuation\">(</span>tlsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">WithClientInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;==</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dial server: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">server.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// client for accounts service</span>\n    tlsCreds <span class=\"token operator\">:=</span> credentials<span class=\"token punctuation\">.</span><span class=\"token function\">NewTLS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>InsecureSkipVerify<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:5052\"</span><span class=\"token punctuation\">,</span>\n        grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithTransportCredentials</span><span class=\"token punctuation\">(</span>tlsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">WithClientInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;==</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dial accounts server: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    accounts <span class=\"token operator\">:=</span> rpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewAccountsClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Server-interceptor\" style=\"position:relative;\"><a href=\"#Server-interceptor\" aria-label=\"Server interceptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Server interceptor</h3>\n<p>On the server side, there’s a <em>server interceptor</em>.</p>\n<p><code class=\"language-text\">interceptor.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ServerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> grpc<span class=\"token punctuation\">.</span>ServerOption <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">UnaryInterceptor</span><span class=\"token punctuation\">(</span>serverInterceptor<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">serverInterceptor</span><span class=\"token punctuation\">(</span>\n    ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span>\n    req <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    info <span class=\"token operator\">*</span>grpc<span class=\"token punctuation\">.</span>UnaryServerInfo<span class=\"token punctuation\">,</span>\n    handler grpc<span class=\"token punctuation\">.</span>UnaryHandler<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    start <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke server method=%s duration=%s error=%v\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>FullMethod<span class=\"token punctuation\">,</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">server.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// cache server</span>\n    tlsCreds<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">.</span><span class=\"token function\">NewServerTLSFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tls.crt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tls.key\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    srv <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Creds</span><span class=\"token punctuation\">(</span>tlsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ServerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    rpc<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterCacheServer</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">,</span> <span class=\"token function\">NewCacheService</span><span class=\"token punctuation\">(</span>accounts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    l<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:5051\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Adding-timeouts\" style=\"position:relative;\"><a href=\"#Adding-timeouts\" aria-label=\"Adding timeouts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Adding timeouts</h3>\n<p>Server-side timeout:</p>\n<p><code class=\"language-text\">server.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>StoreResp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    accountsCtx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">GetByToken</span><span class=\"token punctuation\">(</span>accountsCtx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetByTokenReq<span class=\"token punctuation\">{</span>\n        Token<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>keysByAccount<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> resp<span class=\"token punctuation\">.</span>Account<span class=\"token punctuation\">.</span>MaxCacheKeys <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>FailedPrecondition<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Account %s exceeds max\nkey limit %d\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>AccountToken<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Account<span class=\"token punctuation\">.</span>MaxCacheKeys<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you look in the logs you and find you’re still failing SLA. Some round-trips take 2.2 seconds (more than 2 seconds). Why? Your timeout only covers a portion of the full request/response roundtrip.</p>\n<p>So let the client set its own timeout:</p>\n<p><code class=\"language-text\">client.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// store</span>\n    ctx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>StoreReq<span class=\"token punctuation\">{</span>\n        AccountToken<span class=\"token punctuation\">:</span> <span class=\"token string\">\"inconshreveable\"</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token punctuation\">:</span>\n        <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">,</span>\n    Val<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"con\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to store: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// get</span>\n    ctx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n    resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to get: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got cached value %s\\n\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How does that interact with the timeout you set previously on the server? Simple: “the context propagates through.”</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/46Fbuugk4o4oGasG0SW4My/3a033c1566a68bdd38f9b4cdf5045691/Selection_081.png\" alt=\"Selection 081\">\n<h3 id=\"Dry-run\" style=\"position:relative;\"><a href=\"#Dry-run\" aria-label=\"Dry run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Dry run</h3>\n<p>Now let’s say you want to call your service with a dry run flag. I want to run it without side effects. I want it to work on all mutable API.</p>\n<p>This is simple with passing the right gRPC metadata (analogous to HTTP headers).</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/1cu5lDbGRqwQgEeG4ME2SU/a35157ce995e8ce60f05d163a7f2b6c0/Selection_082.png\" alt=\"Selection 082\">\n<img src=\"//images.contentful.com/le3mxztn6yoo/42rgrFoTK8KuSi4Uyeoks8/df479b68fed9b8eef3f082692ef78047/Selection_083.png\" alt=\"Selection 083\">\n<h3 id=\"Networks-fail\" style=\"position:relative;\"><a href=\"#Networks-fail\" aria-label=\"Networks fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Networks fail</h3>\n<p>Let’s add retry logic.</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/l7PpLqfUxqK0SEAooMAMY/88cd119ef76c35c7b29a76f76e63ef2b/Selection_084.png\" alt=\"Selection 084\">\n<p>Idempotent logic? We can have safe retries:</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/40Rpe4eCtyocQwcu8OIm0Y/f624ef7253acf6785ac03bfe3746665d/Selection_085.png\" alt=\"Selection 085\">\n<p>But now failed operations are slow. What’s going on?</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/4DAjgPxqooOeU4C8CwcqUW/3ecb0bb288bb189deaaf2e4c2954d203/Selection_086.png\" alt=\"Selection 086\">\n<img src=\"//images.contentful.com/le3mxztn6yoo/4CSpptKb4QI8MI86KySMo0/470041f59ad0ce66c3e3c28f53ddb07e/Selection_087.png\" alt=\"Selection 087\">\n<h3 id=\"Structured-errors\" style=\"position:relative;\"><a href=\"#Structured-errors\" aria-label=\"Structured errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Structured errors</h3>\n<p>In your response message, you add a new field that indicates whether it is possible to retry in the case of an error.</p>\n<p>You really want a structured error, not just a code and string. You want a full object’s worth of parameters.</p>\n<p>Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">message Error <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">int64</span> code <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">string</span> message <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">bool</span> temporary <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">int64</span> userErrorCode <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Unfortunately, this gets a little messy… A lot of serialization and deserialization is required, since gRPC doesn’t have response bodies.</p>\n<p>This is one of the larger frustrations working with gRPC compared to HTTP.</p>\n<h3 id=\"Another-feature-request-Cache-dump\" style=\"position:relative;\"><a href=\"#Another-feature-request-Cache-dump\" aria-label=\"Another feature request Cache dump permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Another feature request: Cache dump</h3>\n<p>Let’s say you now want to add the ability to dump the contents of your cache service.</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/77KvmSQJ1ecosQC8uA6806/6eb5773b2e12faf421cf1f20c624a6ab/Selection_088.png\" alt=\"Selection 088\">\n<p>Now you run into non-enough memory errors. What defensive measures can you add?</p>\n<p>Set max number of concurrent streams (simultaneous HTTP/2 streams per client):</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/5YljZmdcicicEcouGkOmiI/919124f6ceb6a8ccf04294f6436f3a20/Selection_089.png\" alt=\"Selection 089\">\n<p>gRPC also lets you use an InTap handler, a piece of code just like the server interceptor, but happens a little bit earlier in request lifecycle.</p>\n<img src=\"//images.contentful.com/le3mxztn6yoo/5T1mTVzab6maE4WIu02qOe/79018ce2d56ff7a4f3a6db4f552507b2/Selection_090.png\" alt=\"Selection 090\">\n<p>But what if that doesn’t solve all your memory issues?</p>\n<h3 id=\"Streaming\" style=\"position:relative;\"><a href=\"#Streaming\" aria-label=\"Streaming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Streaming</h3>\n<p><code class=\"language-text\">app.proto</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">syntax <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">package</span> rpc<span class=\"token punctuation\">;</span>\nservice Cache <span class=\"token punctuation\">{</span>\n  rpc <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>StoreReq<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>StoreResp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  rpc <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>GetReq<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>GetResp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  rpc <span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>DumpReq<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>stream DumpItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmessage DumpReq <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nmessage DumpItem <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  bytes val <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">server.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>CacheService<span class=\"token punctuation\">)</span> <span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>DumpReq<span class=\"token punctuation\">,</span> stream rpc<span class=\"token punctuation\">.</span>Cache_DumpServer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s<span class=\"token punctuation\">.</span>store <span class=\"token punctuation\">{</span>\n        stream<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>DumpItem<span class=\"token punctuation\">{</span>\n            Key<span class=\"token punctuation\">:</span> k<span class=\"token punctuation\">,</span>\n            Val<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">client.go</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">runClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// stream</span>\n    stream<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rpc<span class=\"token punctuation\">.</span>DumpReq<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dump: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        item<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">Recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to stream item: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache Entry: %s => %s\\n\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>Val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Load-balancing\" style=\"position:relative;\"><a href=\"#Load-balancing\" aria-label=\"Load balancing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Load balancing</h3>\n<p>There’s not enough time to go into detail, but one thing to note: The fact that you’re establishing a single persistent connection means that every request you make goes to the same server.</p>\n<p>So, you have to put the load-balancing logic in the client.</p>\n<p>You can of course put this logic into a middleware server that does this for you, so the actual client doesn’t have to worry about this. This is still pretty new, the spec is experimental.</p>\n<h3 id=\"gRPC-clients-in-other-languages\" style=\"position:relative;\"><a href=\"#gRPC-clients-in-other-languages\" aria-label=\"gRPC clients in other languages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>gRPC clients in other languages</h3>\n<p>Using your service from Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> grpc\n<span class=\"token keyword\">import</span> rpc_pb2 <span class=\"token keyword\">as</span> rpc\n\nchannel <span class=\"token operator\">=</span> grpc<span class=\"token punctuation\">.</span>insecure_channel<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:5051'</span><span class=\"token punctuation\">)</span>\ncache_svc <span class=\"token operator\">=</span> rpc<span class=\"token punctuation\">.</span>CacheStub<span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span>\nresp <span class=\"token operator\">=</span> cache_svc<span class=\"token punctuation\">.</span>Get<span class=\"token punctuation\">(</span>rpc<span class=\"token punctuation\">.</span>GetReq<span class=\"token punctuation\">(</span></code></pre></div>\n<h3 id=\"gRPC-downsides\" style=\"position:relative;\"><a href=\"#gRPC-downsides\" aria-label=\"gRPC downsides permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>gRPC downsides</h3>\n<ul>\n<li>Load Balancing</li>\n<li>Structured error handling is unfortunate</li>\n<li>No support for browser JS</li>\n<li>Breaking API changes</li>\n<li>Poor documentation for some languages</li>\n<li>No standardization across languages</li>\n</ul>\n<h3 id=\"Where-is-gRPC-used-in-production\" style=\"position:relative;\"><a href=\"#Where-is-gRPC-used-in-production\" aria-label=\"Where is gRPC used in production permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Where is gRPC used in production?</h3>\n<ul>\n<li>ngrok — all 20+ internal services communicate via gRPC</li>\n<li>Square — replacement for all of their internal RPC. one of\nthe very first adopters and contributors to gRPC.</li>\n<li>CoreOS — Production API for etcd v3 is entirely gRPC.</li>\n<li>Google — Production APIs for Google Cloud Services (e.g.\nPubSub, Speech Rec)</li>\n<li>Netflix, Yik Yak, VSCO, Cockroach, + many more</li>\n</ul>\n<h3 id=\"The-future-of-gRPC\" style=\"position:relative;\"><a href=\"#The-future-of-gRPC\" aria-label=\"The future of gRPC permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>The future of gRPC</h3>\n<p>The future of gRPC is easy to track: look at the grpc/grpc-proposals repository and grpc-io mailing list.</p>\n<ul>\n<li>New languages (swift + haskell are currently experimental)</li>\n<li>Further stability, reliability, performance improvements</li>\n<li>Increasingly fine-grained APIs for customizing behavior (connection\nmanagement, channel tracing)</li>\n<li>Browser JS!</li>\n</ul>"}