{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-f2680012a179dd6a74c8bc5daa999d58-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<p>End-to-end tests are an important part of our testing infrastructure at Sourcegraph. At the top of the <a href=\"https://docs.google.com/presentation/d/15gNk21rjer3xo-b1ZqyQVGebOp_aPvHU3YH7YnOMxtE/edit#slide=id.g437663ce1_53_98\">testing pyramid</a>, end-to-end testing ensures key user flows work properly from the user interacting with the browser all the way to backend services that work behind the scenes. However, end-to-end tests pose a couple of unique challenges. If not done right, these lead to flakiness and developers learn not to trust test failures when they happen - resulting in real bugs going unfixed. How do we prevent this?</p>\n<h2 id=\"A-good-end-to-end-testing-system\" style=\"position:relative;\"><a href=\"#A-good-end-to-end-testing-system\" aria-label=\"A good end to end testing system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>A good end-to-end testing system</h2>\n<p>When a commit causes an end-to-end test to fail, we need to make sure the developer who caused the failure is notified, has the confidence that the failed test identified a real problem and has enough insight into the issue to solve it. For example, we would want to show which <strong>commit</strong> caused the failure (including the message), <strong>which test</strong> is failing, and <strong>why</strong> it is failing.\nBefore the redesign of our end-to-end testing system, we had a custom service that ran the test suite periodically and posted to a Slack channel when a run failed. This wasn’t a good experience for a number of reasons:</p>\n<ul>\n<li>The failure could not be mapped back easily to a commit and author.</li>\n<li>There was no UI to retry a run.</li>\n<li>If the tests kept failing, the bot would keep spamming the Slack channel.</li>\n<li>There wasn’t a good way to see if the end-to-end tests were already failing before.</li>\n<li>The Slack UI wasn’t a good display for test results. For example, it couldn’t show CLI colors, and it wasn’t easy to add screenshots to a webhook payload.</li>\n<li>There was no clear way to run end-to-end tests on branches/PRs while still delivering notifications only to the relevant person.</li>\n<li>Logs were not streamed.</li>\n</ul>\n<p>Some of these issues could have been solved by investing time to make our end-to-end bot smarter, but it would have added more complexity.</p>\n<p>We were already using <a href=\"https://buildkite.com/\">Buildkite</a> for other continuous integration tasks and knew that it already provided these features and much more:</p>\n<ul>\n<li>Every failure is linked to a commit and author.</li>\n<li>Builds and steps can be rerun.</li>\n<li>UI for seeing recent runs.</li>\n<li>CLI colors.</li>\n<li>Streamed logs.</li>\n<li>Customizable email notifications.</li>\n<li>Integration into notification tools like <a href=\"http://ccmenu.org/\">CCMenu</a>.</li>\n<li>Prevents deploys while tests are running.</li>\n<li>My favorite feature: Screenshots in CLI output.</li>\n</ul>\n<h2 id=\"Defining-a-Buildkite-pipeline-for-end-to-end-tests\" style=\"position:relative;\"><a href=\"#Defining-a-Buildkite-pipeline-for-end-to-end-tests\" aria-label=\"Defining a Buildkite pipeline for end to end tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Defining a Buildkite pipeline for end-to-end tests</h2>\n<p>To accomplish testing Sourcegraph truly “end-to-end”, the tests are run against a real deployment. At Sourcegraph, we use Docker and Kubernetes to deploy our application. Our pipeline builds the images for the current commit, then the <code class=\"language-text\">deploy</code> step in the pipeline deploys the fresh images with <code class=\"language-text\">kubectl set-image</code> to a dedicated staging cluster and waits for the rollout to finish with <code class=\"language-text\">kubectl rollout status</code>.</p>\n<p>The YAML pipeline definition looks similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">FORCE_COLOR</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span>\n\n\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n <span class=\"token comment\"># ... omitted: running unit tests etc ...</span>\n\n\n <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> <span class=\"token string\">':rocket:'</span>\n   <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> master\n   <span class=\"token key atrule\">concurrency_group</span><span class=\"token punctuation\">:</span> deploy\n   <span class=\"token key atrule\">concurrency</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n   <span class=\"token key atrule\">artifact_paths</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*.png</span>\n   <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n     <span class=\"token comment\"># Tell end-to-end tests which endpoint to hit</span>\n     SOURCEGRAPH_URL=https<span class=\"token punctuation\">:</span>//staging.sourcegraph.com\n   <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n     docker build -t sourcegraph/frontend:$BUILDKITE_COMMIT .\n     docker push sourcegraph/frontend:$BUILDKITE_COMMIT\n     docker tag sourcegraph/frontend:$BUILDKITE_COMMIT sourcegraph/frontend:latest\n     docker push sourcegraph/frontend:latest\n     kubectl --context=staging set image frontend frontend=sourcegraph/frontend:$BUILDKITE_COMMIT\n     kubectl --context=staging rollout status deployment/frontend\n     npm ci\n     npm run test-e2e\n     kubectl --context=production set image frontend frontend=sourcegraph/frontend:$BUILDKITE_COMMIT\n     kubectl --context=production rollout status deployment/frontend</span></code></pre></div>\n<p>The <code class=\"language-text\">concurrency_group</code> and <code class=\"language-text\">concurrency_limit</code> settings here prevent other deploys from running at the same time and ensures they are run in order of creation. It acts like a “lock” on the staging cluster - no other build (not even from a different pipeline) can touch the staging cluster until the end-to-end test run of this build completed.</p>\n<h2 id=\"Writing-an-end-to-end-test-suite\" style=\"position:relative;\"><a href=\"#Writing-an-end-to-end-test-suite\" aria-label=\"Writing an end to end test suite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Writing an end-to-end test suite</h2>\n<p>For the actual tests, we use <a href=\"https://github.com/GoogleChrome/puppeteer\">Puppeteer</a> - a lightweight library by Google to control a headless Google Chrome instance. It will navigate to pages, click elements, and assert that certain elements appear or have the right content.   Together with a test runner like <a href=\"https://mochajs.org/\">Mocha</a> that supports <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> in tests, it enables tests that are both easy to read and write.</p>\n<h3 id=\"Making-assertions\" style=\"position:relative;\"><a href=\"#Making-assertions\" aria-label=\"Making assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Making assertions</h3>\n<p>Being run against an actual deployment, end-to-end tests are subject to latency, so most actions and assertions need to account for variable loading times. That means it is not possible to, for example, programmatically click an element and directly assert that the desired effect occurred. Adding an artificial timeout between the action and the assertion doesn’t work well because the time that needs to be waited for can vary. If the delay is too short, then the test will fail when it should pass, but if the delay is too long then it slows down the entire test suite. A better approach is to retry every assertion a fixed number of times, with a small delay between every retry. The <a href=\"https://www.npmjs.com/package/p-retry\"><code class=\"language-text\">p-retry</code></a> module from npm makes this very easy.</p>\n<p>Mocha’s <code class=\"language-text\">--retries</code> option is also helpful to prevent flakiness, but be aware that this might hide actual failures that only happen a fraction of the time.</p>\n<p>To make sure end-to-end tests are not accidentally broken, we use special CSS classes prefixed with <code class=\"language-text\">e2e</code> for elements that are asserted on in tests.</p>\n<h2 id=\"Giving-insight-into-failures-with-screenshots\" style=\"position:relative;\"><a href=\"#Giving-insight-into-failures-with-screenshots\" aria-label=\"Giving insight into failures with screenshots permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Giving insight into failures with screenshots</h2>\n<p>If a test fails, we tell Puppeteer to save a screenshot to disk named after the test name:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTest <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTest<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'failed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTest<span class=\"token punctuation\">.</span><span class=\"token function\">fullTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\W</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.png'</span>\n        <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> fileName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">CI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\u001B]1338;url=\"artifact://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\";alt=\"Screenshot\"\\u0007</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the pipeline, we defined that all .png files are uploaded as artifacts to Buildkite. We then use <a href=\"https://buildkite.com/docs/pipelines/images-in-log-output\">Buildkite’s special ANSI escape sequence</a> to make it display the screenshot right in the log output of the test failure.</p>\n<img src=\"//images.ctfassets.net/le3mxztn6yoo/2z90IVNXxWqQgGggq4sOeO/399539c22c100b1797fa71026114bdd8/Screen_Shot_2018-09-10_at_4.46.47_PM.png\" alt=\"buildkitelog\">\n<p>This is incredibly valuable to reveal why a test might have failed - for example, did only a button not appear, or is its whole parent component not rendered? Another benefit is that real failures are less likely to be dismissed as flakiness because the screenshot serves as a proof that something is truly wrong.</p>\n<h2 id=\"Conclusion\" style=\"position:relative;\"><a href=\"#Conclusion\" aria-label=\"Conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Conclusion</h2>\n<p>So far, this new end-to-end testing system works well for us - confidence in tests has increased, and engineers feel more responsible to fix failures quickly.</p>\n<p>Do you have interesting end-to-end testing stories? Tweet us <a href=\"https://twitter.com/sourcegraph\">@sourcegraph</a>!</p>\n<h2 id=\"More-posts-like-this\" style=\"position:relative;\"><a href=\"#More-posts-like-this\" aria-label=\"More posts like this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>More posts like this</h2>\n<ul>\n<li><a href=\"https://about.sourcegraph.com/blog/eliminate-secrets-from-codebase-with-universal-code-search/\">How we used universal code search to eliminate secrets from our codebase</a></li>\n<li><a href=\"https://about.sourcegraph.com/blog/how-not-to-break-a-search-engine-unglamorous-engineering/\">How not to break a search engine or: What I learned about unglamorous engineering</a></li>\n<li><a href=\"https://about.sourcegraph.com/blog/role-of-observability-tools-high-performing-development-teams/\">Monitoring is not enough: For high-performing development teams you need observability tools</a></li>\n</ul>"}