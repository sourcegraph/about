{"expireTime":9007200905229170000,"key":"transformer-remark-markdown-html-ast-29bebf2b16e448df031b181bf009e21a-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"raw","value":"<!-- START AUDIO -->","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<audio className=\"object-center\" src=\"https://www.buzzsprout.com/1097978/6078358-andrew-gallant-creator-of-ripgrep.mp3\" controls preload=\"none\">","position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":145,"offset":167}}},{"type":"raw","value":"</audio>","position":{"start":{"line":4,"column":145,"offset":167},"end":{"line":4,"column":153,"offset":175}}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":153,"offset":175}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- END AUDIO -->","position":{"start":{"line":6,"column":1,"offset":177},"end":{"line":6,"column":19,"offset":195}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- START GUESTS -->","position":{"start":{"line":8,"column":1,"offset":197},"end":{"line":8,"column":22,"offset":218}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span>","position":{"start":{"line":10,"column":1,"offset":220},"end":{"line":10,"column":7,"offset":226}}},{"type":"text","value":"Andrew Gallant, Beyang Liu","position":{"start":{"line":10,"column":7,"offset":226},"end":{"line":10,"column":33,"offset":252}}},{"type":"raw","value":"</span>","position":{"start":{"line":10,"column":33,"offset":252},"end":{"line":10,"column":40,"offset":259}}}],"position":{"start":{"line":10,"column":1,"offset":220},"end":{"line":10,"column":40,"offset":259}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- END GUESTS -->","position":{"start":{"line":12,"column":1,"offset":261},"end":{"line":12,"column":20,"offset":280}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- START SUMMARY -->","position":{"start":{"line":14,"column":1,"offset":282},"end":{"line":14,"column":23,"offset":304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/burntsushi5"},"children":[{"type":"text","value":"Andrew Gallant","position":{"start":{"line":16,"column":2,"offset":307},"end":{"line":16,"column":16,"offset":321}}}],"position":{"start":{"line":16,"column":1,"offset":306},"end":{"line":16,"column":50,"offset":355}}},{"type":"text","value":" (a.k.a. BurntSushi) is the creator of ","position":{"start":{"line":16,"column":50,"offset":355},"end":{"line":16,"column":89,"offset":394}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/BurntSushi/ripgrep"},"children":[{"type":"text","value":"ripgrep","position":{"start":{"line":16,"column":90,"offset":395},"end":{"line":16,"column":97,"offset":402}}}],"position":{"start":{"line":16,"column":89,"offset":394},"end":{"line":16,"column":137,"offset":442}}},{"type":"text","value":", a popular command-line search tool that powers the search box in VS Code. Andrew tells me how ripgrep began, explains why it’s faster than GNU grep and other grep alternatives, and gets into the nitty-gritty of regex optimization.","position":{"start":{"line":16,"column":137,"offset":442},"end":{"line":16,"column":369,"offset":674}}}],"position":{"start":{"line":16,"column":1,"offset":306},"end":{"line":16,"column":369,"offset":674}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We also discuss another matter near and dear to both of us: Linux window management. Andrew talks about what he likes about Go and Haskell and why Rust is his current go-to programming language, and finally he shares a humorous anecdote involving algorithms, technical recruiting, and everyone’s favorite New England sports team.","position":{"start":{"line":18,"column":1,"offset":676},"end":{"line":18,"column":330,"offset":1005}}}],"position":{"start":{"line":18,"column":1,"offset":676},"end":{"line":18,"column":330,"offset":1005}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- END SUMMARY -->","position":{"start":{"line":20,"column":1,"offset":1007},"end":{"line":20,"column":21,"offset":1027}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- START SHOWNOTES -->","position":{"start":{"line":22,"column":1,"offset":1029},"end":{"line":22,"column":25,"offset":1053}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Andrew Gallant: ","position":{"start":{"line":24,"column":1,"offset":1055},"end":{"line":24,"column":17,"offset":1071}}},{"type":"element","tagName":"a","properties":{"href":"https://burntsushi.net"},"children":[{"type":"text","value":"https://burntsushi.net","position":{"start":{"line":24,"column":17,"offset":1071},"end":{"line":24,"column":39,"offset":1093}}}],"position":{"start":{"line":24,"column":17,"offset":1071},"end":{"line":24,"column":39,"offset":1093}}},{"type":"text","value":", ","position":{"start":{"line":24,"column":39,"offset":1093},"end":{"line":24,"column":41,"offset":1095}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/burntsushi5"},"children":[{"type":"text","value":"https://twitter.com/burntsushi5","position":{"start":{"line":24,"column":41,"offset":1095},"end":{"line":24,"column":72,"offset":1126}}}],"position":{"start":{"line":24,"column":41,"offset":1095},"end":{"line":24,"column":72,"offset":1126}}}],"position":{"start":{"line":24,"column":1,"offset":1055},"end":{"line":24,"column":72,"offset":1126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ripgrep: ","position":{"start":{"line":26,"column":1,"offset":1128},"end":{"line":26,"column":10,"offset":1137}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/BurntSushi/ripgrep"},"children":[{"type":"text","value":"https://github.com/BurntSushi/ripgrep","position":{"start":{"line":26,"column":10,"offset":1137},"end":{"line":26,"column":47,"offset":1174}}}],"position":{"start":{"line":26,"column":10,"offset":1137},"end":{"line":26,"column":47,"offset":1174}}}],"position":{"start":{"line":26,"column":1,"offset":1128},"end":{"line":26,"column":47,"offset":1174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Bulletin board systems: vBulletin (","position":{"start":{"line":28,"column":1,"offset":1176},"end":{"line":28,"column":36,"offset":1211}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/VBulletin"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/VBulletin","position":{"start":{"line":28,"column":36,"offset":1211},"end":{"line":28,"column":75,"offset":1250}}}],"position":{"start":{"line":28,"column":36,"offset":1211},"end":{"line":28,"column":75,"offset":1250}}},{"type":"text","value":"), YABB (","position":{"start":{"line":28,"column":75,"offset":1250},"end":{"line":28,"column":84,"offset":1259}}},{"type":"element","tagName":"a","properties":{"href":"http://www.yabbforum.com"},"children":[{"type":"text","value":"http://www.yabbforum.com","position":{"start":{"line":28,"column":84,"offset":1259},"end":{"line":28,"column":108,"offset":1283}}}],"position":{"start":{"line":28,"column":84,"offset":1259},"end":{"line":28,"column":108,"offset":1283}}},{"type":"text","value":")","position":{"start":{"line":28,"column":108,"offset":1283},"end":{"line":28,"column":109,"offset":1284}}}],"position":{"start":{"line":28,"column":1,"offset":1176},"end":{"line":28,"column":109,"offset":1284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Window managers: ","position":{"start":{"line":30,"column":1,"offset":1286},"end":{"line":30,"column":18,"offset":1303}}},{"type":"element","tagName":"a","properties":{"href":"https://xmonad.org/"},"children":[{"type":"text","value":"xmonad","position":{"start":{"line":30,"column":19,"offset":1304},"end":{"line":30,"column":25,"offset":1310}}}],"position":{"start":{"line":30,"column":18,"offset":1303},"end":{"line":30,"column":47,"offset":1332}}},{"type":"text","value":", ","position":{"start":{"line":30,"column":47,"offset":1332},"end":{"line":30,"column":49,"offset":1334}}},{"type":"element","tagName":"a","properties":{"href":"https://i3wm.org/"},"children":[{"type":"text","value":"i3","position":{"start":{"line":30,"column":50,"offset":1335},"end":{"line":30,"column":52,"offset":1337}}}],"position":{"start":{"line":30,"column":49,"offset":1334},"end":{"line":30,"column":72,"offset":1357}}}],"position":{"start":{"line":30,"column":1,"offset":1286},"end":{"line":30,"column":72,"offset":1357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Russ Cox posts on implementing regular expressions: ","position":{"start":{"line":32,"column":1,"offset":1359},"end":{"line":32,"column":53,"offset":1411}}},{"type":"element","tagName":"a","properties":{"href":"https://swtch.com/~rsc/regexp/"},"children":[{"type":"text","value":"https://swtch.com/~rsc/regexp/","position":{"start":{"line":32,"column":53,"offset":1411},"end":{"line":32,"column":83,"offset":1441}}}],"position":{"start":{"line":32,"column":53,"offset":1411},"end":{"line":32,"column":83,"offset":1441}}}],"position":{"start":{"line":32,"column":1,"offset":1359},"end":{"line":32,"column":83,"offset":1441}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"EWMH: ","position":{"start":{"line":34,"column":1,"offset":1443},"end":{"line":34,"column":7,"offset":1449}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Extended_Window_Manager_Hints"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Extended_Window_Manager_Hints","position":{"start":{"line":34,"column":7,"offset":1449},"end":{"line":34,"column":66,"offset":1508}}}],"position":{"start":{"line":34,"column":7,"offset":1449},"end":{"line":34,"column":66,"offset":1508}}}],"position":{"start":{"line":34,"column":1,"offset":1443},"end":{"line":34,"column":66,"offset":1508}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ICCCM: ","position":{"start":{"line":36,"column":1,"offset":1510},"end":{"line":36,"column":8,"offset":1517}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Inter-Client_Communication_Conventions_Manual"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Inter-Client_Communication_Conventions_Manual","position":{"start":{"line":36,"column":8,"offset":1517},"end":{"line":36,"column":83,"offset":1592}}}],"position":{"start":{"line":36,"column":8,"offset":1517},"end":{"line":36,"column":83,"offset":1592}}}],"position":{"start":{"line":36,"column":1,"offset":1510},"end":{"line":36,"column":83,"offset":1592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Xinerama: ","position":{"start":{"line":38,"column":1,"offset":1594},"end":{"line":38,"column":11,"offset":1604}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Xinerama"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Xinerama","position":{"start":{"line":38,"column":11,"offset":1604},"end":{"line":38,"column":49,"offset":1642}}}],"position":{"start":{"line":38,"column":11,"offset":1604},"end":{"line":38,"column":49,"offset":1642}}}],"position":{"start":{"line":38,"column":1,"offset":1594},"end":{"line":38,"column":49,"offset":1642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RandR: ","position":{"start":{"line":40,"column":1,"offset":1644},"end":{"line":40,"column":8,"offset":1651}}},{"type":"element","tagName":"a","properties":{"href":"https://www.x.org/wiki/Projects/XRandR/"},"children":[{"type":"text","value":"https://www.x.org/wiki/Projects/XRandR/","position":{"start":{"line":40,"column":8,"offset":1651},"end":{"line":40,"column":47,"offset":1690}}}],"position":{"start":{"line":40,"column":8,"offset":1651},"end":{"line":40,"column":47,"offset":1690}}}],"position":{"start":{"line":40,"column":1,"offset":1644},"end":{"line":40,"column":47,"offset":1690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Openbox: ","position":{"start":{"line":42,"column":1,"offset":1692},"end":{"line":42,"column":10,"offset":1701}}},{"type":"element","tagName":"a","properties":{"href":"http://openbox.org/wiki/Main_Page"},"children":[{"type":"text","value":"http://openbox.org/wiki/Main_Page","position":{"start":{"line":42,"column":10,"offset":1701},"end":{"line":42,"column":43,"offset":1734}}}],"position":{"start":{"line":42,"column":10,"offset":1701},"end":{"line":42,"column":43,"offset":1734}}}],"position":{"start":{"line":42,"column":1,"offset":1692},"end":{"line":42,"column":43,"offset":1734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"wingo: ","position":{"start":{"line":44,"column":1,"offset":1736},"end":{"line":44,"column":8,"offset":1743}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/BurntSushi/wingo"},"children":[{"type":"text","value":"https://github.com/BurntSushi/wingo","position":{"start":{"line":44,"column":8,"offset":1743},"end":{"line":44,"column":43,"offset":1778}}}],"position":{"start":{"line":44,"column":8,"offset":1743},"end":{"line":44,"column":43,"offset":1778}}}],"position":{"start":{"line":44,"column":1,"offset":1736},"end":{"line":44,"column":43,"offset":1778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"History of grep: ","position":{"start":{"line":46,"column":1,"offset":1780},"end":{"line":46,"column":18,"offset":1797}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Grep"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Grep","position":{"start":{"line":46,"column":18,"offset":1797},"end":{"line":46,"column":52,"offset":1831}}}],"position":{"start":{"line":46,"column":18,"offset":1797},"end":{"line":46,"column":52,"offset":1831}}}],"position":{"start":{"line":46,"column":1,"offset":1780},"end":{"line":46,"column":52,"offset":1831}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GNU grep: ","position":{"start":{"line":48,"column":1,"offset":1833},"end":{"line":48,"column":11,"offset":1843}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gnu.org/software/grep/"},"children":[{"type":"text","value":"https://www.gnu.org/software/grep/","position":{"start":{"line":48,"column":11,"offset":1843},"end":{"line":48,"column":45,"offset":1877}}}],"position":{"start":{"line":48,"column":11,"offset":1843},"end":{"line":48,"column":45,"offset":1877}}}],"position":{"start":{"line":48,"column":1,"offset":1833},"end":{"line":48,"column":45,"offset":1877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ken Thompson, author of original grep: ","position":{"start":{"line":50,"column":1,"offset":1879},"end":{"line":50,"column":40,"offset":1918}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Ken_Thompson"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Ken_Thompson","position":{"start":{"line":50,"column":40,"offset":1918},"end":{"line":50,"column":82,"offset":1960}}}],"position":{"start":{"line":50,"column":40,"offset":1918},"end":{"line":50,"column":82,"offset":1960}}}],"position":{"start":{"line":50,"column":1,"offset":1879},"end":{"line":50,"column":82,"offset":1960}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Silver searcher (","position":{"start":{"line":52,"column":1,"offset":1962},"end":{"line":52,"column":18,"offset":1979}}},{"type":"raw","value":"<code class=\"language-text\">ag</code>","position":{"start":{"line":52,"column":18,"offset":1979},"end":{"line":52,"column":22,"offset":1983}}},{"type":"text","value":"): ","position":{"start":{"line":52,"column":22,"offset":1983},"end":{"line":52,"column":25,"offset":1986}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/ggreer/the_silver_searcher"},"children":[{"type":"text","value":"https://github.com/ggreer/the_silver_searcher","position":{"start":{"line":52,"column":25,"offset":1986},"end":{"line":52,"column":70,"offset":2031}}}],"position":{"start":{"line":52,"column":25,"offset":1986},"end":{"line":52,"column":70,"offset":2031}}}],"position":{"start":{"line":52,"column":1,"offset":1962},"end":{"line":52,"column":70,"offset":2031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ack: ","position":{"start":{"line":54,"column":1,"offset":2033},"end":{"line":54,"column":6,"offset":2038}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/beyondgrep/ack3"},"children":[{"type":"text","value":"https://github.com/beyondgrep/ack3","position":{"start":{"line":54,"column":6,"offset":2038},"end":{"line":54,"column":40,"offset":2072}}}],"position":{"start":{"line":54,"column":6,"offset":2038},"end":{"line":54,"column":40,"offset":2072}}}],"position":{"start":{"line":54,"column":1,"offset":2033},"end":{"line":54,"column":40,"offset":2072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ridiculous Fish post on Treacherous Optimization: ","position":{"start":{"line":56,"column":1,"offset":2074},"end":{"line":56,"column":51,"offset":2124}}},{"type":"element","tagName":"a","properties":{"href":"https://ridiculousfish.com/blog/posts/old-age-and-treachery.html"},"children":[{"type":"text","value":"https://ridiculousfish.com/blog/posts/old-age-and-treachery.html","position":{"start":{"line":56,"column":51,"offset":2124},"end":{"line":56,"column":115,"offset":2188}}}],"position":{"start":{"line":56,"column":51,"offset":2124},"end":{"line":56,"column":115,"offset":2188}}}],"position":{"start":{"line":56,"column":1,"offset":2074},"end":{"line":56,"column":115,"offset":2188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mike Haertel “why GNU grep is fast”: ","position":{"start":{"line":58,"column":1,"offset":2190},"end":{"line":58,"column":38,"offset":2227}}},{"type":"element","tagName":"a","properties":{"href":"https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html"},"children":[{"type":"text","value":"https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html","position":{"start":{"line":58,"column":38,"offset":2227},"end":{"line":58,"column":113,"offset":2302}}}],"position":{"start":{"line":58,"column":38,"offset":2227},"end":{"line":58,"column":113,"offset":2302}}}],"position":{"start":{"line":58,"column":1,"offset":2190},"end":{"line":58,"column":113,"offset":2302}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GNU Parallel: ","position":{"start":{"line":60,"column":1,"offset":2304},"end":{"line":60,"column":15,"offset":2318}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gnu.org/software/parallel"},"children":[{"type":"text","value":"https://www.gnu.org/software/parallel","position":{"start":{"line":60,"column":15,"offset":2318},"end":{"line":60,"column":52,"offset":2355}}}],"position":{"start":{"line":60,"column":15,"offset":2318},"end":{"line":60,"column":52,"offset":2355}}}],"position":{"start":{"line":60,"column":1,"offset":2304},"end":{"line":60,"column":52,"offset":2355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"xargs: ","position":{"start":{"line":62,"column":1,"offset":2357},"end":{"line":62,"column":8,"offset":2364}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Xargs"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Xargs","position":{"start":{"line":62,"column":8,"offset":2364},"end":{"line":62,"column":43,"offset":2399}}}],"position":{"start":{"line":62,"column":8,"offset":2364},"end":{"line":62,"column":43,"offset":2399}}}],"position":{"start":{"line":62,"column":1,"offset":2357},"end":{"line":62,"column":43,"offset":2399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Boyer-Moore algorithm: ","position":{"start":{"line":64,"column":1,"offset":2401},"end":{"line":64,"column":24,"offset":2424}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm","position":{"start":{"line":64,"column":24,"offset":2424},"end":{"line":64,"column":97,"offset":2497}}}],"position":{"start":{"line":64,"column":24,"offset":2424},"end":{"line":64,"column":97,"offset":2497}}}],"position":{"start":{"line":64,"column":1,"offset":2401},"end":{"line":64,"column":97,"offset":2497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"memchr: ","position":{"start":{"line":66,"column":1,"offset":2499},"end":{"line":66,"column":9,"offset":2507}}},{"type":"element","tagName":"a","properties":{"href":"https://man7.org/linux/man-pages/man3/memchr.3.html"},"children":[{"type":"text","value":"https://man7.org/linux/man-pages/man3/memchr.3.html","position":{"start":{"line":66,"column":9,"offset":2507},"end":{"line":66,"column":60,"offset":2558}}}],"position":{"start":{"line":66,"column":9,"offset":2507},"end":{"line":66,"column":60,"offset":2558}}}],"position":{"start":{"line":66,"column":1,"offset":2499},"end":{"line":66,"column":60,"offset":2558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rust memchr crate: ","position":{"start":{"line":68,"column":1,"offset":2560},"end":{"line":68,"column":20,"offset":2579}}},{"type":"element","tagName":"a","properties":{"href":"https://crates.io/crates/memchr"},"children":[{"type":"text","value":"https://crates.io/crates/memchr","position":{"start":{"line":68,"column":20,"offset":2579},"end":{"line":68,"column":51,"offset":2610}}}],"position":{"start":{"line":68,"column":20,"offset":2579},"end":{"line":68,"column":51,"offset":2610}}}],"position":{"start":{"line":68,"column":1,"offset":2560},"end":{"line":68,"column":51,"offset":2610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rust regex crate: ","position":{"start":{"line":70,"column":1,"offset":2612},"end":{"line":70,"column":19,"offset":2630}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/rust-lang/regex"},"children":[{"type":"text","value":"https://github.com/rust-lang/regex","position":{"start":{"line":70,"column":19,"offset":2630},"end":{"line":70,"column":53,"offset":2664}}}],"position":{"start":{"line":70,"column":19,"offset":2630},"end":{"line":70,"column":53,"offset":2664}}}],"position":{"start":{"line":70,"column":1,"offset":2612},"end":{"line":70,"column":53,"offset":2664}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Vector instructions: ","position":{"start":{"line":72,"column":1,"offset":2666},"end":{"line":72,"column":22,"offset":2687}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Vector_processor#Vector_instructions"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Vector_processor#Vector_instructions","position":{"start":{"line":72,"column":22,"offset":2687},"end":{"line":72,"column":88,"offset":2753}}}],"position":{"start":{"line":72,"column":22,"offset":2687},"end":{"line":72,"column":88,"offset":2753}}}],"position":{"start":{"line":72,"column":1,"offset":2666},"end":{"line":72,"column":88,"offset":2753}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ripgrep FAQ: ","position":{"start":{"line":74,"column":1,"offset":2755},"end":{"line":74,"column":14,"offset":2768}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/BurntSushi/ripgrep/blob/master/FAQ.md"},"children":[{"type":"text","value":"https://github.com/BurntSushi/ripgrep/blob/master/FAQ.md","position":{"start":{"line":74,"column":14,"offset":2768},"end":{"line":74,"column":70,"offset":2824}}}],"position":{"start":{"line":74,"column":14,"offset":2768},"end":{"line":74,"column":70,"offset":2824}}}],"position":{"start":{"line":74,"column":1,"offset":2755},"end":{"line":74,"column":70,"offset":2824}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Memory-mapped I/O: ","position":{"start":{"line":76,"column":1,"offset":2826},"end":{"line":76,"column":20,"offset":2845}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Memory-mapped_I/O"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Memory-mapped_I/O","position":{"start":{"line":76,"column":20,"offset":2845},"end":{"line":76,"column":67,"offset":2892}}}],"position":{"start":{"line":76,"column":20,"offset":2845},"end":{"line":76,"column":67,"offset":2892}}}],"position":{"start":{"line":76,"column":1,"offset":2826},"end":{"line":76,"column":67,"offset":2892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ripgrep in Visual Studio Code: ","position":{"start":{"line":78,"column":1,"offset":2894},"end":{"line":78,"column":32,"offset":2925}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/microsoft/vscode-ripgrep"},"children":[{"type":"text","value":"https://github.com/microsoft/vscode-ripgrep","position":{"start":{"line":78,"column":32,"offset":2925},"end":{"line":78,"column":75,"offset":2968}}}],"position":{"start":{"line":78,"column":32,"offset":2925},"end":{"line":78,"column":75,"offset":2968}}},{"type":"text","value":", ","position":{"start":{"line":78,"column":75,"offset":2968},"end":{"line":78,"column":77,"offset":2970}}},{"type":"element","tagName":"a","properties":{"href":"https://code.visualstudio.com/updates/v1_11#_text-search-improvements"},"children":[{"type":"text","value":"https://code.visualstudio.com/updates/v1_11#_text-search-improvements","position":{"start":{"line":78,"column":77,"offset":2970},"end":{"line":78,"column":146,"offset":3039}}}],"position":{"start":{"line":78,"column":77,"offset":2970},"end":{"line":78,"column":146,"offset":3039}}}],"position":{"start":{"line":78,"column":1,"offset":2894},"end":{"line":78,"column":146,"offset":3039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"PCRE2: ","position":{"start":{"line":80,"column":1,"offset":3041},"end":{"line":80,"column":8,"offset":3048}}},{"type":"element","tagName":"a","properties":{"href":"https://www.pcre.org/current/doc/html/index.html"},"children":[{"type":"text","value":"https://www.pcre.org/current/doc/html/index.html","position":{"start":{"line":80,"column":8,"offset":3048},"end":{"line":80,"column":56,"offset":3096}}}],"position":{"start":{"line":80,"column":8,"offset":3048},"end":{"line":80,"column":56,"offset":3096}}}],"position":{"start":{"line":80,"column":1,"offset":3041},"end":{"line":80,"column":56,"offset":3096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"re2c: ","position":{"start":{"line":82,"column":1,"offset":3098},"end":{"line":82,"column":7,"offset":3104}}},{"type":"element","tagName":"a","properties":{"href":"https://re2c.org"},"children":[{"type":"text","value":"https://re2c.org","position":{"start":{"line":82,"column":7,"offset":3104},"end":{"line":82,"column":23,"offset":3120}}}],"position":{"start":{"line":82,"column":7,"offset":3104},"end":{"line":82,"column":23,"offset":3120}}}],"position":{"start":{"line":82,"column":1,"offset":3098},"end":{"line":82,"column":23,"offset":3120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ragel (finite-state machine compiler and parser generator, the name slips Andrew’s mind during the episode): ","position":{"start":{"line":84,"column":1,"offset":3122},"end":{"line":84,"column":110,"offset":3231}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Ragel"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Ragel","position":{"start":{"line":84,"column":110,"offset":3231},"end":{"line":84,"column":145,"offset":3266}}}],"position":{"start":{"line":84,"column":110,"offset":3231},"end":{"line":84,"column":145,"offset":3266}}}],"position":{"start":{"line":84,"column":1,"offset":3122},"end":{"line":84,"column":145,"offset":3266}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Backtracking regex implementation: ","position":{"start":{"line":86,"column":1,"offset":3268},"end":{"line":86,"column":36,"offset":3303}}},{"type":"element","tagName":"a","properties":{"href":"https://users.cs.cf.ac.uk/Dave.Marshall/PERL/node80.html"},"children":[{"type":"text","value":"https://users.cs.cf.ac.uk/Dave.Marshall/PERL/node80.html","position":{"start":{"line":86,"column":36,"offset":3303},"end":{"line":86,"column":92,"offset":3359}}}],"position":{"start":{"line":86,"column":36,"offset":3303},"end":{"line":86,"column":92,"offset":3359}}},{"type":"text","value":", ","position":{"start":{"line":86,"column":92,"offset":3359},"end":{"line":86,"column":94,"offset":3361}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions"},"children":[{"type":"text","value":"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions","position":{"start":{"line":86,"column":94,"offset":3361},"end":{"line":86,"column":189,"offset":3456}}}],"position":{"start":{"line":86,"column":94,"offset":3361},"end":{"line":86,"column":189,"offset":3456}}}],"position":{"start":{"line":86,"column":1,"offset":3268},"end":{"line":86,"column":189,"offset":3456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finite automaton regex implementation: ","position":{"start":{"line":88,"column":1,"offset":3458},"end":{"line":88,"column":40,"offset":3497}}},{"type":"element","tagName":"a","properties":{"href":"https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/"},"children":[{"type":"text","value":"https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/","position":{"start":{"line":88,"column":40,"offset":3497},"end":{"line":88,"column":117,"offset":3574}}}],"position":{"start":{"line":88,"column":40,"offset":3497},"end":{"line":88,"column":117,"offset":3574}}}],"position":{"start":{"line":88,"column":1,"offset":3458},"end":{"line":88,"column":117,"offset":3574}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lazy DFA: ","position":{"start":{"line":90,"column":1,"offset":3576},"end":{"line":90,"column":11,"offset":3586}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/rust-lang/regex/pull/164"},"children":[{"type":"text","value":"https://github.com/rust-lang/regex/pull/164","position":{"start":{"line":90,"column":11,"offset":3586},"end":{"line":90,"column":54,"offset":3629}}}],"position":{"start":{"line":90,"column":11,"offset":3586},"end":{"line":90,"column":54,"offset":3629}}}],"position":{"start":{"line":90,"column":1,"offset":3576},"end":{"line":90,"column":54,"offset":3629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rust: ","position":{"start":{"line":92,"column":1,"offset":3631},"end":{"line":92,"column":7,"offset":3637}}},{"type":"element","tagName":"a","properties":{"href":"https://www.rust-lang.org/"},"children":[{"type":"text","value":"https://www.rust-lang.org/","position":{"start":{"line":92,"column":7,"offset":3637},"end":{"line":92,"column":33,"offset":3663}}}],"position":{"start":{"line":92,"column":7,"offset":3637},"end":{"line":92,"column":33,"offset":3663}}}],"position":{"start":{"line":92,"column":1,"offset":3631},"end":{"line":92,"column":33,"offset":3663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Norman Ramsey: ","position":{"start":{"line":94,"column":1,"offset":3665},"end":{"line":94,"column":16,"offset":3680}}},{"type":"element","tagName":"a","properties":{"href":"https://engineering.tufts.edu/people/faculty/norman-ramsey"},"children":[{"type":"text","value":"https://engineering.tufts.edu/people/faculty/norman-ramsey","position":{"start":{"line":94,"column":16,"offset":3680},"end":{"line":94,"column":74,"offset":3738}}}],"position":{"start":{"line":94,"column":16,"offset":3680},"end":{"line":94,"column":74,"offset":3738}}}],"position":{"start":{"line":94,"column":1,"offset":3665},"end":{"line":94,"column":74,"offset":3738}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"QuickCheck (Haskell): ","position":{"start":{"line":96,"column":1,"offset":3740},"end":{"line":96,"column":23,"offset":3762}}},{"type":"element","tagName":"a","properties":{"href":"https://hackage.haskell.org/package/QuickCheck"},"children":[{"type":"text","value":"https://hackage.haskell.org/package/QuickCheck","position":{"start":{"line":96,"column":23,"offset":3762},"end":{"line":96,"column":69,"offset":3808}}}],"position":{"start":{"line":96,"column":23,"offset":3762},"end":{"line":96,"column":69,"offset":3808}}}],"position":{"start":{"line":96,"column":1,"offset":3740},"end":{"line":96,"column":69,"offset":3808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Standard ML: ","position":{"start":{"line":98,"column":1,"offset":3810},"end":{"line":98,"column":14,"offset":3823}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Standard_ML"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Standard_ML","position":{"start":{"line":98,"column":14,"offset":3823},"end":{"line":98,"column":55,"offset":3864}}}],"position":{"start":{"line":98,"column":14,"offset":3823},"end":{"line":98,"column":55,"offset":3864}}}],"position":{"start":{"line":98,"column":1,"offset":3810},"end":{"line":98,"column":55,"offset":3864}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Viterbi algorithm: ","position":{"start":{"line":100,"column":1,"offset":3866},"end":{"line":100,"column":20,"offset":3885}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Viterbi_algorithm"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Viterbi_algorithm","position":{"start":{"line":100,"column":20,"offset":3885},"end":{"line":100,"column":67,"offset":3932}}}],"position":{"start":{"line":100,"column":20,"offset":3885},"end":{"line":100,"column":67,"offset":3932}}}],"position":{"start":{"line":100,"column":1,"offset":3866},"end":{"line":100,"column":67,"offset":3932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Andrew’s blogpost “My FOSS Story”: ","position":{"start":{"line":102,"column":1,"offset":3934},"end":{"line":102,"column":36,"offset":3969}}},{"type":"element","tagName":"a","properties":{"href":"https://blog.burntsushi.net/foss"},"children":[{"type":"text","value":"https://blog.burntsushi.net/foss","position":{"start":{"line":102,"column":36,"offset":3969},"end":{"line":102,"column":68,"offset":4001}}}],"position":{"start":{"line":102,"column":36,"offset":3969},"end":{"line":102,"column":68,"offset":4001}}}],"position":{"start":{"line":102,"column":1,"offset":3934},"end":{"line":102,"column":68,"offset":4001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Bill Belichick: ","position":{"start":{"line":104,"column":1,"offset":4003},"end":{"line":104,"column":17,"offset":4019}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Bill_Belichick"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Bill_Belichick","position":{"start":{"line":104,"column":17,"offset":4019},"end":{"line":104,"column":61,"offset":4063}}}],"position":{"start":{"line":104,"column":17,"offset":4019},"end":{"line":104,"column":61,"offset":4063}}}],"position":{"start":{"line":104,"column":1,"offset":4003},"end":{"line":104,"column":61,"offset":4063}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- END SHOWNOTES -->","position":{"start":{"line":106,"column":1,"offset":4065},"end":{"line":106,"column":23,"offset":4087}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- START TRANSCRIPT -->","position":{"start":{"line":108,"column":1,"offset":4089},"end":{"line":108,"column":26,"offset":4114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"If you notice any errors in this transcript, you can ","position":{"start":{"line":110,"column":2,"offset":4117},"end":{"line":110,"column":55,"offset":4170}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/sourcegraph/about/blob/main/podcast/13.md"},"children":[{"type":"text","value":"propose changes to the source","position":{"start":{"line":110,"column":56,"offset":4171},"end":{"line":110,"column":85,"offset":4200}}}],"position":{"start":{"line":110,"column":55,"offset":4170},"end":{"line":110,"column":148,"offset":4263}}},{"type":"text","value":".","position":{"start":{"line":110,"column":148,"offset":4263},"end":{"line":110,"column":149,"offset":4264}}}],"position":{"start":{"line":110,"column":1,"offset":4116},"end":{"line":110,"column":150,"offset":4265}}}],"position":{"start":{"line":110,"column":1,"offset":4116},"end":{"line":110,"column":150,"offset":4265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang Liu:","position":{"start":{"line":112,"column":3,"offset":4269},"end":{"line":112,"column":14,"offset":4280}}}],"position":{"start":{"line":112,"column":1,"offset":4267},"end":{"line":112,"column":16,"offset":4282}}},{"type":"text","value":"\nAll right, I’m here with Andrew Gallant, creator of the popular command line search tool ripgrep and prominent contributor in the Go and Rust open source communities. Hey, Andrew, how’s it going?","position":{"start":{"line":112,"column":16,"offset":4282},"end":{"line":113,"column":196,"offset":4478}}}],"position":{"start":{"line":112,"column":1,"offset":4267},"end":{"line":113,"column":196,"offset":4478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew Gallant:","position":{"start":{"line":115,"column":3,"offset":4482},"end":{"line":115,"column":18,"offset":4497}}}],"position":{"start":{"line":115,"column":1,"offset":4480},"end":{"line":115,"column":20,"offset":4499}}},{"type":"text","value":"\nDoing great. How about you?","position":{"start":{"line":115,"column":20,"offset":4499},"end":{"line":116,"column":28,"offset":4527}}}],"position":{"start":{"line":115,"column":1,"offset":4480},"end":{"line":116,"column":28,"offset":4527}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":118,"column":3,"offset":4531},"end":{"line":118,"column":10,"offset":4538}}}],"position":{"start":{"line":118,"column":1,"offset":4529},"end":{"line":118,"column":12,"offset":4540}}},{"type":"text","value":"\nNot too bad. Not too bad. Thanks for coming on the show today.","position":{"start":{"line":118,"column":12,"offset":4540},"end":{"line":119,"column":63,"offset":4603}}}],"position":{"start":{"line":118,"column":1,"offset":4529},"end":{"line":119,"column":63,"offset":4603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":121,"column":3,"offset":4607},"end":{"line":121,"column":10,"offset":4614}}}],"position":{"start":{"line":121,"column":1,"offset":4605},"end":{"line":121,"column":12,"offset":4616}}},{"type":"text","value":"\nNo problem. Happy to be here.","position":{"start":{"line":121,"column":12,"offset":4616},"end":{"line":122,"column":30,"offset":4646}}}],"position":{"start":{"line":121,"column":1,"offset":4605},"end":{"line":122,"column":30,"offset":4646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":124,"column":3,"offset":4650},"end":{"line":124,"column":10,"offset":4657}}}],"position":{"start":{"line":124,"column":1,"offset":4648},"end":{"line":124,"column":12,"offset":4659}}},{"type":"text","value":"\nSo there’s a lot of cool content I’m excited to delve into. But before we get into ripgrep and all your open source contributions I always like to start off the conversation by asking people, what was your inception point into the world of programming? How did you get started? And what was your journey from there?","position":{"start":{"line":124,"column":12,"offset":4659},"end":{"line":125,"column":316,"offset":4975}}}],"position":{"start":{"line":124,"column":1,"offset":4648},"end":{"line":125,"column":316,"offset":4975}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":127,"column":3,"offset":4979},"end":{"line":127,"column":10,"offset":4986}}}],"position":{"start":{"line":127,"column":1,"offset":4977},"end":{"line":127,"column":12,"offset":4988}}},{"type":"text","value":"\nYeah, I’ll try to give you the short story. But basically, back in, I don’t know, let’s say middle school, early high school I was obsessed with the Nintendo GameCube release coming out. I even went to one of the cube clubs in Boston, when they had those back then. Where you got to try out the GameCube before it was released. And anyway, I was really obsessed with that. So I started creating websites and like they were terrible geo cities, kind of websites with lens flares everywhere. So that kind of got me into the HTML, CSS part of it. And it kind of bridged me into the whole bulletin board system stuff that was going on back then. If people were around back then like PHP, BB, vBulletin, Envision, YaBB, I think, yet another bulletin board, something like that.","position":{"start":{"line":127,"column":12,"offset":4988},"end":{"line":128,"column":773,"offset":5761}}}],"position":{"start":{"line":127,"column":1,"offset":4977},"end":{"line":128,"column":773,"offset":5761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":130,"column":3,"offset":5765},"end":{"line":130,"column":10,"offset":5772}}}],"position":{"start":{"line":130,"column":1,"offset":5763},"end":{"line":130,"column":12,"offset":5774}}},{"type":"text","value":"\nYeah.","position":{"start":{"line":130,"column":12,"offset":5774},"end":{"line":131,"column":6,"offset":5780}}}],"position":{"start":{"line":130,"column":1,"offset":5763},"end":{"line":131,"column":6,"offset":5780}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":133,"column":3,"offset":5784},"end":{"line":133,"column":10,"offset":5791}}}],"position":{"start":{"line":133,"column":1,"offset":5782},"end":{"line":133,"column":12,"offset":5793}}},{"type":"text","value":"\nAnd a whole bunch of other things. Kind of got me into that. And figuring out how to set up my own bulletin board system, you kind of had to start learning a little bit of code and how to host websites and that sort of thing. I eventually just got started hacking vBulletin was where I pushed me to learn PHP, which is my first programming language. So I started adding like little tiny mods and changes to it and that sort of thing. And then I just eventually said, “Hey, this vBulletin doesn’t work the way I want it to.” So I built my own bulletin board system. And that kind of pattern repeated itself over and over again throughout my open source career where I would see something and just kind of say “I could do this better.” Or maybe not better, but a different way and the way that I wanted to. So that was probably back in 2003, something like that. And that’s kind of what started my love affair with code.","position":{"start":{"line":133,"column":12,"offset":5793},"end":{"line":134,"column":919,"offset":6712}}}],"position":{"start":{"line":133,"column":1,"offset":5782},"end":{"line":134,"column":919,"offset":6712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":136,"column":3,"offset":6716},"end":{"line":136,"column":10,"offset":6723}}}],"position":{"start":{"line":136,"column":1,"offset":6714},"end":{"line":136,"column":12,"offset":6725}}},{"type":"text","value":"\nThat’s awesome. And from there, what was kind of the path into delving into the world of like regular expressions and command line search tools? I assume it wasn’t a direct path must have been circuitous.","position":{"start":{"line":136,"column":12,"offset":6725},"end":{"line":137,"column":205,"offset":6930}}}],"position":{"start":{"line":136,"column":1,"offset":6714},"end":{"line":137,"column":205,"offset":6930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":139,"column":3,"offset":6934},"end":{"line":139,"column":10,"offset":6941}}}],"position":{"start":{"line":139,"column":1,"offset":6932},"end":{"line":139,"column":12,"offset":6943}}},{"type":"text","value":"\nNo. Yeah, I don’t know if there’s any… I think the overall path, a very brief version of it is I did the bulletin board stuff for a few years. Then I got into X11 stuff because again, the same thing kind of repeats itself, where I had some window managers out there i3, awesome, Openbox, xmonad, I try kind of all those and they just didn’t quite work the way I wanted to at the time. This was probably back around 2010 or so. And I wrote my own like little tiling manager that would sit on top of an existing window manager called ","position":{"start":{"line":139,"column":12,"offset":6943},"end":{"line":140,"column":535,"offset":7478}}},{"type":"text","value":"[Pi Tile 00:04:32]","position":{"start":{"line":140,"column":536,"offset":7479},"end":{"line":140,"column":552,"offset":7495}}},{"type":"text","value":" tile. And that kind of like got my feet wet with X.","position":{"start":{"line":140,"column":553,"offset":7496},"end":{"line":140,"column":605,"offset":7548}}}],"position":{"start":{"line":139,"column":1,"offset":6932},"end":{"line":140,"column":605,"offset":7548}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":142,"column":3,"offset":7552},"end":{"line":142,"column":10,"offset":7559}}}],"position":{"start":{"line":142,"column":1,"offset":7550},"end":{"line":142,"column":12,"offset":7561}}},{"type":"text","value":"\nI created a fork of Openbox that supported multiple monitors. That didn’t quite work the way I wanted it to. So then I just started… That’s also the same time I discovered Go a little bit before the 1.0 release. I’m like, “Hey, I could build a window manager in this language. It’d be much nicer than using C.” I had tried Python and that failed. And yeah, so I kind of did that. And then eventually, I found Rust, several years later. And I don’t really know what caused me to get into regexes other than the fact that I was just kind of looking at what libraries were needed. And people were like, “Hey, we need a regex engine written in Rust.” And it should be like re2.","position":{"start":{"line":142,"column":12,"offset":7561},"end":{"line":143,"column":676,"offset":8237}}}],"position":{"start":{"line":142,"column":1,"offset":7550},"end":{"line":143,"column":676,"offset":8237}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":145,"column":3,"offset":8241},"end":{"line":145,"column":10,"offset":8248}}}],"position":{"start":{"line":145,"column":1,"offset":8239},"end":{"line":145,"column":12,"offset":8250}}},{"type":"text","value":"\nAnd I’m like, “Hey, okay.” So I started reading the Russ Cox articles on regex engines. And honestly, that’s kind of what started my love affair with like lower level text primitives and searching and whatnot, was basically at that point in time. Before that, before Rust, and before, I have read Russ Cox’s articles, I don’t think I had any particular love affair with regexes, although I did do a freshman project where I implemented a very basic regex engine in Assembly, which was fun. That was several years before that, but I think it was mostly just a matter of serendipitous I was getting into Rust at that point, looking for things to do. And the regex engine idea just really kind of lept out at me as something that seemed really interesting.","position":{"start":{"line":145,"column":12,"offset":8250},"end":{"line":146,"column":754,"offset":9004}}}],"position":{"start":{"line":145,"column":1,"offset":8239},"end":{"line":146,"column":754,"offset":9004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":148,"column":3,"offset":9008},"end":{"line":148,"column":10,"offset":9015}}}],"position":{"start":{"line":148,"column":1,"offset":9006},"end":{"line":148,"column":12,"offset":9017}}},{"type":"text","value":"\nSo, yeah, nice. I guess one thing just leads into another.","position":{"start":{"line":148,"column":12,"offset":9017},"end":{"line":149,"column":59,"offset":9076}}}],"position":{"start":{"line":148,"column":1,"offset":9006},"end":{"line":149,"column":59,"offset":9076}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":151,"column":3,"offset":9080},"end":{"line":151,"column":10,"offset":9087}}}],"position":{"start":{"line":151,"column":1,"offset":9078},"end":{"line":151,"column":12,"offset":9089}}},{"type":"text","value":"\nYeah. And I guess just to finish off the rest of your question there, I realized that didn’t quite get to this command line search tool aspect of it. But ripgrep came a few years after the regex engine, and its original reason for being was just to benchmark the regex engine itself. In particular, I think the reason why I initially did it was because I wanted to see whether the regex engine and its overhead could be competitive with grep. So if you want to go implement a grep. I didn’t necessarily want to, but if you wanted to would the regex engine be fast enough for that task. And so I kind of built up some of the internals, and I’m like, “Hey, this is pretty much as fast as grep in most cases.”","position":{"start":{"line":151,"column":12,"offset":9089},"end":{"line":152,"column":707,"offset":9796}}}],"position":{"start":{"line":151,"column":1,"offset":9078},"end":{"line":152,"column":707,"offset":9796}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":154,"column":3,"offset":9800},"end":{"line":154,"column":10,"offset":9807}}}],"position":{"start":{"line":154,"column":1,"offset":9798},"end":{"line":154,"column":12,"offset":9809}}},{"type":"text","value":"\nSo I just kind of took that and the silver searcher idea and ran with it. So ripgrep is nothing revolutionary. It’s the same pattern of “Hey, I can do a little bit better.” Or my version of it, that kind of thing.","position":{"start":{"line":154,"column":12,"offset":9809},"end":{"line":155,"column":214,"offset":10023}}}],"position":{"start":{"line":154,"column":1,"offset":9798},"end":{"line":155,"column":214,"offset":10023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":157,"column":3,"offset":10027},"end":{"line":157,"column":10,"offset":10034}}}],"position":{"start":{"line":157,"column":1,"offset":10025},"end":{"line":157,"column":12,"offset":10036}}},{"type":"text","value":"\nInteresting, interesting. I want to dive into ripgrep. But real quick, since you brought up the topic of window management, and also specifically i3, so we had the creator of i3, Michael Stapelberg on the show a couple episodes back. And I just want to hear really quick what were kind of your complaints with existing window managers, and what were the features that you just had to have that made you implement your own?","position":{"start":{"line":157,"column":12,"offset":10036},"end":{"line":158,"column":423,"offset":10459}}}],"position":{"start":{"line":157,"column":1,"offset":10025},"end":{"line":158,"column":423,"offset":10459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":160,"column":3,"offset":10463},"end":{"line":160,"column":10,"offset":10470}}}],"position":{"start":{"line":160,"column":1,"offset":10461},"end":{"line":160,"column":12,"offset":10472}}},{"type":"text","value":"\nYeah, we could probably do a whole podcast on that alone. But basically, what it came down to was I wanted to run three monitors, simultaneously, and in a way that worked well. And pretty much all, I don’t want to say all, because maybe there’s one I missed. But as far as I could tell at the time, all window managers basically implemented what’s called the EWMH spec and the ICCCM spec. And basically those are conventions for how window managers and other windows other clients. Window Manager is itself a client, but it’s kind of a special client. And the Xserver, how they communicate with each other.","position":{"start":{"line":160,"column":12,"offset":10472},"end":{"line":161,"column":607,"offset":11079}}}],"position":{"start":{"line":160,"column":1,"offset":10461},"end":{"line":161,"column":607,"offset":11079}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":163,"column":3,"offset":11083},"end":{"line":163,"column":10,"offset":11090}}}],"position":{"start":{"line":163,"column":1,"offset":11081},"end":{"line":163,"column":12,"offset":11092}}},{"type":"text","value":"\nAnd it’s like all these things about… It’s how you’re able to have a pager on a desktop that is implemented completely separate from the actual desktop Window Manager itself. Because there’s all these different conventions that allow you communicate, okay, what’s the current workspace, and what’s the active window and all that sort of stuff. So those specs kind of, I won’t go into a lot of detail. But basically, they hardcode the assumption that every single root window, there’s exactly one workspace active for that root window at any point in time. And if you put aside the old school X screen model of multiple monitors, where you can move your mouse between but not your windows, the modern day version of that is Xinerama, which was replaced with the resize and rotate or the RandR extension.","position":{"start":{"line":163,"column":12,"offset":11092},"end":{"line":164,"column":805,"offset":11897}}}],"position":{"start":{"line":163,"column":1,"offset":11081},"end":{"line":164,"column":805,"offset":11897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":166,"column":3,"offset":11901},"end":{"line":166,"column":10,"offset":11908}}}],"position":{"start":{"line":166,"column":1,"offset":11899},"end":{"line":166,"column":12,"offset":11910}}},{"type":"text","value":"\nAnd those basically implement multiple monitors by stretching the root window across all the monitors. So that assumption of one workspace per route window holds in all of these window managers, because this EWMH spec basically requires it. So if you have that, you all of a sudden, if you switch your workspace, it switches the workspace across all the monitors. Not a big deal if you have one monitor, maybe you can kind of get by with two. But when you have three, it’s just like, “Oh my god, I want to have one workspace on this monitor, one workspace on this monitor,” and so on. And I want to be able to switch them independently. And I want to be able to move one workspace to another monitor, and I just don’t want to have any restrictions.","position":{"start":{"line":166,"column":12,"offset":11910},"end":{"line":167,"column":749,"offset":12659}}}],"position":{"start":{"line":166,"column":1,"offset":11899},"end":{"line":167,"column":749,"offset":12659}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":169,"column":3,"offset":12663},"end":{"line":169,"column":10,"offset":12670}}}],"position":{"start":{"line":169,"column":1,"offset":12661},"end":{"line":169,"column":12,"offset":12672}}},{"type":"text","value":"\nSo my fork of Openbox added that functionality. And then eventually it just kind of became difficult to do some of the other things that I wanted. And that kind of bled into “Hey, it would be a lot of fun, or so I thought to build my window manager.” And that was kind of the driving reason. Shortly thereafter, I believe Apple added that feature to MacOS, not that they stole it from me because nobody knows about wingo which is the name of the window manager. And I don’t know if i3 ended up adding it. I know xmonad had it way before me. So yeah, that was kind of what led to that Window Manager being built.","position":{"start":{"line":169,"column":12,"offset":12672},"end":{"line":170,"column":612,"offset":13284}}}],"position":{"start":{"line":169,"column":1,"offset":12661},"end":{"line":170,"column":612,"offset":13284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":172,"column":3,"offset":13288},"end":{"line":172,"column":10,"offset":13295}}}],"position":{"start":{"line":172,"column":1,"offset":13286},"end":{"line":172,"column":12,"offset":13297}}},{"type":"text","value":"\nInteresting. Around what year was this?","position":{"start":{"line":172,"column":12,"offset":13297},"end":{"line":173,"column":40,"offset":13337}}}],"position":{"start":{"line":172,"column":1,"offset":13286},"end":{"line":173,"column":40,"offset":13337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":175,"column":3,"offset":13341},"end":{"line":175,"column":10,"offset":13348}}}],"position":{"start":{"line":175,"column":1,"offset":13339},"end":{"line":175,"column":12,"offset":13350}}},{"type":"text","value":"\nI think wingo, the first like, release that I could actually use was somewhere around 2012. Maybe 2011. Somewhere around there.","position":{"start":{"line":175,"column":12,"offset":13350},"end":{"line":176,"column":128,"offset":13478}}}],"position":{"start":{"line":175,"column":1,"offset":13339},"end":{"line":176,"column":128,"offset":13478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":178,"column":3,"offset":13482},"end":{"line":178,"column":10,"offset":13489}}}],"position":{"start":{"line":178,"column":1,"offset":13480},"end":{"line":178,"column":12,"offset":13491}}},{"type":"text","value":"\nGot it. Yeah, I wonder what the percentage of programmers out there is who are just kind of obsessed with like getting their window manager to behave the way they want it to? Because I’ve definitely gone down like rabbit holes, myself.","position":{"start":{"line":178,"column":12,"offset":13491},"end":{"line":179,"column":236,"offset":13727}}}],"position":{"start":{"line":178,"column":1,"offset":13480},"end":{"line":179,"column":236,"offset":13727}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":181,"column":3,"offset":13731},"end":{"line":181,"column":10,"offset":13738}}}],"position":{"start":{"line":181,"column":1,"offset":13729},"end":{"line":181,"column":12,"offset":13740}}},{"type":"text","value":"\nYeah. I think there are a lot of them. And I think, by and large, most people probably get by with existing window managers. But I am certainly not the first and I won’t be the last to have written the window manager because something didn’t quite work the way I wanted it to or I wanted to scratch an itch. But yeah, I’ve been using that window manager since it was usable in 2012, or whenever it was. I think probably my only other user is my wife, and she runs it on her laptop. And so far, so good.","position":{"start":{"line":181,"column":12,"offset":13740},"end":{"line":182,"column":503,"offset":14243}}}],"position":{"start":{"line":181,"column":1,"offset":13729},"end":{"line":182,"column":503,"offset":14243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":184,"column":3,"offset":14247},"end":{"line":184,"column":10,"offset":14254}}}],"position":{"start":{"line":184,"column":1,"offset":14245},"end":{"line":184,"column":12,"offset":14256}}},{"type":"text","value":"\nThat’s great. Cool. So ripgrep, we got a little bit into kind of the beginnings just now. But before we dive further, can you explain what it is? And why does it matter to someone who may not be as familiar with it?","position":{"start":{"line":184,"column":12,"offset":14256},"end":{"line":185,"column":216,"offset":14472}}}],"position":{"start":{"line":184,"column":1,"offset":14245},"end":{"line":185,"column":216,"offset":14472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":187,"column":3,"offset":14476},"end":{"line":187,"column":10,"offset":14483}}}],"position":{"start":{"line":187,"column":1,"offset":14474},"end":{"line":187,"column":12,"offset":14485}}},{"type":"text","value":"\nYeah. So ripgrep is, at its simplest description, is a tool that will search a directory tree of files, mostly plain text files, for a regex, or literal word, and will report the results to you. The simplest model is, if you can think about it’s just to explain the algorithm, which is for every file that you want to search, you iterate over the lines of that file, if the pattern you provide matches that line, then you print the line. Right, simple. And that kind of like simple algorithm is built on top of with all these extra features. And ripgrep is not the first to do that. GNU grep has tons of features if you go and look at it.","position":{"start":{"line":187,"column":12,"offset":14485},"end":{"line":188,"column":639,"offset":15124}}}],"position":{"start":{"line":187,"column":1,"offset":14474},"end":{"line":188,"column":639,"offset":15124}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":190,"column":3,"offset":15128},"end":{"line":190,"column":10,"offset":15135}}}],"position":{"start":{"line":190,"column":1,"offset":15126},"end":{"line":190,"column":12,"offset":15137}}},{"type":"text","value":"\nThe main difference between ripgrep and GNU grep is probably that its defaults are optimized for code search. And what that means is that it will do recursive search by default. So if you don’t specify a file path, all you do is type RG pattern, it will just search the current directory. Whereas with grep you have to pass a -R flag. And the other big thing here is that it will respect your gitignore files, your .ignore files, your .rgignore files, it will skip binary files and it will skip hidden files. So all three of those things are what’s called smart filtering, for some definition of smart.","position":{"start":{"line":190,"column":12,"offset":15137},"end":{"line":191,"column":603,"offset":15740}}}],"position":{"start":{"line":190,"column":1,"offset":15126},"end":{"line":191,"column":603,"offset":15740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":193,"column":3,"offset":15744},"end":{"line":193,"column":10,"offset":15751}}}],"position":{"start":{"line":193,"column":1,"offset":15742},"end":{"line":193,"column":12,"offset":15753}}},{"type":"text","value":"\nAnd basically what that does is it does a search, and it searches the files, you probably want to search in most cases. And it doesn’t search the files that you probably don’t want the search in most cases. And I think that’s kind of why it matters. The defaults are from a user experience level, are why it matters. And I would say secondarily to that is performance. And in a large number of cases, ripgrep and GNU grep will perform similarly. But if you look at it from the user experience perspective, ripgrep will often perform much faster than GNU grep because of the fact that it will do parallelism by default. And that’s probably the primary reason. If you just run ripgrep, over a repository, it’s going to skip some files. So if it skips some several gigabyte files, that will be why it’s faster for one.","position":{"start":{"line":193,"column":12,"offset":15753},"end":{"line":194,"column":816,"offset":16569}}}],"position":{"start":{"line":193,"column":1,"offset":15742},"end":{"line":194,"column":816,"offset":16569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":196,"column":3,"offset":16573},"end":{"line":196,"column":10,"offset":16580}}}],"position":{"start":{"line":196,"column":1,"offset":16571},"end":{"line":196,"column":12,"offset":16582}}},{"type":"text","value":"\nAnd obviously, second thing of being that it uses parallelism by default. And I think that matters. So the default mode of operation for ripgrep is that it has better results from what you want, it has less noise. And it tends to be faster. Not because of any innate algorithm difference, although once we get into more details, there are some algorithmic differences. But basically, just using parallelism is the main thing there.","position":{"start":{"line":196,"column":12,"offset":16582},"end":{"line":197,"column":432,"offset":17014}}}],"position":{"start":{"line":196,"column":1,"offset":16571},"end":{"line":197,"column":432,"offset":17014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":199,"column":3,"offset":17018},"end":{"line":199,"column":10,"offset":17025}}}],"position":{"start":{"line":199,"column":1,"offset":17016},"end":{"line":199,"column":12,"offset":17027}}},{"type":"text","value":"\nYeah, as a ripgrep user, myself, it’s my main command line search tool. I have to say that everything you just said is 100% true, it feels and is so much faster. I remember back when I used grep a lot, every kind of instance of wanting to use grep was kind of an exercise in trying to remember which command line flags were the right ones to pass. What directories did I need to exclude? And because of that I probably didn’t grep as much as I wanted to, just because there was always this like, “Ah I got to deal with that again?”","position":{"start":{"line":199,"column":12,"offset":17027},"end":{"line":200,"column":532,"offset":17559}}}],"position":{"start":{"line":199,"column":1,"offset":17016},"end":{"line":200,"column":532,"offset":17559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":202,"column":3,"offset":17563},"end":{"line":202,"column":10,"offset":17570}}}],"position":{"start":{"line":202,"column":1,"offset":17561},"end":{"line":202,"column":12,"offset":17572}}},{"type":"text","value":"\nYep, absolutely. That was my experience as well. I had, I don’t know how many different wrapper scripts around grep that would only search Go files and that sort of thing. Or whatever, basically it would approximate some of the defaults of ripgrep and Silver Searcher and of course ack before that.","position":{"start":{"line":202,"column":12,"offset":17572},"end":{"line":203,"column":299,"offset":17871}}}],"position":{"start":{"line":202,"column":1,"offset":17561},"end":{"line":203,"column":299,"offset":17871}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":205,"column":3,"offset":17875},"end":{"line":205,"column":10,"offset":17882}}}],"position":{"start":{"line":205,"column":1,"offset":17873},"end":{"line":205,"column":12,"offset":17884}}},{"type":"text","value":"\nYeah. So you mentioned those other grep alternatives. Silver Searcher, ack. So these predate ripgrep?","position":{"start":{"line":205,"column":12,"offset":17884},"end":{"line":206,"column":102,"offset":17986}}}],"position":{"start":{"line":205,"column":1,"offset":17873},"end":{"line":206,"column":102,"offset":17986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":208,"column":3,"offset":17990},"end":{"line":208,"column":10,"offset":17997}}}],"position":{"start":{"line":208,"column":1,"offset":17988},"end":{"line":208,"column":12,"offset":17999}}},{"type":"text","value":"\nYes.","position":{"start":{"line":208,"column":12,"offset":17999},"end":{"line":209,"column":5,"offset":18004}}}],"position":{"start":{"line":208,"column":1,"offset":17988},"end":{"line":209,"column":5,"offset":18004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":211,"column":3,"offset":18008},"end":{"line":211,"column":10,"offset":18015}}}],"position":{"start":{"line":211,"column":1,"offset":18006},"end":{"line":211,"column":12,"offset":18017}}},{"type":"text","value":"\nDid you use any of those before creating ripgrep?","position":{"start":{"line":211,"column":12,"offset":18017},"end":{"line":212,"column":50,"offset":18067}}}],"position":{"start":{"line":211,"column":1,"offset":18006},"end":{"line":212,"column":50,"offset":18067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":214,"column":3,"offset":18071},"end":{"line":214,"column":10,"offset":18078}}}],"position":{"start":{"line":214,"column":1,"offset":18069},"end":{"line":214,"column":12,"offset":18080}}},{"type":"text","value":"\nI did not actually.","position":{"start":{"line":214,"column":12,"offset":18080},"end":{"line":215,"column":20,"offset":18100}}}],"position":{"start":{"line":214,"column":1,"offset":18069},"end":{"line":215,"column":20,"offset":18100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":217,"column":3,"offset":18104},"end":{"line":217,"column":10,"offset":18111}}}],"position":{"start":{"line":217,"column":1,"offset":18102},"end":{"line":217,"column":12,"offset":18113}}},{"type":"text","value":"\nInteresting.","position":{"start":{"line":217,"column":12,"offset":18113},"end":{"line":218,"column":13,"offset":18126}}}],"position":{"start":{"line":217,"column":1,"offset":18102},"end":{"line":218,"column":13,"offset":18126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":220,"column":3,"offset":18130},"end":{"line":220,"column":10,"offset":18137}}}],"position":{"start":{"line":220,"column":1,"offset":18128},"end":{"line":220,"column":12,"offset":18139}}},{"type":"text","value":"\nI had known about Silver Searcher and was vaguely aware of ack at the time. And for whatever reason, I was just kind of like… It has kind of repeated a lot of things that you hear people who don’t use ripgrep today, which was “Grep’s good enough.” And for the most part, that was true for a lot of things. And I think it was just, I never really gave the Silver Searcher a try. I think I had used it before. Certainly, when I was building ripgrep, I started using and trying Silver Searcher more to understand what the competition was like, and what the existing tools were like. But before that point, I don’t think I had ever used it in anger. I just use my grep wrapper scripts, just because it just worked well enough. And that’s kind of like the story of tools. It works well enough. You don’t really have a reason to use something new.","position":{"start":{"line":220,"column":12,"offset":18139},"end":{"line":221,"column":844,"offset":18983}}}],"position":{"start":{"line":220,"column":1,"offset":18128},"end":{"line":221,"column":844,"offset":18983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":223,"column":3,"offset":18987},"end":{"line":223,"column":10,"offset":18994}}}],"position":{"start":{"line":223,"column":1,"offset":18985},"end":{"line":223,"column":12,"offset":18996}}},{"type":"text","value":"\nYeah, it’s like is the expected gain I get from using this additional tool worth the added complexity, really learning that new tool. And then, God forbid I switch machines someday and have to reinstall all these new tools.","position":{"start":{"line":223,"column":12,"offset":18996},"end":{"line":224,"column":224,"offset":19220}}}],"position":{"start":{"line":223,"column":1,"offset":18985},"end":{"line":224,"column":224,"offset":19220}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":226,"column":3,"offset":19224},"end":{"line":226,"column":10,"offset":19231}}}],"position":{"start":{"line":226,"column":1,"offset":19222},"end":{"line":226,"column":12,"offset":19233}}},{"type":"text","value":"\nYep. It’s another abstraction. It’s another layer. I don’t know if I’d say abstraction, but it’s definitely another layer of stuff. And it’s not in core utils. It’s not ubiquitous. A lot of people know about it, it’s in a lot of repositories, but it’s not going to be on every machine, like grep is.","position":{"start":{"line":226,"column":12,"offset":19233},"end":{"line":227,"column":300,"offset":19533}}}],"position":{"start":{"line":226,"column":1,"offset":19222},"end":{"line":227,"column":300,"offset":19533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":229,"column":3,"offset":19537},"end":{"line":229,"column":10,"offset":19544}}}],"position":{"start":{"line":229,"column":1,"offset":19535},"end":{"line":229,"column":12,"offset":19546}}},{"type":"text","value":"\nYeah, makes sense. So you mentioned when you created ripgrep, you didn’t really go into it wanting to make a grep competitor, an alternative to grep. You started with the regular expression engine, and then you wrote this thing as a way to kind of benchmark that engine and it turned out to be performant, competitive with all the other solutions?","position":{"start":{"line":229,"column":12,"offset":19546},"end":{"line":230,"column":348,"offset":19894}}}],"position":{"start":{"line":229,"column":1,"offset":19535},"end":{"line":230,"column":348,"offset":19894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":232,"column":3,"offset":19898},"end":{"line":232,"column":10,"offset":19905}}}],"position":{"start":{"line":232,"column":1,"offset":19896},"end":{"line":232,"column":12,"offset":19907}}},{"type":"text","value":"\nYeah.","position":{"start":{"line":232,"column":12,"offset":19907},"end":{"line":233,"column":6,"offset":19913}}}],"position":{"start":{"line":232,"column":1,"offset":19896},"end":{"line":233,"column":6,"offset":19913}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":235,"column":3,"offset":19917},"end":{"line":235,"column":10,"offset":19924}}}],"position":{"start":{"line":235,"column":1,"offset":19915},"end":{"line":235,"column":12,"offset":19926}}},{"type":"text","value":"\nI guess at what point did you say like, “Okay, I’m going to actually invest in making this into a really neat command line tool that I myself am going to use day to day.”","position":{"start":{"line":235,"column":12,"offset":19926},"end":{"line":236,"column":171,"offset":20097}}}],"position":{"start":{"line":235,"column":1,"offset":19915},"end":{"line":236,"column":171,"offset":20097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":238,"column":3,"offset":20101},"end":{"line":238,"column":10,"offset":20108}}}],"position":{"start":{"line":238,"column":1,"offset":20099},"end":{"line":238,"column":12,"offset":20110}}},{"type":"text","value":"\nThat’s a good question. I don’t know if there was a specific cut over point where I said that to myself. I mean, I guess there had to have been. But I think really, it was just a matter of, “Hey, this is competitive in a lot of cases.” Not just in some of the cases that I had expected that it might be or maybe didn’t even believe that it would be. Because at the time I kind of had the same impression about GNU grep’s speed as everyone else. And I say that with, there’s two well known articles that are gone around the internet for a long time. One of them was the Ridiculous Fish post about the treacherous optimization, and how he was looking at how to optimize the Boyer-Moore algorithm and that sort of thing.","position":{"start":{"line":238,"column":12,"offset":20110},"end":{"line":239,"column":718,"offset":20828}}}],"position":{"start":{"line":238,"column":1,"offset":20099},"end":{"line":239,"column":718,"offset":20828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":241,"column":3,"offset":20832},"end":{"line":241,"column":10,"offset":20839}}}],"position":{"start":{"line":241,"column":1,"offset":20830},"end":{"line":241,"column":12,"offset":20841}}},{"type":"text","value":"\nAnd then there was the famous posts from I believe, I don’t how to pronounce his name, Mike Haertel, I believe the original author of GNU grep. And he posted to the BSD list around 2010, about why GNU grep was fast. And he listed all these different reasons, and it was like, “Oh, my God how can you ever beat GNU grep?” So I think once I actually had a tool, like a very basic tool that was useful for benchmarking and was somehow competitive with GNU grep, I was like, “Hey, I could turn this into a real tool.”","position":{"start":{"line":241,"column":12,"offset":20841},"end":{"line":242,"column":514,"offset":21355}}}],"position":{"start":{"line":241,"column":1,"offset":20830},"end":{"line":242,"column":514,"offset":21355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":244,"column":3,"offset":21359},"end":{"line":244,"column":10,"offset":21366}}}],"position":{"start":{"line":244,"column":1,"offset":21357},"end":{"line":244,"column":12,"offset":21368}}},{"type":"text","value":"\nI think the thing I was benchmarking at the time was whether if you have a match on every single line, I was benchmarking that procedure. And that procedure, a lot of the optimizations don’t matter too much, because you’re having a match on every single line. So there’s a ton of overhead. You might as well iterate over every line and try to run the regex and that sort of thing. And even a naive approach will perform similarly there. So the main thing I was testing there was just the overhead of the regex engine, is that competitive with GNU grep?","position":{"start":{"line":244,"column":12,"offset":21368},"end":{"line":245,"column":553,"offset":21921}}}],"position":{"start":{"line":244,"column":1,"offset":21357},"end":{"line":245,"column":553,"offset":21921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":247,"column":3,"offset":21925},"end":{"line":247,"column":10,"offset":21932}}}],"position":{"start":{"line":247,"column":1,"offset":21923},"end":{"line":247,"column":12,"offset":21934}}},{"type":"text","value":"\nAnd that turned out to be okay. I think that caused me to do some optimizations in the regex engine. But then when I tried other cases where the matches are less frequent, and that’s where the performance tricks really start to show the main difference between a naive grep and one that’s been optimized crazily. And I think once I tested that case, and when that became competitive that’s when I said, “Wait a second, I could go build a tool that does better than Silver Searcher.”","position":{"start":{"line":247,"column":12,"offset":21934},"end":{"line":248,"column":483,"offset":22417}}}],"position":{"start":{"line":247,"column":1,"offset":21923},"end":{"line":248,"column":483,"offset":22417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":250,"column":3,"offset":22421},"end":{"line":250,"column":10,"offset":22428}}}],"position":{"start":{"line":250,"column":1,"offset":22419},"end":{"line":250,"column":12,"offset":22430}}},{"type":"text","value":"\nGot it? What portion of the kind of end user perceived performance gains come from just being smarter about what to search over versus the performance of the underlying regex engine and algorithm itself? In your estimation?","position":{"start":{"line":250,"column":12,"offset":22430},"end":{"line":251,"column":224,"offset":22654}}}],"position":{"start":{"line":250,"column":1,"offset":22419},"end":{"line":251,"column":224,"offset":22654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":253,"column":3,"offset":22658},"end":{"line":253,"column":10,"offset":22665}}}],"position":{"start":{"line":253,"column":1,"offset":22656},"end":{"line":253,"column":12,"offset":22667}}},{"type":"text","value":"\nYeah, that’s a great question. I think the first thing to tackle there is the smart filtering. Because oftentimes, that can actually make the search go slower. Even though it skips files and causes the tool to search fewer things, the actual process of resolving all the globs and the gitignore files can cause the search itself, overall search time to be slower, because it takes time to build those gitignore files into glob matchers. And it takes time to match those.","position":{"start":{"line":253,"column":12,"offset":22667},"end":{"line":254,"column":471,"offset":23138}}}],"position":{"start":{"line":253,"column":1,"offset":22656},"end":{"line":254,"column":471,"offset":23138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":256,"column":3,"offset":23142},"end":{"line":256,"column":10,"offset":23149}}}],"position":{"start":{"line":256,"column":1,"offset":23140},"end":{"line":256,"column":12,"offset":23151}}},{"type":"text","value":"\nSo if you have a deep directory, and every directory in that level has a different gitignore file, in order to implement it correctly, you have to match a file path against every single gitignore file up to the root of the repository. And then there’s like global gitignores and all sorts of other things. And then there’s the ripgrepignore files, and do those take time to process. But if you have some huge binary files, maybe they’re build artifacts, executables, images, whatever. I hesitate to say GNU grep will search all those because it has some optimizations for not doing as much work in a binary file. But for the most part, ripgrep will be a bit smarter about skipping those. It will also skip your .git folder which can get quite large in big repositories, whereas GNU grep will not.","position":{"start":{"line":256,"column":12,"offset":23151},"end":{"line":257,"column":797,"offset":23948}}}],"position":{"start":{"line":256,"column":1,"offset":23140},"end":{"line":257,"column":797,"offset":23948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":259,"column":3,"offset":23952},"end":{"line":259,"column":10,"offset":23959}}}],"position":{"start":{"line":259,"column":1,"offset":23950},"end":{"line":259,"column":12,"offset":23961}}},{"type":"text","value":"\nYou’ll often see like can GNU grep wrapper scripts will have like a –exclude.git. And that on its own could speed up the search quite a bit. So you kind of have that level of thing. Obviously, if there are huge files that are being skipped that’s one aspect of the performance improvement. I think the next thing that comes from that, particularly when you’re doing recursive search is mainly just parallelism, because GNU grep does no parallelism.","position":{"start":{"line":259,"column":12,"offset":23961},"end":{"line":260,"column":450,"offset":24411}}}],"position":{"start":{"line":259,"column":1,"offset":23950},"end":{"line":260,"column":450,"offset":24411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":262,"column":3,"offset":24415},"end":{"line":262,"column":10,"offset":24422}}}],"position":{"start":{"line":262,"column":1,"offset":24413},"end":{"line":262,"column":12,"offset":24424}}},{"type":"text","value":"\nThe only way to do parallelism within GNU grep is to use some other tool such as GNU parallel or xargs. And those implications are not too bad, but they’re extra stuff that you have to do. I know that there have been efforts to parallelize GNU grep, or I believe there have been, and it’s been difficult because GNU grep was probably written in a day where parallelism wasn’t really a big… Wasn’t really a predominant paradigm. And so they’re just global mutable variables everywhere. Or at least last time I looked there was. So that’s kind of the second thing that will make ripgrep faster in a large number of cases. And I think the third thing is probably the regex engine itself, and some of the literal optimizations. I’ll describe one of them, because I think it’s the most interesting one. And I’ll do my best to make it brief.","position":{"start":{"line":262,"column":12,"offset":24424},"end":{"line":263,"column":838,"offset":25262}}}],"position":{"start":{"line":262,"column":1,"offset":24413},"end":{"line":263,"column":838,"offset":25262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":265,"column":3,"offset":25266},"end":{"line":265,"column":10,"offset":25273}}}],"position":{"start":{"line":265,"column":1,"offset":25264},"end":{"line":265,"column":12,"offset":25275}}},{"type":"text","value":"\nBut basically, when good GNU grep implemented Boyer-Moore, if you’ve done substring search algorithms, implemented substring search algorithms Boyer-Moore the main thing about that algorithm that you’re supposed to remember is that it will skip characters. Sometimes it will look at a character, and it will consult a mismatch table. And if that character doesn’t appear in your search string somewhere, the algorithm will know to skip over X number of characters and move on to the next piece. And especially Mike Haertel’s post to the BSD mailing lists kind of popularized this thing. “Hey, we don’t actually look at every byte.”","position":{"start":{"line":265,"column":12,"offset":25275},"end":{"line":266,"column":632,"offset":25907}}}],"position":{"start":{"line":265,"column":1,"offset":25264},"end":{"line":266,"column":632,"offset":25907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":268,"column":3,"offset":25911},"end":{"line":268,"column":10,"offset":25918}}}],"position":{"start":{"line":268,"column":1,"offset":25909},"end":{"line":268,"column":12,"offset":25920}}},{"type":"text","value":"\nBut it turns out that on modern hardware this may not have been true back when… Probably wasn’t true back when Mike Haertel had written that mailing list post. But nowadays on modern hardware, that’s actually not the thing that makes Boyer-Moore fast. What makes Boyer-Moore fast is the skip loop. And the skip loop takes the last byte of the pattern and it feeds that to a routine called memchr. And memchr is provided by libc. And on most platforms, that operation which is take a single byte and look in some haystack of bytes is super optimized. So it will have implementations using like assembly implementations like glibc, does GNU libc. As assembly implications for SSE2 and for AVX. The arm platform will have assembly implementations for it. musl has its own optimized version in C, so it doesn’t use assembly, but it uses C. And so on and so forth.","position":{"start":{"line":268,"column":12,"offset":25920},"end":{"line":269,"column":862,"offset":26782}}}],"position":{"start":{"line":268,"column":1,"offset":25909},"end":{"line":269,"column":862,"offset":26782}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":271,"column":3,"offset":26786},"end":{"line":271,"column":10,"offset":26793}}}],"position":{"start":{"line":271,"column":1,"offset":26784},"end":{"line":271,"column":12,"offset":26795}}},{"type":"text","value":"\nSo if you have a really rare byte that you feed to that memchr routine, it’s going to stay in that memchr routine for the vast majority of the file that you’re searching. Now, if you happen to have a very frequent buddy, that just so happens to be the last byte in your needle, then that memchr routine is going to run, stop, run, stop, run, stop. And you’re just going to be constantly ping pong in and out of the metro routine, which has… It’s just going to be slow, because you want to spend as much time as you can, inside that SIMD vectorized loop.","position":{"start":{"line":271,"column":12,"offset":26795},"end":{"line":272,"column":556,"offset":27351}}}],"position":{"start":{"line":271,"column":1,"offset":26784},"end":{"line":272,"column":556,"offset":27351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":274,"column":3,"offset":27355},"end":{"line":274,"column":10,"offset":27362}}}],"position":{"start":{"line":274,"column":1,"offset":27353},"end":{"line":274,"column":12,"offset":27364}}},{"type":"text","value":"\nAnd so basically, I don’t know of anyone who has done this optimization before, but I had the insight that you just have a background frequency distribution, a heuristic, you just estimate it. It’s not something that changes. You take some common text, some source code, and you say, “Hey, this byte is really rare. And this byte is not so rare.” And instead of always picking the last byte, instead, you look through all the bytes in the needle, and you look at the one that is probably the rarest. And you feed that the memchr instead. And that’s your skip loop.","position":{"start":{"line":274,"column":12,"offset":27364},"end":{"line":275,"column":565,"offset":27929}}}],"position":{"start":{"line":274,"column":1,"offset":27353},"end":{"line":275,"column":565,"offset":27929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":277,"column":3,"offset":27933},"end":{"line":277,"column":10,"offset":27940}}}],"position":{"start":{"line":277,"column":1,"offset":27931},"end":{"line":277,"column":12,"offset":27942}}},{"type":"text","value":"\nAnd that’s where the vast majority of the performance improvement, I think, comes in the common cases. Let’s just say in the common cases, from ripgrep. When you’re searching just a single file, when compared to GNU grep. GNU grep could implement that optimization. I don’t know if anyone’s tried, but they could. So I think those are the three things for common cases, is skipping really huge files, sometimes, parallelism, and heuristic tweaks to existing substring algorithms based off of background frequency distribution.","position":{"start":{"line":277,"column":12,"offset":27942},"end":{"line":278,"column":527,"offset":28469}}}],"position":{"start":{"line":277,"column":1,"offset":27931},"end":{"line":278,"column":527,"offset":28469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":280,"column":3,"offset":28473},"end":{"line":280,"column":10,"offset":28480}}}],"position":{"start":{"line":280,"column":1,"offset":28471},"end":{"line":280,"column":12,"offset":28482}}},{"type":"text","value":"\nGot it. That optimization that you described, took advantage of, I think, very domain specific knowledge about the memchr routine. Were you familiar with that going into this? Or was this something you uncovered in kind of like looking through the critical regions of the code as you’re doing performance optimization of ripgrep?","position":{"start":{"line":280,"column":12,"offset":28482},"end":{"line":281,"column":330,"offset":28812}}}],"position":{"start":{"line":280,"column":1,"offset":28471},"end":{"line":281,"column":330,"offset":28812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":283,"column":3,"offset":28816},"end":{"line":283,"column":10,"offset":28823}}}],"position":{"start":{"line":283,"column":1,"offset":28814},"end":{"line":283,"column":12,"offset":28825}}},{"type":"text","value":"\nThat’s a good question. I don’t know actually, when I realized. I feel like knowledge of memchr’s just kind of always been there in my brain. But I know Russ Cox’s articles mentioned memchr, there’s a brief call out to it. But otherwise, I mean, I’ve implemented memchr. So if you use the memchr crate in Rust, in the Rust ecosystem, then you’ll use my crate. And there’s a Rust implementation of it using AVX. So when you use ripgrep on Intel machines, you’re using my recommendation of memchr, not glibc’s. So the fact that I’d also implemented it kind of also gave me knowledge of it.","position":{"start":{"line":283,"column":12,"offset":28825},"end":{"line":284,"column":588,"offset":29413}}}],"position":{"start":{"line":283,"column":1,"offset":28814},"end":{"line":284,"column":588,"offset":29413}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":286,"column":3,"offset":29417},"end":{"line":286,"column":10,"offset":29424}}}],"position":{"start":{"line":286,"column":1,"offset":29415},"end":{"line":286,"column":12,"offset":29426}}},{"type":"text","value":"\nGot it.","position":{"start":{"line":286,"column":12,"offset":29426},"end":{"line":287,"column":8,"offset":29434}}}],"position":{"start":{"line":286,"column":1,"offset":29415},"end":{"line":287,"column":8,"offset":29434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":289,"column":3,"offset":29438},"end":{"line":289,"column":10,"offset":29445}}}],"position":{"start":{"line":289,"column":1,"offset":29436},"end":{"line":289,"column":12,"offset":29447}}},{"type":"text","value":"\nBut yeah, I think it’s kind of just one of those performance tricks that kind of has its own general rule, which is, you have a fast path, and then you have the slow path. And a lot of times the performance optimization, assuming the fast path already exists, is really just about causing more inputs to use the fast path in more cases. And that’s kind of the case here.","position":{"start":{"line":289,"column":12,"offset":29447},"end":{"line":290,"column":371,"offset":29818}}}],"position":{"start":{"line":289,"column":1,"offset":29436},"end":{"line":290,"column":371,"offset":29818}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":292,"column":3,"offset":29822},"end":{"line":292,"column":10,"offset":29829}}}],"position":{"start":{"line":292,"column":1,"offset":29820},"end":{"line":292,"column":12,"offset":29831}}},{"type":"text","value":"\nGot it. So you’ve kind of drawn a contrast between ripgrep and grep. And explained the kind of performance differential between those two. But what about the more recent grep alternatives? From my experience ripgrep is faster than those, but all those were written more recently than grep. I think grep was made back in what 1970, something or other. So presumably they had access to similar knowledge and awareness of modern systems as you did, what do you think contributed to ripgrep’s ability to outperform those more recent alternatives?","position":{"start":{"line":292,"column":12,"offset":29831},"end":{"line":293,"column":543,"offset":30374}}}],"position":{"start":{"line":292,"column":1,"offset":29820},"end":{"line":293,"column":543,"offset":30374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":295,"column":3,"offset":30378},"end":{"line":295,"column":10,"offset":30385}}}],"position":{"start":{"line":295,"column":1,"offset":30376},"end":{"line":295,"column":12,"offset":30387}}},{"type":"text","value":"\nOh, boy, is a complex question. So, just I want to make a first clarification, grep was invented, I believe, back in the early 70s. And it was invented by Ken Thompson. And as far as I know, I don’t know if there’s any direct descendant of that specific program that he wrote that’s still in use.","position":{"start":{"line":295,"column":12,"offset":30387},"end":{"line":296,"column":297,"offset":30684}}}],"position":{"start":{"line":295,"column":1,"offset":30376},"end":{"line":296,"column":297,"offset":30684}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":298,"column":3,"offset":30688},"end":{"line":298,"column":10,"offset":30695}}}],"position":{"start":{"line":298,"column":1,"offset":30686},"end":{"line":298,"column":12,"offset":30697}}},{"type":"text","value":"\nIt’s different?","position":{"start":{"line":298,"column":12,"offset":30697},"end":{"line":299,"column":16,"offset":30713}}}],"position":{"start":{"line":298,"column":1,"offset":30686},"end":{"line":299,"column":16,"offset":30713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":301,"column":3,"offset":30717},"end":{"line":301,"column":10,"offset":30724}}}],"position":{"start":{"line":301,"column":1,"offset":30715},"end":{"line":301,"column":12,"offset":30726}}},{"type":"text","value":"\nYeah, maybe a Plan 9 system maybe, or one of the BSDs might use a direct descendant of Ken Thompson original grep. But I actually don’t know. But GNU grep, I believe, was written in the early 90s or late 80s. And that was by Mike Haertel. And I don’t know if that was before vector instructions. I’m pretty sure vector instructions existed by then, but I don’t think they existed on Intel platforms, as far as I know.","position":{"start":{"line":301,"column":12,"offset":30726},"end":{"line":302,"column":418,"offset":31144}}}],"position":{"start":{"line":301,"column":1,"offset":30715},"end":{"line":302,"column":418,"offset":31144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":304,"column":3,"offset":31148},"end":{"line":304,"column":10,"offset":31155}}}],"position":{"start":{"line":304,"column":1,"offset":31146},"end":{"line":304,"column":12,"offset":31157}}},{"type":"text","value":"\nBut, yeah, so just getting to the meat of your question, which is grep alternatives. And why aren’t they as fast? Well, so I’ll just talk about two, ack and Silver Searcher. I think they’re the most popular people know about. There are several others that I know about. But I’ll just talk about those two. So ack is written in Perl, and it uses Perl’s regex engine. As far as I know, ack has no C code in it other than Perl’s implementation of the regex engine, which I’m sure is in C. I know is in C, I’ve read it before. So there’s like that aspect of it.","position":{"start":{"line":304,"column":12,"offset":31157},"end":{"line":305,"column":558,"offset":31715}}}],"position":{"start":{"line":304,"column":1,"offset":31146},"end":{"line":305,"column":558,"offset":31715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":307,"column":3,"offset":31719},"end":{"line":307,"column":10,"offset":31726}}}],"position":{"start":{"line":307,"column":1,"offset":31717},"end":{"line":307,"column":12,"offset":31728}}},{"type":"text","value":"\nAnd as far as I know, ack’s author has not prioritized performance. His main thing is the UX, the user experience of it, the skipping of the files, and the features that are in ack. So as far as it being slower, I don’t think I’ve ever done any in depth performance research there. But waving my hands, I’d say, “Well, it’s written in a higher level language. And even if the regex engine is in C, you still have all this other glue code that’s in the higher level language, and it has to communicate back and forth between C.” And I would say that’s probably where the performance difference comes from. As far as like Perl’s regex engine, I’ve never done any kind of performance comparison between it directly and my own. Just because it’s hard to do, because, as far as I know, there are no C bindings to Perl’s regex engine. So there’s that.","position":{"start":{"line":307,"column":12,"offset":31728},"end":{"line":308,"column":846,"offset":32574}}}],"position":{"start":{"line":307,"column":1,"offset":31717},"end":{"line":308,"column":846,"offset":32574}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":310,"column":3,"offset":32578},"end":{"line":310,"column":10,"offset":32585}}}],"position":{"start":{"line":310,"column":1,"offset":32576},"end":{"line":310,"column":12,"offset":32587}}},{"type":"text","value":"\nSo Silver Searcher is… I have a big FAQ entry on it in my ripgrep repo. So for people that are more interested in the details, they can go to that. But I would say that the first thing is that memory maps on Linux, if you’re using them on a bunch of tiny files in a repository, is actually worse than not using memory maps. Silver Searcher’s ReadMe claims memory maps is the reason why it’s fast. And as far as I can tell, memory maps only make a difference when you’re searching huge files. And there’s a small performance improvement. So that’s the first thing.","position":{"start":{"line":310,"column":12,"offset":32587},"end":{"line":311,"column":566,"offset":33153}}}],"position":{"start":{"line":310,"column":1,"offset":32576},"end":{"line":311,"column":566,"offset":33153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":313,"column":3,"offset":33157},"end":{"line":313,"column":10,"offset":33164}}}],"position":{"start":{"line":313,"column":1,"offset":33155},"end":{"line":313,"column":12,"offset":33166}}},{"type":"text","value":"\nThe second thing is that it’s parallelism is only at the search level, whereas ripgrep’s parallelism is both at the search level, and the directory traversal level. And that’s important for a really critical reason. Sure, there’s the performance gains that you get from doing directory traversal using parallelism on its own. They’re small, but they’re there. But the big one is the gitignore processing. Because the gitignore processing is built into the directory traversal. Because if you are ignoring a directory you don’t want to descend down to that directory. So if you parallelize directory traversal, then you parallelize gitignore matching. And Silver Searcher does not do that. But ripgrep does, so that’s another reason. I don’t know how much of a reason it is, but it’s one.","position":{"start":{"line":313,"column":12,"offset":33166},"end":{"line":314,"column":788,"offset":33954}}}],"position":{"start":{"line":313,"column":1,"offset":33155},"end":{"line":314,"column":788,"offset":33954}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":316,"column":3,"offset":33958},"end":{"line":316,"column":10,"offset":33965}}}],"position":{"start":{"line":316,"column":1,"offset":33956},"end":{"line":316,"column":12,"offset":33967}}},{"type":"text","value":"\nAnd I’d say the next biggest reason, honestly, is some combination of the regex engine and literal optimizations. So Silver Searcher does like the most basic literal optimization that there is, which is, if the whole entire pattern is just a literal, then I think it defaults to its own Boyer-Moore implementation. Ripgrep’s literal optimizations are much more sophisticated, on the level of GNU grep’s. And basically, what it does is if you have a literal in the beginning of a regex, a literal at the end of a regex, or even some combination of literals in the middle of a regex ripgrep will detect those, and it will use a substring search implementation on those. And it will search for those and if it finds a line that matches, then it will run the regex engine on that line. And that’s kind of the same reason why GNU grep is fast, because it does the same kind of optimization. So I’d say that combination of things is what makes it faster than the grep alternatives.","position":{"start":{"line":316,"column":12,"offset":33967},"end":{"line":317,"column":976,"offset":34943}}}],"position":{"start":{"line":316,"column":1,"offset":33956},"end":{"line":317,"column":976,"offset":34943}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":319,"column":3,"offset":34947},"end":{"line":319,"column":10,"offset":34954}}}],"position":{"start":{"line":319,"column":1,"offset":34945},"end":{"line":319,"column":12,"offset":34956}}},{"type":"text","value":"\nGot it. You have such a good command of what the bottlenecks and like critical regions are in both your own code and the code of tools that do similar things. Do you have, like a process or standard toolkit that you apply to identify and build up this understanding?","position":{"start":{"line":319,"column":12,"offset":34956},"end":{"line":320,"column":267,"offset":35223}}}],"position":{"start":{"line":319,"column":1,"offset":34945},"end":{"line":320,"column":267,"offset":35223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":322,"column":3,"offset":35227},"end":{"line":322,"column":10,"offset":35234}}}],"position":{"start":{"line":322,"column":1,"offset":35225},"end":{"line":322,"column":12,"offset":35236}}},{"type":"text","value":"\nI think the short answer is just science. It’s the scientific method. You form a guess about something based on your experience. And you go and test it, and you try to prove yourself wrong. And if you’re right, then you should be able to find evidence that supports your guess. And eventually you do that enough you develop experience, you develop kind of like an internal model of what things are doing and how they behave and where the bottlenecks are. And that kind of is what gave me my knowledge, I guess, I would say. Reading other people’s experiences, their blog posts, the information that they’ve shared, their code, comments in the code that says, “Hey, this is a performance bottleneck.”","position":{"start":{"line":322,"column":12,"offset":35236},"end":{"line":323,"column":700,"offset":35936}}}],"position":{"start":{"line":322,"column":1,"offset":35225},"end":{"line":323,"column":700,"offset":35936}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":325,"column":3,"offset":35940},"end":{"line":325,"column":10,"offset":35947}}}],"position":{"start":{"line":325,"column":1,"offset":35938},"end":{"line":325,"column":12,"offset":35949}}},{"type":"text","value":"\nMaybe it’s not correct. But it’s something you put in your brain as, “Okay, I can test that later. Or if there’s something that I run into with my code, maybe that’s something I can look.” Because when something is slow, and you don’t know why, which happens, still happens to me, and you don’t know why. You have to use your tools, your profiling tools, Perf, Valgrind, looking at the generated assembly using your own experience to guess at where things might be slow or fast, even println profiling. Printing out timestamps at certain points, all those sorts of tools are available to you. And doing those things over and over again.","position":{"start":{"line":325,"column":12,"offset":35949},"end":{"line":326,"column":637,"offset":36586}}}],"position":{"start":{"line":325,"column":1,"offset":35938},"end":{"line":326,"column":637,"offset":36586}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":328,"column":3,"offset":36590},"end":{"line":328,"column":10,"offset":36597}}}],"position":{"start":{"line":328,"column":1,"offset":36588},"end":{"line":328,"column":12,"offset":36599}}},{"type":"text","value":"\nAnd when you don’t know where the performance bottleneck is, you kind of have to just narrow it down with those tools. And when you do narrow it down, you’ve added a data point to your experience. “Hey, I had this problem. And the bottleneck ended up being here.” And if you do that enough, you get some experience, you get some intuition. But when it comes to performance you always want to check your assumptions. Because even when you have tons of experience doing it, you can still be wrong. And yeah, I think that’s probably a good enough answer for if you have other questions.","position":{"start":{"line":328,"column":12,"offset":36599},"end":{"line":329,"column":584,"offset":37183}}}],"position":{"start":{"line":328,"column":1,"offset":36588},"end":{"line":329,"column":584,"offset":37183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":331,"column":3,"offset":37187},"end":{"line":331,"column":10,"offset":37194}}}],"position":{"start":{"line":331,"column":1,"offset":37185},"end":{"line":331,"column":12,"offset":37196}}},{"type":"text","value":"\nYeah, no, I think my reaction to that is like with regards to science, the actual scientific method part is kind of the easy part. It’s the hypothesis-","position":{"start":{"line":331,"column":12,"offset":37196},"end":{"line":332,"column":152,"offset":37348}}}],"position":{"start":{"line":331,"column":1,"offset":37185},"end":{"line":332,"column":152,"offset":37348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":334,"column":3,"offset":37352},"end":{"line":334,"column":10,"offset":37359}}}],"position":{"start":{"line":334,"column":1,"offset":37350},"end":{"line":334,"column":12,"offset":37361}}},{"type":"text","value":"\nYeah that’s true.","position":{"start":{"line":334,"column":12,"offset":37361},"end":{"line":335,"column":18,"offset":37379}}}],"position":{"start":{"line":334,"column":1,"offset":37350},"end":{"line":335,"column":18,"offset":37379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":337,"column":3,"offset":37383},"end":{"line":337,"column":10,"offset":37390}}}],"position":{"start":{"line":337,"column":1,"offset":37381},"end":{"line":337,"column":12,"offset":37392}}},{"type":"text","value":"\n… proposal and formation part that is really the secret sauce.","position":{"start":{"line":337,"column":12,"offset":37392},"end":{"line":338,"column":65,"offset":37457}}}],"position":{"start":{"line":337,"column":1,"offset":37381},"end":{"line":338,"column":65,"offset":37457}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":340,"column":3,"offset":37461},"end":{"line":340,"column":10,"offset":37468}}}],"position":{"start":{"line":340,"column":1,"offset":37459},"end":{"line":340,"column":12,"offset":37470}}},{"type":"text","value":"\nYeah, that is a really good point. You’re absolutely right. And it took a long time to bootstrap that. So how do you even… Like it’s a whole bunch of unknown unknowns. Like things you don’t know, that you don’t even know. So how do you deal with that sort of situation? And asking for help, or taking learning the tools. If you’re not sure where to start learning the tools as best as you can, and just trying to narrow down where the problem is. Where’s the code spending most of the time? And if you’re having trouble reading some assembly, because oftentimes, that’s what it comes down to, you’re using your profiling tool, and you’re looking at the generated code. And I’m not sure how to read this, hop on a discussion forum or a chat channel somewhere, and I’m sure there’s someone who’d be happy to help you decipher some assembly. I mean, there are people who love doing that. So, yeah.","position":{"start":{"line":340,"column":12,"offset":37470},"end":{"line":341,"column":897,"offset":38367}}}],"position":{"start":{"line":340,"column":1,"offset":37459},"end":{"line":341,"column":897,"offset":38367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":343,"column":3,"offset":38371},"end":{"line":343,"column":10,"offset":38378}}}],"position":{"start":{"line":343,"column":1,"offset":38369},"end":{"line":343,"column":12,"offset":38380}}},{"type":"text","value":"\nCool. Ripgrep is now just insanely popular. I think everyone on the engineering team at Sourcegraph that I know uses it. And kind of from the… How old is the project now? Is it a couple years?","position":{"start":{"line":343,"column":12,"offset":38380},"end":{"line":344,"column":195,"offset":38575}}}],"position":{"start":{"line":343,"column":1,"offset":38369},"end":{"line":344,"column":195,"offset":38575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":346,"column":3,"offset":38579},"end":{"line":346,"column":10,"offset":38586}}}],"position":{"start":{"line":346,"column":1,"offset":38577},"end":{"line":346,"column":12,"offset":38588}}},{"type":"text","value":"\nFour years, actually in September.","position":{"start":{"line":346,"column":12,"offset":38588},"end":{"line":347,"column":35,"offset":38623}}}],"position":{"start":{"line":346,"column":1,"offset":38577},"end":{"line":347,"column":35,"offset":38623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":349,"column":3,"offset":38627},"end":{"line":349,"column":10,"offset":38634}}}],"position":{"start":{"line":349,"column":1,"offset":38625},"end":{"line":349,"column":12,"offset":38636}}},{"type":"text","value":"\nOkay. Was there a point at which it really started to take off? Or was it kind of the steady growth as it went along? Do you recall or…","position":{"start":{"line":349,"column":12,"offset":38636},"end":{"line":350,"column":138,"offset":38774}}}],"position":{"start":{"line":349,"column":1,"offset":38625},"end":{"line":350,"column":138,"offset":38774}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":352,"column":3,"offset":38778},"end":{"line":352,"column":10,"offset":38785}}}],"position":{"start":{"line":352,"column":1,"offset":38776},"end":{"line":352,"column":12,"offset":38787}}},{"type":"text","value":"\nI think the only… Other thing like GitHub stars, which people have opinions about whether they’re meaningful in any-","position":{"start":{"line":352,"column":12,"offset":38787},"end":{"line":353,"column":119,"offset":38906}}}],"position":{"start":{"line":352,"column":1,"offset":38776},"end":{"line":353,"column":119,"offset":38906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":355,"column":3,"offset":38910},"end":{"line":355,"column":10,"offset":38917}}}],"position":{"start":{"line":355,"column":1,"offset":38908},"end":{"line":355,"column":12,"offset":38919}}},{"type":"text","value":"\nIt’s a proxy. Yeah.","position":{"start":{"line":355,"column":12,"offset":38919},"end":{"line":356,"column":20,"offset":38939}}}],"position":{"start":{"line":355,"column":1,"offset":38908},"end":{"line":356,"column":20,"offset":38939}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":358,"column":3,"offset":38943},"end":{"line":358,"column":10,"offset":38950}}}],"position":{"start":{"line":358,"column":1,"offset":38941},"end":{"line":358,"column":12,"offset":38952}}},{"type":"text","value":"\nIt’s a proxy of something. Yeah. So there’s that. And as far as I can tell, that was just steady growth over time. The only other thing that I’ve really monitored… There’s two other things I monitored. One of them was, I will occasionally look at the homebrew statistics. So they have kind of like that… I forget what… I know there was a controversy about it a while back about opt out, opt in. But they collect analytics on how many times the package is installed. So ripgrep is on that list. I think it passed Silver Searcher a while back, if I remember correctly, so that was one milestone.","position":{"start":{"line":358,"column":12,"offset":38952},"end":{"line":359,"column":600,"offset":39552}}}],"position":{"start":{"line":358,"column":1,"offset":38941},"end":{"line":359,"column":600,"offset":39552}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":361,"column":3,"offset":39556},"end":{"line":361,"column":10,"offset":39563}}}],"position":{"start":{"line":361,"column":1,"offset":39554},"end":{"line":361,"column":12,"offset":39565}}},{"type":"text","value":"\nOther than that, the other the only other thing that I really am aware of is ripgrep’s adoption into Visual Studio code. That happened… Actually, I can’t quite remember exactly when that happened. But I want to say it’s at least 2018 or earlier. But yeah, I distinctly remember that definitely created an uptick in awareness about ripgrep. Because it was in its release notes, and lots of people use VS code, that sort of thing. I know, people see it in their processes tab on Windows, I’ve seen that screenshot. “What is this RG.exe process using up all my CPU?” So I’ve kind of seen that.","position":{"start":{"line":361,"column":12,"offset":39565},"end":{"line":362,"column":593,"offset":40158}}}],"position":{"start":{"line":361,"column":1,"offset":39554},"end":{"line":362,"column":593,"offset":40158}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":364,"column":3,"offset":40162},"end":{"line":364,"column":10,"offset":40169}}}],"position":{"start":{"line":364,"column":1,"offset":40160},"end":{"line":364,"column":12,"offset":40171}}},{"type":"text","value":"\nYeah, otherwise, I would personally say steady. There was kind of like a big bang when it was initially released. And other than that, as far as I can tell, steady. But I don’t have any kind of like monitoring tools where I can actually tell how popular it is.","position":{"start":{"line":364,"column":12,"offset":40171},"end":{"line":365,"column":261,"offset":40432}}}],"position":{"start":{"line":364,"column":1,"offset":40160},"end":{"line":365,"column":261,"offset":40432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":367,"column":3,"offset":40436},"end":{"line":367,"column":10,"offset":40443}}}],"position":{"start":{"line":367,"column":1,"offset":40434},"end":{"line":367,"column":12,"offset":40445}}},{"type":"text","value":"\nGot it. Now that you have so many people using it to what extent do you allow external feedback to drive your future plans and roadmap versus, how much do you still lean on your own intuition and your own kind of personal needs?","position":{"start":{"line":367,"column":12,"offset":40445},"end":{"line":368,"column":229,"offset":40674}}}],"position":{"start":{"line":367,"column":1,"offset":40434},"end":{"line":368,"column":229,"offset":40674}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":370,"column":3,"offset":40678},"end":{"line":370,"column":10,"offset":40685}}}],"position":{"start":{"line":370,"column":1,"offset":40676},"end":{"line":370,"column":12,"offset":40687}}},{"type":"text","value":"\nYeah, I’ve actually… I can think of off the top of my head two big things that I’ve reversed course on in the past which was multi-line search, and support for look around and back references. Which inevitably was added via adding a new regex engine, because I didn’t want to add that to the Rust regex extension. So I added support for PCRE2. Both of those things, were things that I initially set out as “No, I don’t want to do them.” Because they make the implementation too complex. And if the implementation is too complex it becomes harder to maintain. And I’m trying to build a… I want the project to be sustainable, where I’m happy to maintain it, because it’s not too much work.","position":{"start":{"line":370,"column":12,"offset":40687},"end":{"line":371,"column":692,"offset":41379}}}],"position":{"start":{"line":370,"column":1,"offset":40676},"end":{"line":371,"column":692,"offset":41379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":373,"column":3,"offset":41383},"end":{"line":373,"column":10,"offset":41390}}}],"position":{"start":{"line":373,"column":1,"offset":41381},"end":{"line":373,"column":12,"offset":41392}}},{"type":"text","value":"\nSo that kind of decision process is primarily what drives my inclination for adding new features at this point. Is if it’s going to turn it into a project, I don’t want to maintain like, for instance, wingo. That window manager is basically, it’s in maintenance mode. And I keep the lights on. I don’t do any new feature development. And I don’t really want ripgrep to get to that place, I want to continue to evolve and to continue to improve on performance. History says that is not never going to be the case, there’s always going to be some new young tool that comes out and does something better or smarter. It exploits some new hardware feature better, it exploits some new interaction, maybe there’s a new source control program, source control thing that we move on to from Git.","position":{"start":{"line":373,"column":12,"offset":41392},"end":{"line":374,"column":787,"offset":42179}}}],"position":{"start":{"line":373,"column":1,"offset":41381},"end":{"line":374,"column":787,"offset":42179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":376,"column":3,"offset":42183},"end":{"line":376,"column":10,"offset":42190}}}],"position":{"start":{"line":376,"column":1,"offset":42181},"end":{"line":376,"column":12,"offset":42192}}},{"type":"text","value":"\nAnd the way it does, I don’t know, I’m just spitballing here, but the way it ignores files, there’s some new way of traversing files more quickly that allows a search tool to be faster. So in terms of like, future direction, and like how other people influence it. I try to let, if there’s a lot of people requesting a feature. Then I tried to let that guide things as long as we can find a sustainable way for my definition of sustainable basically, to implement it and if we can then I’m willing to accept new features.","position":{"start":{"line":376,"column":12,"offset":42192},"end":{"line":377,"column":522,"offset":42714}}}],"position":{"start":{"line":376,"column":1,"offset":42181},"end":{"line":377,"column":522,"offset":42714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":379,"column":3,"offset":42718},"end":{"line":379,"column":10,"offset":42725}}}],"position":{"start":{"line":379,"column":1,"offset":42716},"end":{"line":379,"column":12,"offset":42727}}},{"type":"text","value":"\nCool. Sounds very reasonable. You mentioned that you added support for PCRE, new regular expression engine to ripgrep. I was wondering if you could talk about kind of the varieties and different approaches that you’ve seen to regular expression matching in the wild. Because from my point of view regular expressions, they’re something I learned about in four year computer science degree. It was presented in a way that suggested that these things have been around for a while, and there’s kind of a standard way to create a matcher. And then in the actual real world, I’ve come into contact with a variety of different regular expression engines. And have been surprised at like the kind of diversity of implementation styles and performance trade offs and things like that. So what are the different varieties of regular expression processing that you’ve seen, and why isn’t as simple as like, “Hey this thing, translate it to a DFA, and run the DFA, and then you’re done.”","position":{"start":{"line":379,"column":12,"offset":42727},"end":{"line":380,"column":977,"offset":43704}}}],"position":{"start":{"line":379,"column":1,"offset":42716},"end":{"line":380,"column":977,"offset":43704}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":382,"column":3,"offset":43708},"end":{"line":382,"column":10,"offset":43715}}}],"position":{"start":{"line":382,"column":1,"offset":43706},"end":{"line":382,"column":12,"offset":43717}}},{"type":"text","value":"\nYeah, that’s another question that we could spend a whole podcast on. But I think if we limit ourselves to general purpose, regex engines, where… It’s like a regex library that you might use. What’s the regex engine using PHP, what’s the regex engine you use when you’re writing Perl, and so on and so forth. If we limit ourselves to that kind of scope and we put aside like the specialty regex engines where you might have something like re2c, or… Oh, god, I’m blanking on the name, the popular one from… Wow, okay, blanking on the name, but it’s the one where you’re able to write and generate DFAs ahead of time. And you can execute certain actions for them. But if you put aside those things, and you basically limit yourself to general purpose regex engines, you kind of have two kinds of constraints put on you that I can think of off the top of my head. Which is compilation time has to be reasonable. And match time has to be fast, ideally fast.","position":{"start":{"line":382,"column":12,"offset":43717},"end":{"line":383,"column":960,"offset":44677}}}],"position":{"start":{"line":382,"column":1,"offset":43706},"end":{"line":383,"column":960,"offset":44677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":385,"column":3,"offset":44681},"end":{"line":385,"column":10,"offset":44688}}}],"position":{"start":{"line":385,"column":1,"offset":44679},"end":{"line":385,"column":12,"offset":44690}}},{"type":"text","value":"\nAnd if you’re at that level, there’s really two different ways to implement a regex engine. One of them is with backtracking. And that’s kind of what PCRE, does what Perl does, what Ruby’s regex engine does, JavaScript’s regex engine does. And then there’s the finite automaton approach, which is usually some combination of an NFA simulation, a non-deterministic finite automaton simulation, and a deterministic finite automaton simulation. I’ve never implemented… Well, I’ve done backtracking before. But I’ve never implemented like a PCRE backtracking regex engine. So I can’t talk too much about them. But my general understanding of them is that they tend to break a regex down into one of many different types of opcodes. And the regex engine itself essentially executes like a VM.","position":{"start":{"line":385,"column":12,"offset":44690},"end":{"line":386,"column":790,"offset":45480}}}],"position":{"start":{"line":385,"column":1,"offset":44679},"end":{"line":386,"column":790,"offset":45480}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":388,"column":3,"offset":45484},"end":{"line":388,"column":10,"offset":45491}}}],"position":{"start":{"line":388,"column":1,"offset":45482},"end":{"line":388,"column":12,"offset":45493}}},{"type":"text","value":"\nAnd the main feature of backtracking engines is that they have tons of features in them. So like back references, and look arounds, and PCRE has a whole bunch of stuff like recursion and call outs, and all sorts of crazy things that… Really fun. And the main drawback of all those things is that it’s hard to implement those things in a way that’s fast from a time complexity point of view. So it’s very easy to create a regex that will take exponential time on the input. And basically, that causes a class of security vulnerabilities called regex denial services, service attacks, REDOS. And like this has happened in some high profile cases, I think Cloudflare happened to itself. And StackOverflow is another popular one that I’m aware of in the last few years.","position":{"start":{"line":388,"column":12,"offset":45493},"end":{"line":389,"column":768,"offset":46261}}}],"position":{"start":{"line":388,"column":1,"offset":45482},"end":{"line":389,"column":768,"offset":46261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":391,"column":3,"offset":46265},"end":{"line":391,"column":10,"offset":46272}}}],"position":{"start":{"line":391,"column":1,"offset":46263},"end":{"line":391,"column":12,"offset":46274}}},{"type":"text","value":"\nBut that’s kind of that side of regex engines. The other side of regex engines is the one that I know a lot better, which is the finite automaton approach to it. And I’ll try to be really brief here. But basically if you implement the standard NFA simulation that you might see in a textbook you’ll get a great time complexity bound, which is the length of the regex times the length of the input. And that’s the optimal case. And the problem with that approach is that it’s dog slow in practice. And this actually happens to be what Go’s regex engine implements. And it’s why there are there’s an open issue on the Go issue tracker that says “Hey, make the regexes go faster.”","position":{"start":{"line":391,"column":12,"offset":46274},"end":{"line":392,"column":678,"offset":46952}}}],"position":{"start":{"line":391,"column":1,"offset":46263},"end":{"line":392,"column":678,"offset":46952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":394,"column":3,"offset":46956},"end":{"line":394,"column":10,"offset":46963}}}],"position":{"start":{"line":394,"column":1,"offset":46954},"end":{"line":394,"column":12,"offset":46965}}},{"type":"text","value":"\nAnd the typical way to speed that up, again, being very hand wavy here. The typical way to speed that up is something called the lazy DFA or hybrid NFA-DFA. And, again, I’ll be super brief here. But the primary difference between an NFA and a DFA is that an NFA can be in multiple states at once. Whereas a DFA can only be in one state at once. And the main implementation difference between those is that when you see a new byte with an NFA implementation, you have to go through every single state that you’re in, and process, “Okay, this state goes to this state, and this state goes to this state.” For every state that you’re in for that single byte. And it takes a lot of work, especially with alternations or repetitions or whatever.","position":{"start":{"line":394,"column":12,"offset":46965},"end":{"line":395,"column":741,"offset":47706}}}],"position":{"start":{"line":394,"column":1,"offset":46954},"end":{"line":395,"column":741,"offset":47706}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":397,"column":3,"offset":47710},"end":{"line":397,"column":10,"offset":47717}}}],"position":{"start":{"line":397,"column":1,"offset":47708},"end":{"line":397,"column":12,"offset":47719}}},{"type":"text","value":"\nBut with a DFA, you have a byte, you have a single state, and you move from that byte and that state to the next state. And that can be implemented very efficiently with a finite number of instructions, sorry a constant number of instructions. And using a table in memory. And basically a DFA in that implementation is going to be about an order of magnitude faster than NFA. The problem with a DFA, of course, is that building a DFA can have a potentially exponential number of states in the size of the regex.","position":{"start":{"line":397,"column":12,"offset":47719},"end":{"line":398,"column":512,"offset":48231}}}],"position":{"start":{"line":397,"column":1,"offset":47708},"end":{"line":398,"column":512,"offset":48231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":400,"column":3,"offset":48235},"end":{"line":400,"column":10,"offset":48242}}}],"position":{"start":{"line":400,"column":1,"offset":48233},"end":{"line":400,"column":12,"offset":48244}}},{"type":"text","value":"\nAnd especially when you have Unicode support enabled, those cases are not rare, they’re very common. And it creates a situation where compilation time is just too expensive. In a general purpose regex engine, where you need to be able to compile a regex, maybe in web request response time, and be able to run that regex. So the hybrid lazy DFA, the hybrid NFA-DFA or also called lazy DFA is, I believe, something that Ken Thompson created or came up with. And it’s something that is used in various places, GNU grep, does it. Russ Cox kind of re-popularized it by describing it in his article series on regex engines. And that’s how re2 is fast.","position":{"start":{"line":400,"column":12,"offset":48244},"end":{"line":401,"column":647,"offset":48891}}}],"position":{"start":{"line":400,"column":1,"offset":48233},"end":{"line":401,"column":647,"offset":48891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":403,"column":3,"offset":48895},"end":{"line":403,"column":10,"offset":48902}}}],"position":{"start":{"line":403,"column":1,"offset":48893},"end":{"line":403,"column":12,"offset":48904}}},{"type":"text","value":"\nAnd the fundamental reason why it’s fast is because it combines NFA with DFA. It does not compile the full DFA ahead of time, it only compiles what it needs for the next byte of input. And then the crucial bit is that it caches the state that it created. So it sees the next byte. If that state had already been cached, then it will act like a normal DFS. And it just repeats that eventually, you get to a point where you’ve cached all the states that you’re probably going to see, which is maybe a very small portion of full DFA. And that tends to work great in practice. Its failure mode is that if you have to regenerate the state on every byte, and there are definitely some regex’s where that occurs, then you end up spending a lot of time recreating a DFA and ends up being a similar speed as the NFA. But thankfully, those cases are somewhat rare. So it ends up being a decent trade off in practice.","position":{"start":{"line":403,"column":12,"offset":48904},"end":{"line":404,"column":907,"offset":49811}}}],"position":{"start":{"line":403,"column":1,"offset":48893},"end":{"line":404,"column":907,"offset":49811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":406,"column":3,"offset":49815},"end":{"line":406,"column":10,"offset":49822}}}],"position":{"start":{"line":406,"column":1,"offset":49813},"end":{"line":406,"column":12,"offset":49824}}},{"type":"text","value":"\nSo it’s kind of a just in time compilation approach where you’re compiling the regular expression… Or really not the regular expression, it’s like the NFA into the DFA, like expanding the state space of the NFA into DFA states.","position":{"start":{"line":406,"column":12,"offset":49824},"end":{"line":407,"column":230,"offset":50054}}}],"position":{"start":{"line":406,"column":1,"offset":49813},"end":{"line":407,"column":230,"offset":50054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":409,"column":3,"offset":50058},"end":{"line":409,"column":10,"offset":50065}}}],"position":{"start":{"line":409,"column":1,"offset":50056},"end":{"line":409,"column":12,"offset":50067}}},{"type":"text","value":"\nYeah, you’re actually doing subset construction, which is the standard way that you translate an NFA into a DFA, you’re actually doing that subset construction on the fly. You’re just doing it one byte at a time. And I would definitely not use the word just in time or JIT to describe it, because that is actually a whole different implementation strategy in regex engines. Google’s V8 JavaScript engine has a JIT to it. PCRE2 has a JIT. And both of those are impressively fast engineering. It’s just amazing engineering efforts there.","position":{"start":{"line":409,"column":12,"offset":50067},"end":{"line":410,"column":536,"offset":50603}}}],"position":{"start":{"line":409,"column":1,"offset":50056},"end":{"line":410,"column":536,"offset":50603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":412,"column":3,"offset":50607},"end":{"line":412,"column":10,"offset":50614}}}],"position":{"start":{"line":412,"column":1,"offset":50605},"end":{"line":412,"column":12,"offset":50616}}},{"type":"text","value":"\nGot it. Got it. And those JITs are actually like compiling the actual regular expression into-","position":{"start":{"line":412,"column":12,"offset":50616},"end":{"line":413,"column":95,"offset":50711}}}],"position":{"start":{"line":412,"column":1,"offset":50605},"end":{"line":413,"column":95,"offset":50711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":415,"column":3,"offset":50715},"end":{"line":415,"column":10,"offset":50722}}}],"position":{"start":{"line":415,"column":1,"offset":50713},"end":{"line":415,"column":12,"offset":50724}}},{"type":"text","value":"\nMachine code.","position":{"start":{"line":415,"column":12,"offset":50724},"end":{"line":416,"column":14,"offset":50738}}}],"position":{"start":{"line":415,"column":1,"offset":50713},"end":{"line":416,"column":14,"offset":50738}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":418,"column":3,"offset":50742},"end":{"line":418,"column":10,"offset":50749}}}],"position":{"start":{"line":418,"column":1,"offset":50740},"end":{"line":418,"column":12,"offset":50751}}},{"type":"text","value":"\n… some sort of machine code, okay.","position":{"start":{"line":418,"column":12,"offset":50751},"end":{"line":419,"column":37,"offset":50788}}}],"position":{"start":{"line":418,"column":1,"offset":50740},"end":{"line":419,"column":37,"offset":50788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":421,"column":3,"offset":50792},"end":{"line":421,"column":10,"offset":50799}}}],"position":{"start":{"line":421,"column":1,"offset":50790},"end":{"line":421,"column":12,"offset":50801}}},{"type":"text","value":"\nYep. Yep. At runtime they’re producing assembly code that match the regex’s. And both of those engines are backtracking.","position":{"start":{"line":421,"column":12,"offset":50801},"end":{"line":422,"column":121,"offset":50922}}}],"position":{"start":{"line":421,"column":1,"offset":50790},"end":{"line":422,"column":121,"offset":50922}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":424,"column":3,"offset":50926},"end":{"line":424,"column":10,"offset":50933}}}],"position":{"start":{"line":424,"column":1,"offset":50924},"end":{"line":424,"column":12,"offset":50935}}},{"type":"text","value":"\nGot it. Fascinating. I hope we didn’t lose too many people in that discussion. That was super interesting.","position":{"start":{"line":424,"column":12,"offset":50935},"end":{"line":425,"column":107,"offset":51042}}}],"position":{"start":{"line":424,"column":1,"offset":50924},"end":{"line":425,"column":107,"offset":51042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":427,"column":3,"offset":51046},"end":{"line":427,"column":10,"offset":51053}}}],"position":{"start":{"line":427,"column":1,"offset":51044},"end":{"line":427,"column":12,"offset":51055}}},{"type":"text","value":"\nYeah. It was quite not as brief as I wanted looking at the clock. But it’s hard to succinctly answer that question.","position":{"start":{"line":427,"column":12,"offset":51055},"end":{"line":428,"column":116,"offset":51171}}}],"position":{"start":{"line":427,"column":1,"offset":51044},"end":{"line":428,"column":116,"offset":51171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":430,"column":3,"offset":51175},"end":{"line":430,"column":10,"offset":51182}}}],"position":{"start":{"line":430,"column":1,"offset":51173},"end":{"line":430,"column":12,"offset":51184}}},{"type":"text","value":"\nYeah, totally. I think you did a fantastic job. And now I have some additional blog posts that need to go read.","position":{"start":{"line":430,"column":12,"offset":51184},"end":{"line":431,"column":112,"offset":51296}}}],"position":{"start":{"line":430,"column":1,"offset":51173},"end":{"line":431,"column":112,"offset":51296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":433,"column":3,"offset":51300},"end":{"line":433,"column":10,"offset":51307}}}],"position":{"start":{"line":433,"column":1,"offset":51298},"end":{"line":433,"column":12,"offset":51309}}},{"type":"text","value":"\nYeah. Yeah, sorry. Russ Cox’s articles on regex. Just Google “Russ Cox regex.” And they’ll be the first thing that’s there. If you haven’t read those, or if anyone that’s listening that hasn’t read those, those are just pure excellence. There’s just treats to read. And really just cannot recommend them more.","position":{"start":{"line":433,"column":12,"offset":51309},"end":{"line":434,"column":310,"offset":51619}}}],"position":{"start":{"line":433,"column":1,"offset":51298},"end":{"line":434,"column":310,"offset":51619}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":436,"column":3,"offset":51623},"end":{"line":436,"column":10,"offset":51630}}}],"position":{"start":{"line":436,"column":1,"offset":51621},"end":{"line":436,"column":12,"offset":51632}}},{"type":"text","value":"\nCool. We’ll link to those in the show notes. So I wanted to get to some of your other kind of contributions in the Rust open source community. You mentioned that Rust, I think it’s safe to say that Rust is probably your go to language at this point and you’ve contributed a lot of crates to the open source community. The regex crate, being one of them. Can you talk about why you got into Rust, what you like about it? And how you see that community evolving over time?","position":{"start":{"line":436,"column":12,"offset":51632},"end":{"line":437,"column":471,"offset":52103}}}],"position":{"start":{"line":436,"column":1,"offset":51621},"end":{"line":437,"column":471,"offset":52103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":439,"column":3,"offset":52107},"end":{"line":439,"column":10,"offset":52114}}}],"position":{"start":{"line":439,"column":1,"offset":52105},"end":{"line":439,"column":12,"offset":52116}}},{"type":"text","value":"\nYeah, yeah, I would say it’s fair to say that, at least in the coding that I do in my free time, mt open source work Rust is definitely the language that I use the most these days. And for work, I use Go. But as for Rust, what attracted me to it, I think at the time, I was big into Haskell, I was big into Go. And I had been coming off of a few years spent in grad school doing… Actually my concentration was in computational biology. But I had spent a lot of time studying programming languages, and being a teacher assistant for the programming languages course there under Normal Ramsey. And I just got a love of programming languages and type systems from my time there.","position":{"start":{"line":439,"column":12,"offset":52116},"end":{"line":440,"column":678,"offset":52794}}}],"position":{"start":{"line":439,"column":1,"offset":52105},"end":{"line":440,"column":678,"offset":52794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":442,"column":3,"offset":52798},"end":{"line":442,"column":10,"offset":52805}}}],"position":{"start":{"line":442,"column":1,"offset":52796},"end":{"line":442,"column":12,"offset":52807}}},{"type":"text","value":"\nAnd when Rust kind of came to the scene, I had kind of been watching it for a while. But for whatever reason, for some reason, somewhere around like late 2013, early 2014, it hit a point where I felt like, “Hey, I could learn this. There are docs there. I could start writing code in this.” So I wrote a QuickCheck implementation, which I had known from Haskell days. And the reason why I wanted to write it was because I had seen all these similarities, and these are intentional similarities. But seen all the similarities between the trait system in Rust and Haskell’s type classes. And if you’ve ever used QuickCheck in Haskell, it makes heavy use of if type classes and return value polymorphism, and all this cool kind of stuff.","position":{"start":{"line":442,"column":12,"offset":52807},"end":{"line":443,"column":735,"offset":53542}}}],"position":{"start":{"line":442,"column":1,"offset":52796},"end":{"line":443,"column":735,"offset":53542}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":445,"column":3,"offset":53546},"end":{"line":445,"column":10,"offset":53553}}}],"position":{"start":{"line":445,"column":1,"offset":53544},"end":{"line":445,"column":12,"offset":53555}}},{"type":"text","value":"\nAnd I wanted to say, “Well, are Rust traits, are they expressive enough to do this kind of QuickCheck thing?” And I was like, “Okay.” So I did it, and it worked. And I was like, “Hey, this is cool.” And so I transferred… I had all of this transfer of knowledge to say, “Hey, I knew all this stuff from Haskell and it worked over here in Rust.” And the thing with Rust is that it took my like of systemsy stuff, which I had gotten from C and Go, and my like, of pl programming language stuff that I got from Haskell, nice, tight system features. And it just kind of crashed those together. And I really, really loved and still love the result.","position":{"start":{"line":445,"column":12,"offset":53555},"end":{"line":446,"column":645,"offset":54200}}}],"position":{"start":{"line":445,"column":1,"offset":53544},"end":{"line":446,"column":645,"offset":54200}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":448,"column":3,"offset":54204},"end":{"line":448,"column":10,"offset":54211}}}],"position":{"start":{"line":448,"column":1,"offset":54202},"end":{"line":448,"column":12,"offset":54213}}},{"type":"text","value":"\nC and Go versus Haskell. Very different, I think, language paradigms. And you’re saying that Rust is a synthesis of those two? Can you talk about… Because everyone has like a stereotype of like your classic C developer versus your classic Haskell developer. They’re very different. So you talk about why you seem to like both and what you think the two communities can learn from one another?","position":{"start":{"line":448,"column":12,"offset":54213},"end":{"line":449,"column":395,"offset":54608}}}],"position":{"start":{"line":448,"column":1,"offset":54202},"end":{"line":449,"column":395,"offset":54608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":451,"column":3,"offset":54612},"end":{"line":451,"column":10,"offset":54619}}}],"position":{"start":{"line":451,"column":1,"offset":54610},"end":{"line":451,"column":12,"offset":54621}}},{"type":"text","value":"\nYeah. Oh, my goodness. So I would say that, like the whole C, Go meets Haskell thing was kind of like my impression at the time. I would say a better or more accurate comparison would be, let’s say, C++ meets Haskell meets standard ML, maybe is what Rust is, I don’t know. But in any case, the thing that I liked about C and Go or things that I do like about C and Go are that I really loved working at a lower level of abstraction. I liked performance, I like making things go fast. And I found it difficult to do that with Haskell. One of our research projects actually was implementing the Viterbi algorithm. Goodness, it’s been a long time. But it’s a way of dealing with hidden Markov models, and basically how to trace a path through a hidden Markov model to come up with a probability. And the Viterbi algorithm deals with…","position":{"start":{"line":451,"column":12,"offset":54621},"end":{"line":452,"column":833,"offset":55454}}}],"position":{"start":{"line":451,"column":1,"offset":54610},"end":{"line":452,"column":833,"offset":55454}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":454,"column":3,"offset":55458},"end":{"line":454,"column":10,"offset":55465}}}],"position":{"start":{"line":454,"column":1,"offset":55456},"end":{"line":454,"column":12,"offset":55467}}},{"type":"text","value":"\nIn order to speed it up you can do a memoization technique. And I remember us, one of our research experience reports was can you write the Viterbi algorithm implementation in Haskell that is as fast as C’s. And we actually couldn’t. We had an implementation of it in C, standard ML, and Haskell. And we tried to apply strictness annotations and all sorts of stuff like that in Haskell. And my experience there is really not unique as far as I can tell. If you scour the internet for blog posts about optimizing Haskell code, you kind of see that same problem over and over again.","position":{"start":{"line":454,"column":12,"offset":55467},"end":{"line":455,"column":581,"offset":56048}}}],"position":{"start":{"line":454,"column":1,"offset":55456},"end":{"line":455,"column":581,"offset":56048}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":457,"column":3,"offset":56052},"end":{"line":457,"column":10,"offset":56059}}}],"position":{"start":{"line":457,"column":1,"offset":56050},"end":{"line":457,"column":12,"offset":56061}}},{"type":"text","value":"\nYeah.","position":{"start":{"line":457,"column":12,"offset":56061},"end":{"line":458,"column":6,"offset":56067}}}],"position":{"start":{"line":457,"column":1,"offset":56050},"end":{"line":458,"column":6,"offset":56067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":460,"column":3,"offset":56071},"end":{"line":460,"column":10,"offset":56078}}}],"position":{"start":{"line":460,"column":1,"offset":56069},"end":{"line":460,"column":12,"offset":56080}}},{"type":"text","value":"\nAnd that was kind of my path there as far as how those two things met and why I liked it. In terms of what the communities could learn from each other. I don’t know where to begin with that one. And don’t say that in a sense that I feel like they have a lot to learn from each other. Like, I don’t mean it that way. I think I just mean it as, it’s such a big question. I don’t know, really, is the answer for me on that one.","position":{"start":{"line":460,"column":12,"offset":56080},"end":{"line":461,"column":425,"offset":56505}}}],"position":{"start":{"line":460,"column":1,"offset":56069},"end":{"line":461,"column":425,"offset":56505}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":463,"column":3,"offset":56509},"end":{"line":463,"column":10,"offset":56516}}}],"position":{"start":{"line":463,"column":1,"offset":56507},"end":{"line":463,"column":12,"offset":56518}}},{"type":"text","value":"\nThat’s fair. That’s fair. You also wrote this blog post, a lot of our conversation thus far has been like, deeply, deeply technical. But I also wanted to get to some of your thoughts on kind of community building and evolution, seeing as you’ve been a part of the Rust community for a while now. And as that language grows, and gains broader adoption, there’s more people entering into the community. And you wrote a blog post about how the community should or would or could evolve, as it grows. Care to share your thoughts on that?","position":{"start":{"line":463,"column":12,"offset":56518},"end":{"line":464,"column":534,"offset":57052}}}],"position":{"start":{"line":463,"column":1,"offset":56507},"end":{"line":464,"column":534,"offset":57052}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":466,"column":3,"offset":57056},"end":{"line":466,"column":10,"offset":57063}}}],"position":{"start":{"line":466,"column":1,"offset":57054},"end":{"line":466,"column":12,"offset":57065}}},{"type":"text","value":"\nYeah, so, I guess just a quick background, I’ve been a moderator for the Rust community, since the moderation team, since its inception. Which was around 1.0 release or a little before, somewhere around there. And basically, our charge is to uphold the code of conduct which is basically a way of keeping a healthy community. And I don’t want to just try to distill the Code of Conduct down to a single thing, but a lot of it has to do with civility. And making sure that even if people don’t like each other, or they don’t like, how other people… What they do in their free time, to some reasonable extent everyone has to treat each other with respect.","position":{"start":{"line":466,"column":12,"offset":57065},"end":{"line":467,"column":656,"offset":57721}}}],"position":{"start":{"line":466,"column":1,"offset":57054},"end":{"line":467,"column":656,"offset":57721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":469,"column":3,"offset":57725},"end":{"line":469,"column":10,"offset":57732}}}],"position":{"start":{"line":469,"column":1,"offset":57723},"end":{"line":469,"column":12,"offset":57734}}},{"type":"text","value":"\nAnd it’s not necessarily just about treating others with respect, but it’s actually about moving forward. And being able to drive discussions forward with a mutual desire to improve the language, improve the ecosystem, improve the libraries, or whatever it is that’s trying to be done. Which is a long way of saying be constructive. And doing that is hard, especially as the community grows. As far as my blog post goes, I called my FOSS story. I think my goal with that post was probably less about my specific moderation experience with Rust, and more about trying to improve the empathy that we have for each other. Or maybe help others do perspective taking. Because a lot of us played multiple roles. Sometimes I’m the end user of software, and sometimes I’m the maintainer of software. And those aren’t the only two roles in open source. There’s documentation, writing, event organizing, community organizing, all sorts of stuff, UI design. And being able to make sure you’re taking the perspective of each person that you’re talking to, is really my goal with that blog post. But I hope I succeeded with that, at least in some part.","position":{"start":{"line":469,"column":12,"offset":57734},"end":{"line":470,"column":1140,"offset":58874}}}],"position":{"start":{"line":469,"column":1,"offset":57723},"end":{"line":470,"column":1140,"offset":58874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":472,"column":3,"offset":58878},"end":{"line":472,"column":10,"offset":58885}}}],"position":{"start":{"line":472,"column":1,"offset":58876},"end":{"line":472,"column":12,"offset":58887}}},{"type":"text","value":"\nThe hard part of software, I think, often comes at the intersection of deeply technical discussions, as well as human and social side of things.","position":{"start":{"line":472,"column":12,"offset":58887},"end":{"line":473,"column":145,"offset":59032}}}],"position":{"start":{"line":472,"column":1,"offset":58876},"end":{"line":473,"column":145,"offset":59032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":475,"column":3,"offset":59036},"end":{"line":475,"column":10,"offset":59043}}}],"position":{"start":{"line":475,"column":1,"offset":59034},"end":{"line":475,"column":12,"offset":59045}}},{"type":"text","value":"\nYep.","position":{"start":{"line":475,"column":12,"offset":59045},"end":{"line":476,"column":5,"offset":59050}}}],"position":{"start":{"line":475,"column":1,"offset":59034},"end":{"line":476,"column":5,"offset":59050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":478,"column":3,"offset":59054},"end":{"line":478,"column":10,"offset":59061}}}],"position":{"start":{"line":478,"column":1,"offset":59052},"end":{"line":478,"column":12,"offset":59063}}},{"type":"text","value":"\nI think both are important to get right. Especially since there’s a lot of smart people out there and want to source ideas from…","position":{"start":{"line":478,"column":12,"offset":59063},"end":{"line":479,"column":131,"offset":59194}}}],"position":{"start":{"line":478,"column":1,"offset":59052},"end":{"line":479,"column":131,"offset":59194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":481,"column":3,"offset":59198},"end":{"line":481,"column":10,"offset":59205}}}],"position":{"start":{"line":481,"column":1,"offset":59196},"end":{"line":481,"column":12,"offset":59207}}},{"type":"text","value":"\nYeah, and especially when you have a vibrant and diverse community like Rust where… And in particular an online community. You don’t have the same sorts of pressures or social expectations that you would in, let’s say, an office environment, or even a remote office environment with a bunch of coworkers. Like, that’s a professional environment, and there’s a whole bunch of different pressures that influence your behavior there. But in the online world, where literally anyone can comment, there’s just those sorts of procedures of decorum and good faith assumptions and working together and that sort of thing.","position":{"start":{"line":481,"column":12,"offset":59207},"end":{"line":482,"column":616,"offset":59823}}}],"position":{"start":{"line":481,"column":1,"offset":59196},"end":{"line":482,"column":616,"offset":59823}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":484,"column":3,"offset":59827},"end":{"line":484,"column":10,"offset":59834}}}],"position":{"start":{"line":484,"column":1,"offset":59825},"end":{"line":484,"column":12,"offset":59836}}},{"type":"text","value":"\nDeveloping rapport with people that you work with day in and day out. I mean, obviously, that happens to an extent because there are contributors that come back and do things over and over again, and people who are in the teams interact with each other. But by and large, there’s always new people coming into the community and it’s very difficult to moderate those discussions. Because you don’t have those base assumptions that you normally do in a professional environment.","position":{"start":{"line":484,"column":12,"offset":59836},"end":{"line":485,"column":477,"offset":60313}}}],"position":{"start":{"line":484,"column":1,"offset":59825},"end":{"line":485,"column":477,"offset":60313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":487,"column":3,"offset":60317},"end":{"line":487,"column":10,"offset":60324}}}],"position":{"start":{"line":487,"column":1,"offset":60315},"end":{"line":487,"column":12,"offset":60326}}},{"type":"text","value":"\nYeah. Makes total sense. All right, this is going to be a complete non-sequitur. But I wanted to get to this because it’s such an interesting story, I guess. So in addition to open source software and programming, another one of your interests is football or American football.","position":{"start":{"line":487,"column":12,"offset":60326},"end":{"line":488,"column":278,"offset":60604}}}],"position":{"start":{"line":487,"column":1,"offset":60315},"end":{"line":488,"column":278,"offset":60604}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":490,"column":3,"offset":60608},"end":{"line":490,"column":10,"offset":60615}}}],"position":{"start":{"line":490,"column":1,"offset":60606},"end":{"line":490,"column":12,"offset":60617}}},{"type":"text","value":"\nYeah.","position":{"start":{"line":490,"column":12,"offset":60617},"end":{"line":491,"column":6,"offset":60623}}}],"position":{"start":{"line":490,"column":1,"offset":60606},"end":{"line":491,"column":6,"offset":60623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":493,"column":3,"offset":60627},"end":{"line":493,"column":10,"offset":60634}}}],"position":{"start":{"line":493,"column":1,"offset":60625},"end":{"line":493,"column":12,"offset":60636}}},{"type":"text","value":"\nAnd when we’re talking earlier, you told me this anecdote involving like a software engineer that you knew and Bill Belichick. And I was wondering if you could relate that story to our audience, because I thought it was just such a funny tale.","position":{"start":{"line":493,"column":12,"offset":60636},"end":{"line":494,"column":244,"offset":60880}}}],"position":{"start":{"line":493,"column":1,"offset":60625},"end":{"line":494,"column":244,"offset":60880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":496,"column":3,"offset":60884},"end":{"line":496,"column":10,"offset":60891}}}],"position":{"start":{"line":496,"column":1,"offset":60882},"end":{"line":496,"column":12,"offset":60893}}},{"type":"text","value":"\nYeah. I guess there’s not too much to it. but I actually have this story, secondhand, or third hand, through a friend at Tufts University. And basically, what the story is, is that Bill Belichick… This was some years ago, several years ago, he was looking for someone to help him… I don’t know what he was looking for help with. But something to do with tech, something to do with computers or programming, whether it was analyzing injury statistics, or I don’t know, who knows.","position":{"start":{"line":496,"column":12,"offset":60893},"end":{"line":497,"column":483,"offset":61376}}}],"position":{"start":{"line":496,"column":1,"offset":60882},"end":{"line":497,"column":483,"offset":61376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":499,"column":3,"offset":61380},"end":{"line":499,"column":10,"offset":61387}}}],"position":{"start":{"line":499,"column":1,"offset":61378},"end":{"line":499,"column":12,"offset":61389}}},{"type":"text","value":"\nData processing, or…","position":{"start":{"line":499,"column":12,"offset":61389},"end":{"line":500,"column":23,"offset":61412}}}],"position":{"start":{"line":499,"column":1,"offset":61378},"end":{"line":500,"column":23,"offset":61412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":502,"column":3,"offset":61416},"end":{"line":502,"column":10,"offset":61423}}}],"position":{"start":{"line":502,"column":1,"offset":61414},"end":{"line":502,"column":12,"offset":61425}}},{"type":"text","value":"\nSome sort of data processing, looking at like tendencies of other teams. Just to get a tiny, slightest bit edge, over another team. Whether it was data scientists or mundane programming tasks, I have no idea. But from what I heard he what he wanted was someone who understood tech and understood football. So he basically looked at the intersection of those two fields in the New England area. And from the story that I heard, he found like a few people, three people. And one of the people he found was someone who played football at Tufts that also was majoring in computer science, and was someone that I happen to TA. And that’s pretty much the story, was that. I don’t know what ended up happening, or if he’s still there, or if he did anything cool. But whatever he did, I’m sure I’ll never going to find out because they probably keep that stuff very, very secretive.","position":{"start":{"line":502,"column":12,"offset":61425},"end":{"line":503,"column":875,"offset":62300}}}],"position":{"start":{"line":502,"column":1,"offset":61414},"end":{"line":503,"column":875,"offset":62300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":505,"column":3,"offset":62304},"end":{"line":505,"column":10,"offset":62311}}}],"position":{"start":{"line":505,"column":1,"offset":62302},"end":{"line":505,"column":12,"offset":62313}}},{"type":"text","value":"\nBelichick recruiting both the best athletes and the best programming minds out of the nation’s leading universities. I feel like it just illustrates like, for anyone who claims that software isn’t eating the world, even coaches in professional sports are hiring computer scientists to give them whatever edge they can grab over their competition.","position":{"start":{"line":505,"column":12,"offset":62313},"end":{"line":506,"column":347,"offset":62660}}}],"position":{"start":{"line":505,"column":1,"offset":62302},"end":{"line":506,"column":347,"offset":62660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":508,"column":3,"offset":62664},"end":{"line":508,"column":10,"offset":62671}}}],"position":{"start":{"line":508,"column":1,"offset":62662},"end":{"line":508,"column":12,"offset":62673}}},{"type":"text","value":"\nAbsolutely, yeah. I myself have had a couple of NBA teams reach out to me to recruit me. And so… It’s there.","position":{"start":{"line":508,"column":12,"offset":62673},"end":{"line":509,"column":111,"offset":62784}}}],"position":{"start":{"line":508,"column":1,"offset":62662},"end":{"line":509,"column":111,"offset":62784}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":511,"column":3,"offset":62788},"end":{"line":511,"column":10,"offset":62795}}}],"position":{"start":{"line":511,"column":1,"offset":62786},"end":{"line":511,"column":12,"offset":62797}}},{"type":"text","value":"\nI wonder if us programmers will ever reach kind of the celebrity status or notoriety as some of the athletes do. Maybe in the future, maybe it’s a pipe dream, but maybe in the future ESPN commentators will talk about like, “Oh the LA Lakers. They have such a good algorithmic basketball team.”","position":{"start":{"line":511,"column":12,"offset":62797},"end":{"line":512,"column":294,"offset":63091}}}],"position":{"start":{"line":511,"column":1,"offset":62786},"end":{"line":512,"column":294,"offset":63091}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":514,"column":3,"offset":63095},"end":{"line":514,"column":10,"offset":63102}}}],"position":{"start":{"line":514,"column":1,"offset":63093},"end":{"line":514,"column":12,"offset":63104}}},{"type":"text","value":"\nYeah, I suspect not. But I think maybe there exists a reality where that happens. And maybe that reality is when like a bigger proportion of the population writes code. I don’t know that will exist. I’m not even saying that I want it to exist, because I know all those things are controversial. But yeah, maybe that reality does exist in our future. And if there are a lot more people writing code, then all of a sudden that becomes something that a lot more people care about.","position":{"start":{"line":514,"column":12,"offset":63104},"end":{"line":515,"column":478,"offset":63582}}}],"position":{"start":{"line":514,"column":1,"offset":63093},"end":{"line":515,"column":478,"offset":63582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":517,"column":3,"offset":63586},"end":{"line":517,"column":10,"offset":63593}}}],"position":{"start":{"line":517,"column":1,"offset":63584},"end":{"line":517,"column":12,"offset":63595}}},{"type":"text","value":"\nYeah.","position":{"start":{"line":517,"column":12,"offset":63595},"end":{"line":518,"column":6,"offset":63601}}}],"position":{"start":{"line":517,"column":1,"offset":63584},"end":{"line":518,"column":6,"offset":63601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":520,"column":3,"offset":63605},"end":{"line":520,"column":10,"offset":63612}}}],"position":{"start":{"line":520,"column":1,"offset":63603},"end":{"line":520,"column":12,"offset":63614}}},{"type":"text","value":"\nI don’t know. But other than that, I doubt it.","position":{"start":{"line":520,"column":12,"offset":63614},"end":{"line":521,"column":47,"offset":63661}}}],"position":{"start":{"line":520,"column":1,"offset":63603},"end":{"line":521,"column":47,"offset":63661}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Beyang:","position":{"start":{"line":523,"column":3,"offset":63665},"end":{"line":523,"column":10,"offset":63672}}}],"position":{"start":{"line":523,"column":1,"offset":63663},"end":{"line":523,"column":12,"offset":63674}}},{"type":"text","value":"\nAll right. On that note, my guest today has been Andrew Gallant. Andrew, thanks so much for coming on the show.","position":{"start":{"line":523,"column":12,"offset":63674},"end":{"line":524,"column":112,"offset":63786}}}],"position":{"start":{"line":523,"column":1,"offset":63663},"end":{"line":524,"column":112,"offset":63786}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Andrew:","position":{"start":{"line":526,"column":3,"offset":63790},"end":{"line":526,"column":10,"offset":63797}}}],"position":{"start":{"line":526,"column":1,"offset":63788},"end":{"line":526,"column":12,"offset":63799}}},{"type":"text","value":"\nIt’s been my pleasure. Thanks so much for having me.","position":{"start":{"line":526,"column":12,"offset":63799},"end":{"line":527,"column":53,"offset":63852}}}],"position":{"start":{"line":526,"column":1,"offset":63788},"end":{"line":527,"column":53,"offset":63852}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- END TRANSCRIPT -->","position":{"start":{"line":529,"column":1,"offset":63854},"end":{"line":529,"column":24,"offset":63877}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":530,"column":1,"offset":63878}}}}