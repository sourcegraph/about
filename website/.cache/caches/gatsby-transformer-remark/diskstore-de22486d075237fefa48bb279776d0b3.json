{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-a7bc34294824d066b73a45e2854c05f4-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<p><a href=\"https://research.swtch.com/vgo-mvs\">Minimal version selection</a> is an idea that Russ Cox proposed for how to resolve the dependencies of <a href=\"https://github.com/golang/go/wiki/Modules\">Go modules</a>. When installing or updating dependencies, minimal version selection always selects the minimal (oldest) module version that satisfies the overall requirements of a build.</p>\n<p>Minimal version selection has a lot of nice properties:</p>\n<ul>\n<li>It is simple to understand and implement.</li>\n<li>It is fast to compute because it avoids solving <a href=\"https://research.swtch.com/version-sat\">Version-SAT</a>, which is <a href=\"https://en.wikipedia.org/wiki/NP-completeness\">NP-Complete</a>.</li>\n<li>It produces high-fidelity builds by default because the Go dependencies that a user builds are as close as possible to the ones the author developed against.</li>\n</ul>\n<p>Many other popular dependency managers, like NPM, prefer to install the <em>latest</em> version of dependencies by default. I will share a recent real-world example of the kind of pain that minimal version selection prevents.</p>\n<h2 id=\"Background\" style=\"position:relative;\"><a href=\"#Background\" aria-label=\"Background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Background</h2>\n<p>Sourcegraph recently <a href=\"/blog/sourcegraph-browser-extensions-are-now-open-source\">open sourced our browser extensions</a>, but before we could, I needed to remove a transitive Go dependency on our private icons NPM package that contains licensed assets.</p>\n<p>Before:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github.com/sourcegraph/browser-extensions (open source)\n└─┬ @sourcegraph/codeintellify@3.5.3 (open source)\n  └── @sourcegraph/icons@1.15.0 (private)</code></pre></div>\n<p>Codeintellify provides hovertooltips on code. Both our web app and our browser extensions depend on it.</p>\n<p>The task of removing codeintellify’s dependency on our private icons repository was straightforward because it was only using a single loading spinner. All I needed to do was create <a href=\"https://github.com/sourcegraph/react-loading-spinner\">a NPM package for our open source loading spinner</a>, <a href=\"https://github.com/sourcegraph/codeintellify/pull/33\">update codeintellify to use the new package</a>, and finally update the browser extension to depend on the lastest version of codeintellify: 3.6.0</p>\n<p>After:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github.com/sourcegraph/browser-extensions (open source)\n└─┬ @sourcegraph/codeintellify@3.6.0 (open source)\n  └── @sourcegraph/react-loading-spinner@0.0.6 (open source)</code></pre></div>\n<p>Everything worked; mission accomplished!</p>\n<h2 id=\"Pain\" style=\"position:relative;\"><a href=\"#Pain\" aria-label=\"Pain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Pain</h2>\n<p><a href=\"https://renovatebot.com/\">Renovate Bot</a> noticed that there was a new version of codeintellify so it helpfully created a pull request to update our main repository to codeintellify 3.6.0.</p>\n<img src=\"//images.ctfassets.net/le3mxztn6yoo/1WvaXnaw6sswcEWi4AAYak/e9bb9861c6edd7f8787b3633c79655a8/diff.png\" alt=\"diff\">\n<p>After CI passed, another engineer merged the pull request. Soon thereafter, our end-to-end tests (that only run on master after deploying to our staging environment) started failing because hover tooltips, a core feature of Sourcegraph, were broken.</p>\n<img src=\"//images.ctfassets.net/le3mxztn6yoo/3hguLE62tiwS4gGac2qkiQ/2f2ccebe4540d6789d36ef0f79277952/error.png\" alt=\"error\">\n<p>Fortunately, the end-to-end test failure blocked this from being deployed to sourcegraph.com.</p>\n<p>Since I was asleep at the time, and the breakage was apparently caused by codeintelify 3.6.0 (and transitively, me), my teammate just reverted the commit.</p>\n<p>When I arrived to work the next day, I was confused. What could have possibly gone wrong?</p>\n<ul>\n<li>Everything had worked fine when I integrated this library in our browser extensions.</li>\n<li>There is not much opportunity to subtly break the site with 18 lines of CSS and 10 lines of TypeScript.</li>\n<li>The error message didn’t make any sense, and wasn’t related to anything I had done!</li>\n</ul>\n<p>After scratching my head for a bit, I went back to look at the diff and realized that GitHub had helpfully auto-collapsed <code class=\"language-text\">package-lock.json</code>. Of course I don’t need to see that; it is for machines, right?</p>\n<p>I expanded the diff and my heart sank.</p>\n<img src=\"//images.ctfassets.net/le3mxztn6yoo/51SpsPKFgQOE4QImMK0Wyc/dfb7cd0361006e3a1f9be166d5e55236/package-lock.png\" alt=\"package-lock\">\n<p>NPM had “helpfully” seen that there was a new patch release of sanitize-html and upgraded to the new version <strong>even though sanitize-html had no relationship to the package that Renovate was updating</strong>.</p>\n<p>Worse, that “patch” version of sanitize-html was completely broken (<a href=\"https://github.com/punkave/sanitize-html/issues/241\">#241</a>, <a href=\"https://github.com/punkave/sanitize-html/issues/242\">#242</a>).</p>\n<h2 id=\"Reflection\" style=\"position:relative;\"><a href=\"#Reflection\" aria-label=\"Reflection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Reflection</h2>\n<p>I was upset. Not with sanitize-html though; people make mistakes. In fact, I assume that people will make mistakes (in this case the mistake was <a href=\"https://github.com/punkave/sanitize-html/pull/244\">quickly fixed in 1.18.4</a>, and I was able to move on with my life).</p>\n<p>I was upset because the design of NPM assumes things that just aren’t true in general:</p>\n<ul>\n<li>People don’t make mistakes.</li>\n<li>People perfectly understand and apply <a href=\"https://semver.org/\">semantic versioning</a> (see also: <a href=\"https://github.com/staltz/comver#why-use-compatible-versioning\">compatible versioning</a>).</li>\n<li>Having the ecosystem converge to the latest dependency versions as fast as possible is more important that the stability of individual projects.</li>\n</ul>\n<p>To the contrary, I expect NPM and tools like it to:</p>\n<ul>\n<li>Assume that people (including myself) will make mistakes and do as much as possible to guard against those mistakes.</li>\n<li>Optimize for <em>working</em> dependencies (i.e. the ones I am already using and have tested), not the <em>latest</em> dependencies.</li>\n<li>Not update a dependency unless I explicitly ask it to (<a href=\"https://npm.community/t/impossible-to-update-single-package-without-updating-its-dependencies/1156\">#1156</a>, <a href=\"https://github.com/renovatebot/renovate/issues/2348\">#2348</a>).</li>\n<li>\n<p>Make lockfiles less cumbersome. Lockfiles should:</p>\n<ul>\n<li>Work cross-platform (<a href=\"https://npm.community/t/package-lock-json-keeps-changing-between-platforms-and-runs/1129\">#1129</a>, <a href=\"https://npm.community/t/package-lock-json-changes-from-one-npm-install-to-the-next/1454\">#1454</a>).</li>\n<li>Not <a href=\"https://stackoverflow.com/questions/47638381/why-did-package-lock-json-change-the-integrity-hash-from-sha1-to-sha512\">change frequently</a>.</li>\n</ul>\n</li>\n</ul>\n<p>This experience was the most benign manifestation of this problem. It would have been worse if any or all of the following were true:</p>\n<ul>\n<li>My change was more complicated.</li>\n<li>The aggregate diff between codeintellify 3.5.3 and 3.6.0 included other changes that weren’t mine.</li>\n<li>The aggregate diff between sanitize-html 1.18.2 and 1.18.3 was larger.</li>\n<li>sanitize-html didn’t quickly release a patch to fix the issue.</li>\n<li>sanitize-html had transitive dependencies that were also updated.</li>\n<li>NPM had updated more than one unrelated package.</li>\n<li>Tests didn’t catch the regression and my change was deployed to production.</li>\n</ul>\n<p>I am happy that this class of dependency problem won’t exist with Go modules, and I hope that other package managers evolve to solve these problems.</p>\n<h2 id=\"Thanks\" style=\"position:relative;\"><a href=\"#Thanks\" aria-label=\"Thanks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Thanks</h2>\n<p>Special thanks to Felix (<a href=\"https://twitter.com/felixfbecker\">@felixfbecker</a>) for ensuring that end-to-end tests must pass on staging before deploying to sourcegraph.com, discussing minimal version selection with me, authoring <a href=\"https://github.com/sourcegraph/create\">a tool to create new NPM packages with the right boilerplate</a>, searching for workarounds to get the behavior I want out of npm, and ultimately filing detailed issues to drive change in the ecosystem (<a href=\"https://npm.community/t/impossible-to-update-single-package-without-updating-its-dependencies/1156\">#1156</a>, <a href=\"https://github.com/renovatebot/renovate/issues/2348\">#2348</a>).</p>\n<h2 id=\"More-posts-like-this\" style=\"position:relative;\"><a href=\"#More-posts-like-this\" aria-label=\"More posts like this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>More posts like this</h2>\n<ul>\n<li><a href=\"https://about.sourcegraph.com/blog/nine-circles-of-dependency-hell/\">The Nine Circles of Dependency Hell (and a roadmap out)</a></li>\n<li><a href=\"https://about.sourcegraph.com/blog/how-not-to-break-a-search-engine-unglamorous-engineering/\">How not to break a search engine or: What I learned about unglamorous engineering</a></li>\n<li><a href=\"https://about.sourcegraph.com/blog/optimizing-a-code-intel-commit-graph/\">Optimizing a code intelligence commit graph</a></li>\n</ul>"}