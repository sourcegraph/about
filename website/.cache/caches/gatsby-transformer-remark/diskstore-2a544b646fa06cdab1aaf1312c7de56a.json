{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-6db66a05d2ed4823682bfd0740437ec6-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<div class=\"alert alert-info\">\n<p>Want to use LSIF for precise code intelligence on Sourcegraph? See ”<a href=\"https://docs.sourcegraph.com/code_intelligence/explanations/precise_code_intelligence\">LSIF: Fast and precise code intelligence (Sourcegraph documentation)</a>“.</p>\n</div>\n<p>This article explores what it would take to write an LSIF indexer. Along the way, we will learn a little bit about parsing, walking abstract syntax trees, scopes and the LSIF file format.</p>\n<p><a href=\"https://github.com/Microsoft/language-server-protocol/blob/master/indexFormat/specification.md\">LSIF</a> (Language Server Index Format) is a data format that captures code intelligence facilitating code navigation, hover documentation etc. The blog post <em><a href=\"/go/code-intelligence-with-lsif/\">Code intelligence with LSIF</a></em> has more details about LSIF.</p>\n<p>An LSIF indexer analyzes a collection of input source code files and produces an LSIF data file. This LSIF data file, in turn, is used by an editor or a Sourcegraph instance or some other developer tool to offer functionality like “Go to Definition”, “Show References”, hover results with documentation and type information, semantic search, etc.</p>\n<p>To make things concrete for our exploration, we will write an LSIF indexer for the programming language Jsonnet, and we will limit ourselves to providing enough data for “Go to Definition” in a Jsonnet file including its imports.\n<a href=\"https://jsonnet.org\">Jsonnet</a> is a configuration and data templating language closely linked to JSON. It is simple enough that parsing will not become a distraction in this exploration, but it is complex enough to show that simple lexical text search will not be sufficient for accurate “Go to Definition” LSIF data. We will write our LSIF indexer in <a href=\"https://golang.org\">Go</a> and use the parser generator <a href=\"https://www.antlr.org\">Antlr</a> to do the heavy lifting on the parsing side.</p>\n<p><em>Note: All the code for this exploration is available at <a href=\"https://github.com/sourcegraph/lsif-jsonnet\">lsif-jsonnet</a>.</em></p>\n<p>So let’s dive right in. First, we figure out what data a developer tool would need to offer “Go to Definition” functionality. The developer tool has a cursor at some location in a source file. If that location happens to be at an identifier (like a variable name or function name), and the user invokes “Go to Definition”, the tool needs to move the cursor to the location in one of the source files where the identifier was defined.</p>\n<p>Our units of data are locations in input source files. The cursor is at one location and will move to another location. There are also relationships between locations: one location is linked to another location because the reference is at one location and its definition at the other. We need to extract these two things from the input source files: locations of identifiers and the relationships between these locations.</p>\n<p>Why do we need fullfledged parsing to extract this data? Consider the Jsonnet file in Listing 1.</p>\n<p><img src=\"/blog/lsif-indexer-files/listingOne.png\" alt=\"listingOne\">\nListing 1.</p>\n<p>There are many locations where the string “foo” appears. Even if we separate the input into proper tokens (which eliminates “call_foo” and “call_method_foo” as locations for identifier “foo”), we would still struggle to establish the correct relationships between all the locations where the identifier “foo” appears.\nOn line 1 “foo” is the definition of a function, on line 5 “foo” is the definition of a method of “bar”, on line 10 “foo” is a function parameter, on line 12 “foo” is a reference to the function from line 1 and finally on line 14 “foo” is a reference to the method on line 5. A pure lexical search cannot tell us that the reference on (line 14: column 27) is defined on (line 5: column 3). </p>\n<p><em>Note: From here on in this article we will denote locations as (line:column) tuples, so reference “foo” at (14:27) is defined at (5:3).</em></p>\n<h2 id=\"Parsing\" style=\"position:relative;\"><a href=\"#Parsing\" aria-label=\"Parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Parsing</h2>\n<p>There are many ways to write parsers. For this exploration we choose the parser generator <a href=\"https://www.antlr.org\">Antlr</a>. It will generate the Go code that does the actual parsing for us using a specification of the grammar of the language we want to parse, namely Jsonnet. We could start from scratch and specify the grammar from the <a href=\"https://jsonnet.org/ref/spec.html\">Jsonnet language spec</a>, but luckily <a href=\"http://ironchefpython.github.io/\">somebody else</a> already did <a href=\"https://gist.github.com/ironchefpython/84380aa60871853dc86719dd598c35e4\">this work</a>, and we can just reuse their grammar file (thank you!). Antlr takes this grammar file as input and generates a <a href=\"https://github.com/sourcegraph/lsif-jsonnet/tree/master/parser\">Go package</a> that parses Jsonnet files and produces AST data structures (abstract syntax trees). We don’t need to touch the parser package, it is generated by the Antlr tool. </p>\n<p>For example the following Jsonnet snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">local bar = 5;\n\n{\n   prop: bar,\n}</code></pre></div>\n<p>will result in this AST:</p>\n<img src=\"/blog/lsif-indexer-files/ast.png\" alt=\"ast\">\n<p>The leaf nodes correspond to tokens, and the non-leaf nodes correspond to rules in the grammar. The text in a non-leaf node in the diagram above shows which rule corresponds to the subtree rooted in that node. For example, the “expr:LocalBind” node corresponds to the LocalBind alternative in the expr rule (line 43 in the <a href=\"https://github.com/sourcegraph/lsif-jsonnet/blob/master/Jsonnet.g4\">grammar file</a>).</p>\n<p>Antlr will generate a visitor that walks the AST (also in the parser package). This visitor, in turn, calls methods on a <a href=\"https://github.com/sourcegraph/lsif-jsonnet/blob/master/parser/jsonnet_listener.go\">listener</a> whenever the visitor enters a tree node and whenever the visitor leaves a tree node. </p>\n<p><em>Note: This mechanism should sound familiar to anybody who has written XML SAX code. The <a href=\"https://ocw.mit.edu/ans7870/6/6.005/s16/classes/18-parser-generators/\">OCW Note Reading 18</a> has a nice introduction to parser generators using Antlr.</em></p>\n<p>We have to write the <a href=\"https://github.com/sourcegraph/lsif-jsonnet/blob/master/refs/listener.go\">listener</a>. This approach has the nice advantage that it separates the actual parsing code that Antlr generates from the code that we write to extract useful information from the parsed data.</p>\n<h2 id=\"Scopes\" style=\"position:relative;\"><a href=\"#Scopes\" aria-label=\"Scopes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Scopes</h2>\n<p>So what is the useful information from the parsed abstract syntax tree that we need? To figure this out, let’s go back to Listing 1. Each occurrence of the identifier “foo” happens within a scope, a region of the whole program. The figure below shows the scopes of Listing 1. The scopes form a tree, the file scope is the parent scope and certain language constructs activate additional scopes, such as a function parameter scope or an inner object scope. For each reference of “foo” we can find its definition by looking in the tree path of active scopes. If no definition is found in a scope, we look in its parent and so on all the way to the file scope. We are interested in these bindings from reference to definition (the curvy lines in the figure connecting the “foo“‘s).</p>\n<img src=\"/blog/lsif-indexer-files/scopes.png\" alt=\"scopes\">\n<p><img src=\"/blog/lsif-indexer-files/scopes_tree.png\" alt=\"scope_tree\">\nTree hierarchy of scopes for Listing 1.</p>\n<p>We need to:</p>\n<ul>\n<li>maintain the scope hierarchy</li>\n<li>\n<p>for each identifier occurrence</p>\n<ul>\n<li>if it is a definition, add it to the active scope</li>\n<li>if it is a reference, look in the scope hierarchy for its definition starting at the active scope and going up its parent link</li>\n</ul>\n</li>\n</ul>\n<p>A natural place for all this state is the listener.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Listener <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tpathResolver <span class=\"token operator\">*</span>PathResolver\n\t<span class=\"token operator\">*</span>parser<span class=\"token punctuation\">.</span>BaseJsonnetListener\n\tfile         <span class=\"token builtin\">string</span>\n\tdcls         <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Declaration\n\timports      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Listener\n\tcurrentScope <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Scope\n\tfileScope    <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Scope\n\terrs         <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have one listener for each file. Each import expression will add an additional listener to the <code class=\"language-text\">imports</code> field (by recursively parsing the imported file). We store the file scope, the current scope and a list of declarations. Each declaration will keep track of all its uses. Let’s look at some of the listener interface method implementations.</p>\n<p>When the AST walker enters a function node, our listener <code class=\"language-text\">EnterFunction</code> method is called. We create a new scope for the function parameters and activate it.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ll <span class=\"token operator\">*</span>Listener<span class=\"token punctuation\">)</span> <span class=\"token function\">EnterFunction</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>parser<span class=\"token punctuation\">.</span>FunctionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstartPos<span class=\"token punctuation\">,</span> endPos <span class=\"token operator\">:=</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">NewPos</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">GetStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t      types<span class=\"token punctuation\">.</span><span class=\"token function\">NewPos</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">GetStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tscope <span class=\"token operator\">:=</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">NewScope</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">.</span>currentScope<span class=\"token punctuation\">,</span> startPos<span class=\"token punctuation\">,</span> endPos<span class=\"token punctuation\">)</span>\n\tll<span class=\"token punctuation\">.</span>currentScope <span class=\"token operator\">=</span> scope\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the function param node is visited, this method is called and we add each function param as a declaration to the current scope (which in this case will be the function scope):</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ll <span class=\"token operator\">*</span>Listener<span class=\"token punctuation\">)</span> <span class=\"token function\">EnterParams</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>parser<span class=\"token punctuation\">.</span>ParamsContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> dcl <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">GetPos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tll<span class=\"token punctuation\">.</span><span class=\"token function\">addDeclaration</span><span class=\"token punctuation\">(</span>dcl<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>ParamDeclaration<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> dcl <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">GetNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tll<span class=\"token punctuation\">.</span><span class=\"token function\">addDeclaration</span><span class=\"token punctuation\">(</span>dcl<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>ParamDeclaration<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Visiting a variable reference node results in the call to this listener method:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ll <span class=\"token operator\">*</span>Listener<span class=\"token punctuation\">)</span> <span class=\"token function\">EnterVar</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>parser<span class=\"token punctuation\">.</span>VarContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tpos <span class=\"token operator\">:=</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">NewPos</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">GetSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> decl <span class=\"token operator\">:=</span> ll<span class=\"token punctuation\">.</span>currentScope<span class=\"token punctuation\">.</span><span class=\"token function\">LookupParent</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">GetText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> decl <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tdecl<span class=\"token punctuation\">.</span>Uses <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>decl<span class=\"token punctuation\">.</span>Uses<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>Use<span class=\"token punctuation\">{</span>pos<span class=\"token punctuation\">,</span> ll<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We find the appropriate declaration for this var by walking up the scope chain and add this location to its uses.</p>\n<p>And finally, when a function node is exited, this listener method is called:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ll <span class=\"token operator\">*</span>Listener<span class=\"token punctuation\">)</span> <span class=\"token function\">ExitFunction</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>parser<span class=\"token punctuation\">.</span>FunctionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tll<span class=\"token punctuation\">.</span>currentScope <span class=\"token operator\">=</span> ll<span class=\"token punctuation\">.</span>currentScope<span class=\"token punctuation\">.</span><span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It deactivates the function scope and makes its parent the current scope.</p>\n<p>There are <a href=\"https://github.com/sourcegraph/lsif-jsonnet/blob/master/refs/listener.go\">more listener methods</a> for other AST node types where scopes get activated/deactivated, identifiers are used, functions are called, fields are referenced etc. They are similar to the examples shown. After the AST of a Jsonnet file has been visited, we have all the declarations and for each declaration, its uses. We are ready to export to a LSIF data file.</p>\n<p><em>Note: Because of our choice of Jsonnet as the language we are analyzing, our parsing and data extraction is not 100% accurate. Jsonnet is a dynamic, interpreted language and we are doing static analysis. For example <code class=\"language-text\">(expr).field</code> with <code class=\"language-text\">expr</code> being a complicated expression that resolves at runtime in the interpreter makes it impossible to bind <code class=\"language-text\">field</code> to the right definition without running a Jsonnet interpreter.</em>\n</p>\n<h2 id=\"LSIF-data-format\" style=\"position:relative;\"><a href=\"#LSIF-data-format\" aria-label=\"LSIF data format permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>LSIF data format</h2>\n<p>Before we export to LSIF, we should look and understand the LSIF data format. We have seen in the introduction that the units of data are locations in files and the relationships between them. As a whole, these elements form a graph. LSIF captures this graph by listing the nodes and edges in this graph as a sequence of JSON objects. The best way to illustrate this is by working through an example. Consider again the Jsonnet snippet:</p>\n<img src=\"/blog/lsif-indexer-files/snippet.png\" alt=\"snippet\">\n<p>The two locations of interest are (1, 7) where “bar” is defined and (4, 10) where “bar” is used.\nFor the definition, we need to generate the following subgraph:</p>\n<img src=\"/blog/lsif-indexer-files/def-graph.png\" alt=\"def-graph\">\n<p>The three nodes are:</p>\n<ul>\n<li>a <em>range</em> node where the definition is (in LSIF we need ranges with start and end location, not just locations)</li>\n<li>a <em>resultSet</em> node</li>\n<li>a <em>definitionResult</em> node</li>\n</ul>\n<p>The <em>resultSet</em> node will be connected to the definition and all the use nodes bound to that definition. This allows LSIF to attach information that is shared by all these nodes to the <em>resultSet</em> node instead of repeating it for each node. Since all use nodes and the definition node are connected to the <em>resultSet</em> node we need a way to call out which node is the actual definition. This is done with the <em>definitionResult</em> node which points back to the <em>range</em> node.</p>\n<p>For the reference, we add one more node to this subgraph making it as follows:</p>\n<img src=\"/blog/lsif-indexer-files/use-graph.png\" alt=\"use-graph\">\n<p>That is basically it. These subgraphs get created for each definition, and reference, and then connected together by document nodes that, in turn, are connected to a project node.</p>\n<p>Since the snippet above is a valid Jsonnet program, we can generate the real LSIF graph:</p>\n<img src=\"/blog/lsif-indexer-files/lsif-snippet.png\" alt=\"lsif-snippet\">\n<p><em>Note: Locations are zero-based in the real LSIF graph. Also, each node has a unique ID, which allows us to specify the edges connecting them.</em></p>\n<p>The LSIF data file looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"metaData\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"0.4.0\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"projectRoot\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"file:///Users/uwe/work/tmp\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"positionEncoding\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"utf-16\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"toolInfo\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"lsif-jsonnet\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snippet.lsif\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"snippet.jsonnet\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"jsonnet\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$event\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"begin\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"document\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"uri\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"file:///Users/uwe/work/tmp/snippet.jsonnet\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"languageId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"jsonnet\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$event\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"begin\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"document\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"contains\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inVs\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"range\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"character\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"character\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"contains\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inVs\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"resultSet\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inV\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"definitionResult\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"textDocument/definition\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inV\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inVs\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"document\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"range\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"character\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"character\"</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inV\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"contains\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"outV\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"inVs\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$event\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"document\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"vertex\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"$event\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"project\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The only additional vertices not described yet are the ones labelled “$event”. They serve as delimiting markers for start and finish of projects, and start and finish of documents (files).</p>\n<h2 id=\"Generating\" style=\"position:relative;\"><a href=\"#Generating\" aria-label=\"Generating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Generating</h2>\n<p>We are finally ready to generate the LSIF data. The code is in <a href=\"https://github.com/sourcegraph/lsif-jsonnet/blob/master/dumper/dumper.go\">dumper.go</a>. We proceed in a top-down fashion. We start with the project and the listener for the main Jsonnet file. We emit the project node and delimiter marker for start of project and then call the method for emitting a document. This, in turn, emits a document node and start of document marker. It then emits declarations which create those subgraphs from above by also iterating through their reference lists. We also recursively call document emit methods for each import passing in the corresponding import listener created from parsing the import file. We finish by returning from these methods, creating stop markers as we unwind.</p>\n<p>The actual emitting is done by <a href=\"https://github.com/sourcegraph/lsif-jsonnet/blob/master/protocol/protocol.go\">protocol.go</a>, which has utility methods to create the appropriate vertices, edges and JSON lines.</p>\n<h2 id=\"Testing-and-validating-LSIF-output\" style=\"position:relative;\"><a href=\"#Testing-and-validating-LSIF-output\" aria-label=\"Testing and validating LSIF output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Testing and validating LSIF output</h2>\n<p><a href=\"https://www.npmjs.com/package/lsif-util\">lsif-util</a> is a commandline tool for validating the generated LSIF data syntactically.\nIt also supports producing <a href=\"https://graphviz.gitlab.io/_pages/doc/info/lang.html\">dot graphs</a> that can be turned into PNG images\nwith <a href=\"https://graphviz.gitlab.io/download/\">dot</a>.</p>\n<ul>\n<li>Validate: <code class=\"language-text\">lsif-util validate data.lsif</code></li>\n<li>Visualize: <code class=\"language-text\">lsif-util visualize data.lsif --distance 2 | dot -Tpng -o image.png</code></li>\n</ul>\n<p>Of course, since we’re Sourcegraph, we would be happy if you try out LSIF with a Sourcegraph instance by following these <a href=\"https://docs.sourcegraph.com/code_intelligence/explanations/precise_code_intelligence\">instructions</a>.</p>\n<p>Check out <a href=\"https://lsif.dev\">LSIF.dev</a> for a curated list of LSIF indexers. If you are interested in adding your LSIF indexer to the list, create a pull request <a href=\"https://github.com/lsif/lsif.github.io\">here</a>.</p>\n<p>If you enjoyed the material in this article and like working on developer tools, <a href=\"https://hire.withgoogle.com/public/jobs/sourcegraphcom/view/P_AAAAAADAAADP_pY7jAAAXU?trackingTag=sourcegraphCodeIntelBlog\">we’re hiring</a>!</p>"}