{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-aa2ed007dc3400ab79b1f7fb4938142d-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<p>Sourcegraph extensions make it easy to build code intelligence using existing language analysis tools that donâ€™t necessarily speak <a href=\"https://microsoft.github.io/language-server-protocol/specification\">LSP (the Language Server Protocol)</a>.</p>\n<p>GraphQL is one of these languages that has <a href=\"https://www.npmjs.com/package/@playlyfe/gql\">a language analysis tool</a> and I spent a few days building a Sourcegraph extension for it.</p>\n<p>You can try it out on Sourcegraph.com by first <a href=\"https://sourcegraph.com/extensions/chris/graphql\">enabling the GraphQL extension</a> then visiting a <a href=\"https://sourcegraph.com/github.com/chrismwendt/graphql-ws-langserver@master/-/blob/schema.gql#L9:9\">sample GraphQL file</a> (beware this is relatively experimental - only hover tooltips and jump-to-definition within the same file work).</p>\n<img src=\"https://user-images.githubusercontent.com/1387653/48732224-e4065280-ebf3-11e8-9689-d17da442728c.png\" alt=\"image\">\n<p>The first step was to start with the <code class=\"language-text\">activate()</code> function that will run when the Sourcegraph extension is run:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then I grab the address of the GraphQL language server from a user setting:</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function activate(): void {\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  const address = sourcegraph.configuration.get&lt;Settings>().get('graphql.langserver-address')\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>\n<p>Then I register a callback that will run when the user hovers over something in a GraphQL file:</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function activate(): void {\n<span class=\"token prefix unchanged\"> </span>  const address = sourcegraph.configuration.get&lt;Settings>().get('graphql.langserver-address')\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  sourcegraph.languages.registerHoverProvider([{ pattern: '*.{graphql,gql}'}], {\n<span class=\"token prefix inserted\">+</span>    provideHover: async (doc, pos) => {\n<span class=\"token prefix inserted\">+</span>        return ajax({\n<span class=\"token prefix inserted\">+</span>            method: 'POST',\n<span class=\"token prefix inserted\">+</span>            url: address,\n<span class=\"token prefix inserted\">+</span>            body: JSON.stringify({ method: 'hover', doc, pos }),\n<span class=\"token prefix inserted\">+</span>            responseType: 'json',\n<span class=\"token prefix inserted\">+</span>            headers: {\n<span class=\"token prefix inserted\">+</span>                'Content-Type': 'application/json',\n<span class=\"token prefix inserted\">+</span>            },\n<span class=\"token prefix inserted\">+</span>        })\n<span class=\"token prefix inserted\">+</span>    }\n<span class=\"token prefix inserted\">+</span>  })\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>\n<p>It sends a request to a <a href=\"https://github.com/chrismwendt/graphql-ws-langserver\">https://github.com/chrismwendt/graphql-ws-langserver</a> running elsewhere.</p>\n<p>Then I convert the response to something that the Sourcegraph extension API understands (with Python syntax highlighting to recognize comment lines starting with <code class=\"language-text\">#</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>export function activate(): void {\n<span class=\"token prefix unchanged\"> </span>  const address = sourcegraph.configuration.get&lt;Settings>().get('graphql.langserver-address')\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>  sourcegraph.languages.registerHoverProvider(docSelector, {\n<span class=\"token prefix unchanged\"> </span>    ...\n<span class=\"token prefix unchanged\"> </span>  })\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>    .then(response => {\n<span class=\"token prefix inserted\">+</span>        return (\n<span class=\"token prefix inserted\">+</span>            response &amp;&amp;\n<span class=\"token prefix inserted\">+</span>            response.response &amp;&amp;\n<span class=\"token prefix inserted\">+</span>            response.response.contents &amp;&amp; {\n<span class=\"token prefix inserted\">+</span>                contents: {\n<span class=\"token prefix inserted\">+</span>                    // python syntax highlighting works pretty well for GraphQL\n<span class=\"token prefix inserted\">+</span>                    value: '```python\\n' + response.response.contents.join('\\n') + '\\n```',\n<span class=\"token prefix inserted\">+</span>                    kind: sourcegraph.MarkupKind.Markdown,\n<span class=\"token prefix inserted\">+</span>                },\n<span class=\"token prefix inserted\">+</span>            }\n<span class=\"token prefix inserted\">+</span>        )\n<span class=\"token prefix inserted\">+</span>    })\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>}</span></code></pre></div>\n<p>Check out the repository for the <a href=\"https://github.com/sourcegraph/sourcegraph-graphql\">extension</a> and the <a href=\"https://github.com/chrismwendt/graphql-ws-langserver\">server component</a>.</p>"}