{"expireTime":9007200905229171000,"key":"transformer-remark-markdown-html-f783d6048bd887a38f6ee73daa4f715c-gatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-unwrap-imagesgatsby-remark-imagesgatsby-remark-smartypants-","val":"<p>Do you use Vim and miss the powerful features for navigating your code that <a href=\"https://sourcegraph.com\">Sourcegraph</a> gives you in your browser?</p>\n<p>Code intelligence in Sourcegraph is powered by <a href=\"http://langserver.org/\">language servers</a> that implement the <a href=\"https://microsoft.github.io/language-server-protocol/\">Language Server Protocol</a>. This means you can install these language servers locally and get code intelligence on your machine.</p>\n<p>In this post, I’ll walk you through setting up a language server client for Vim and Neovim. Once complete, you’ll be able to go to definition, find references and more.</p>\n<h2 id=\"Prerequisites\" style=\"position:relative;\"><a href=\"#Prerequisites\" aria-label=\"Prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Prerequisites</h2>\n<p>I’ll start with this minimal <code class=\"language-text\">.vimrc</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">syntax on\nset number\nset hidden &quot; Required for specific actions that require multiple buffers</code></pre></div>\n<p>I’ll also use <a href=\"https://github.com/junegunn/vim-plug\"><code class=\"language-text\">vim-plug</code></a> to manage plugins used in this post. Follow the <a href=\"https://github.com/junegunn/vim-plug#installation\">installation steps</a> in the README for your specific setup.</p>\n<p>Now let’s configure Vim to use <code class=\"language-text\">vim-plug</code> by adding the following to your <code class=\"language-text\">.vimrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">call plug#begin(&#39;~/.vim/plugged&#39;)\n\n&quot; Plugins go here\n\ncall plug#end()</code></pre></div>\n<h2 id=\"Language-Server-Setup\" style=\"position:relative;\"><a href=\"#Language-Server-Setup\" aria-label=\"Language Server Setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Language Server Setup</h2>\n<p>Before we configure the Vim language server client, we need a language server installed locally, so the client has something to communicate with.</p>\n<p>At Sourcegraph, we write a lot of Go, so we’ll use the Go language server for this example. If you don’t use Go, you can pick a <a href=\"http://langserver.org/\">language server</a> for your language of choice.</p>\n<blockquote>\n<p>Note that <a href=\"https://golang.org/dl/\">Go must be installed</a> to use the Go language server.</p>\n</blockquote>\n<p>Let’s install the Go language server.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go get -u github.com/sourcegraph/go-langserver</code></pre></div>\n<p>Make sure it was installed and is executable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go-langserver -version</code></pre></div>\n<blockquote>\n<p>If the above didn’t work, make sure you have <a href=\"https://golang.org/doc/install#testing\">Go configured correctly</a>.</p>\n</blockquote>\n<p>That’s it! The Go language server is ready to use.</p>\n<h2 id=\"Language-Server-Client-Setup\" style=\"position:relative;\"><a href=\"#Language-Server-Client-Setup\" aria-label=\"Language Server Client Setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Language Server Client Setup</h2>\n<p>Now it’s time to install the language server client plugin. We’ll use <a href=\"https://github.com/autozimu/LanguageClient-neovim\">LanguageClient-neovim</a>. Although the name contains Neovim, it supports Vim as well.</p>\n<p>To install the plugin, let’s add the plugin to our <code class=\"language-text\">.vimrc</code> so <code class=\"language-text\">vim-plug</code> can install it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">call plug#begin(&#39;~/.vim/plugged&#39;)\n\nPlug &#39;autozimu/LanguageClient-neovim&#39;, {\n    \\ &#39;branch&#39;: &#39;next&#39;,\n    \\ &#39;do&#39;: &#39;bash install.sh&#39;,\n    \\ }\n\ncall plug#end()</code></pre></div>\n<p>After you add this to your <code class=\"language-text\">.vimrc</code>, make sure you install the plugin. For <code class=\"language-text\">vim-plug,</code> just run the <code class=\"language-text\">:PlugInstall</code> editor command.</p>\n<p>Next, we need to tell the language client how to use the language servers you have installed. To do this, we’ll add a configuration option to your <code class=\"language-text\">.vimrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let g:LanguageClient_serverCommands = {\n    \\ &#39;go&#39;: [&#39;go-langserver&#39;]\n    \\ }</code></pre></div>\n<p>That’s it! You now have many of the powerful features you’re used to from Sourcegraph inside Vim. Now let’s use it.</p>\n<h2 id=\"Language-Client-Usage\" style=\"position:relative;\"><a href=\"#Language-Client-Usage\" aria-label=\"Language Client Usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 18 95 120\" height=\"18\" width=\"18\"><path d=\"M53.69,78.7H37.94l-5.85,25H21.74l5.85-25H15.89L18,69.1H29.84l4.65-19.65H23.39l2.1-9.6H36.74l5.7-23.7H52.79l-5.7,23.7H62.84l5.7-23.7H78.89l-5.7,23.7H84.74l-2.4,9.6H70.94L66.29,69.1H77.24l-2.4,9.6H64l-5.85,25H47.84Zm-13.5-9.6H55.94l4.65-19.65H44.84Z\"/></svg></a>Language Client Usage</h2>\n<p>Now use this on a Go file you have locally or save the below to hello.go in your Go workspace.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package main\n\nimport &quot;fmt&quot;\n\nvar subject string\n\nfunc main() {\n    subject = &quot;World&quot;\n\n    fmt.Printf(&quot;Hello, %s!&quot;, subject)\n}</code></pre></div>\n<p>Open this file, then type the following command to execute the context menu function.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">:call LanguageClient_contextMenu()</code></pre></div>\n<p>This command opens up a context menu showing you all of the different functionalities provided by the language server. To execute an action, type the number listed by the item and press enter.</p>\n<img src=\"https://images.ctfassets.net/le3mxztn6yoo/c999K2j8NqqCAMAwwuySM/a95eb91f8b0e481d32f28b1e8466e436/sourcegraph-vim-golang-code-intelligence.gif\" alt=\"Sourcegraph vim and golang code intelligence\">\n<p>While this is pretty cool, it’s still a bit clunky to use. Let’s set up some shortcuts. Add each of the following to your <code class=\"language-text\">.vimrc</code>:</p>\n<ul>\n<li>\n<p>Get “hover” information by hitting the keys <code class=\"language-text\">&lt;leader&gt;h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nnoremap &lt;silent&gt; &lt;leader&gt;d :call LanguageClient_textDocument_hover()&lt;CR&gt;</code></pre></div>\n</li>\n<li>\n<p>Go to definition by hitting the keys <code class=\"language-text\">&lt;leader&gt;d</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nnoremap &lt;silent&gt; &lt;leader&gt;d :call LanguageClient_textDocument_definition()&lt;CR&gt;</code></pre></div>\n</li>\n<li>\n<p>Find references by hitting the keys <code class=\"language-text\">&lt;leader&gt;fr</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nnoremap &lt;silent&gt; &lt;leader&gt;fr :call LanguageClient_textDocument_references()&lt;CR&gt;</code></pre></div>\n</li>\n</ul>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><strong>Gotcha alert!</strong> The language client adds the list of references to Vim’s location list. Once the operation has completed, you’ll see “Location list updated.” To see the list, type <code class=\"language-text\">:lopen</code>. I recommend installing <a href=\"https://github.com/junegunn/fzf\">junegunn/fzf</a> for an easier-to-navigate list that opens automatically.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li>\n<p>Rename symbol by hitting the keys <code class=\"language-text\">&lt;leader&gt;r</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nnoremap &lt;silent&gt; &lt;leader&gt;r :call LanguageClient_textDocument_rename()&lt;CR&gt;</code></pre></div>\n</li>\n<li>\n<p>Open the context menu to get each of the available actions by hitting the keys <code class=\"language-text\">&lt;leader&gt;m</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nnoremap &lt;silent&gt; &lt;leader&gt;r :call LanguageClient_contextMenu()&lt;CR&gt;</code></pre></div>\n</li>\n</ul>\n<p>There you go! You now have the basic features you know and love from Sourcegraph code intelligence inside Vim or Neovim.</p>\n<p>Got any other Vim plugins and integrations I should know about? Let me know by tweeting at <a href=\"https://twitter.com/ij_snow\">ij_snow</a> and <a href=\"https://twitter.com/sourcegraph\">@sourcegraph</a>!</p>"}